{"version":3,"file":"index.web-BXlmGF_y.js","sources":["../../../node_modules/lodash-es/_freeGlobal.js","../../../node_modules/lodash-es/_root.js","../../../node_modules/lodash-es/_Symbol.js","../../../node_modules/lodash-es/_getRawTag.js","../../../node_modules/lodash-es/_objectToString.js","../../../node_modules/lodash-es/_baseGetTag.js","../../../node_modules/lodash-es/isObjectLike.js","../../../node_modules/lodash-es/isSymbol.js","../../../node_modules/lodash-es/_arrayMap.js","../../../node_modules/lodash-es/isArray.js","../../../node_modules/lodash-es/_baseToString.js","../../../node_modules/lodash-es/_trimmedEndIndex.js","../../../node_modules/lodash-es/_baseTrim.js","../../../node_modules/lodash-es/isObject.js","../../../node_modules/lodash-es/toNumber.js","../../../node_modules/lodash-es/toFinite.js","../../../node_modules/lodash-es/toInteger.js","../../../node_modules/lodash-es/isFunction.js","../../../node_modules/lodash-es/_coreJsData.js","../../../node_modules/lodash-es/_isMasked.js","../../../node_modules/lodash-es/_toSource.js","../../../node_modules/lodash-es/_baseIsNative.js","../../../node_modules/lodash-es/_getValue.js","../../../node_modules/lodash-es/_getNative.js","../../../node_modules/lodash-es/_WeakMap.js","../../../node_modules/lodash-es/isLength.js","../../../node_modules/lodash-es/isArrayLike.js","../../../node_modules/lodash-es/_isPrototype.js","../../../node_modules/lodash-es/_baseIsArguments.js","../../../node_modules/lodash-es/isArguments.js","../../../node_modules/lodash-es/stubFalse.js","../../../node_modules/lodash-es/isBuffer.js","../../../node_modules/lodash-es/_baseIsTypedArray.js","../../../node_modules/lodash-es/_baseUnary.js","../../../node_modules/lodash-es/_nodeUtil.js","../../../node_modules/lodash-es/isTypedArray.js","../../../node_modules/lodash-es/_overArg.js","../../../node_modules/lodash-es/_nativeKeys.js","../../../node_modules/lodash-es/_baseKeys.js","../../../node_modules/lodash-es/_Map.js","../../../node_modules/lodash-es/toString.js","../../../node_modules/lodash-es/_DataView.js","../../../node_modules/lodash-es/_Promise.js","../../../node_modules/lodash-es/_Set.js","../../../node_modules/lodash-es/_getTag.js","../../../node_modules/lodash-es/_baseInRange.js","../../../node_modules/lodash-es/inRange.js","../../../node_modules/lodash-es/isString.js","../../../node_modules/lodash-es/_baseIsDate.js","../../../node_modules/lodash-es/isDate.js","../../../node_modules/lodash-es/isEmpty.js","../../../node_modules/lodash-es/isInteger.js","../../../node_modules/lodash-es/isNumber.js","../../../node_modules/lodash-es/isNil.js","../../../node_modules/lodash-es/isNull.js","../../../node_modules/lodash-es/isUndefined.js","../../../node_modules/lodash-es/parseInt.js","../../../node_modules/js-big-decimal/dist/esm/big-decimal.js","../../../node_modules/base-x/src/esm/index.js","../../../node_modules/bs58/src/esm/index.js","../../../node_modules/libnexa-ts/dist/index.web.mjs","../../../node_modules/@noble/hashes/esm/crypto.js","../../../node_modules/@noble/hashes/esm/utils.js","../../../node_modules/@noble/hashes/esm/_md.js","../../../node_modules/@noble/hashes/esm/_u64.js","../../../node_modules/@noble/hashes/esm/sha2.js","../../../node_modules/@noble/hashes/esm/sha256.js","../../../node_modules/@noble/hashes/esm/sha512.js","../../../node_modules/@noble/hashes/esm/hmac.js","../../../node_modules/@noble/hashes/esm/pbkdf2.js","../../../node_modules/bip39/src/_wordlists.js","../../../node_modules/bip39/src/index.js","../../../node_modules/ms/index.js","../../../node_modules/debug/src/common.js","../../../node_modules/debug/src/browser.js","../../../node_modules/node-stdlib-browser/esm/mock/empty.js","../../../node_modules/isomorphic-ws/browser.js","../../../node_modules/lossless-json/lib/esm/utils.js","../../../node_modules/lossless-json/lib/esm/LosslessNumber.js","../../../node_modules/lossless-json/lib/esm/numberParsers.js","../../../node_modules/lossless-json/lib/esm/revive.js","../../../node_modules/lossless-json/lib/esm/parse.js","../../../node_modules/@vgrunner/electrum-cash/dist/index.mjs.js","../../../node_modules/wallet-comms-sdk/node_modules/isomorphic-ws/browser.js","../../../node_modules/wallet-comms-sdk/dist/index.mjs","../../../node_modules/nexa-wallet-sdk/dist/index.web.mjs"],"sourcesContent":["/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\nexport default freeGlobal;\n","import freeGlobal from './_freeGlobal.js';\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\nexport default root;\n","import root from './_root.js';\n\n/** Built-in value references. */\nvar Symbol = root.Symbol;\n\nexport default Symbol;\n","import Symbol from './_Symbol.js';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar nativeObjectToString = objectProto.toString;\n\n/** Built-in value references. */\nvar symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n\n/**\n * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the raw `toStringTag`.\n */\nfunction getRawTag(value) {\n  var isOwn = hasOwnProperty.call(value, symToStringTag),\n      tag = value[symToStringTag];\n\n  try {\n    value[symToStringTag] = undefined;\n    var unmasked = true;\n  } catch (e) {}\n\n  var result = nativeObjectToString.call(value);\n  if (unmasked) {\n    if (isOwn) {\n      value[symToStringTag] = tag;\n    } else {\n      delete value[symToStringTag];\n    }\n  }\n  return result;\n}\n\nexport default getRawTag;\n","/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar nativeObjectToString = objectProto.toString;\n\n/**\n * Converts `value` to a string using `Object.prototype.toString`.\n *\n * @private\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n */\nfunction objectToString(value) {\n  return nativeObjectToString.call(value);\n}\n\nexport default objectToString;\n","import Symbol from './_Symbol.js';\nimport getRawTag from './_getRawTag.js';\nimport objectToString from './_objectToString.js';\n\n/** `Object#toString` result references. */\nvar nullTag = '[object Null]',\n    undefinedTag = '[object Undefined]';\n\n/** Built-in value references. */\nvar symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n\n/**\n * The base implementation of `getTag` without fallbacks for buggy environments.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nfunction baseGetTag(value) {\n  if (value == null) {\n    return value === undefined ? undefinedTag : nullTag;\n  }\n  return (symToStringTag && symToStringTag in Object(value))\n    ? getRawTag(value)\n    : objectToString(value);\n}\n\nexport default baseGetTag;\n","/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return value != null && typeof value == 'object';\n}\n\nexport default isObjectLike;\n","import baseGetTag from './_baseGetTag.js';\nimport isObjectLike from './isObjectLike.js';\n\n/** `Object#toString` result references. */\nvar symbolTag = '[object Symbol]';\n\n/**\n * Checks if `value` is classified as a `Symbol` primitive or object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n * @example\n *\n * _.isSymbol(Symbol.iterator);\n * // => true\n *\n * _.isSymbol('abc');\n * // => false\n */\nfunction isSymbol(value) {\n  return typeof value == 'symbol' ||\n    (isObjectLike(value) && baseGetTag(value) == symbolTag);\n}\n\nexport default isSymbol;\n","/**\n * A specialized version of `_.map` for arrays without support for iteratee\n * shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the new mapped array.\n */\nfunction arrayMap(array, iteratee) {\n  var index = -1,\n      length = array == null ? 0 : array.length,\n      result = Array(length);\n\n  while (++index < length) {\n    result[index] = iteratee(array[index], index, array);\n  }\n  return result;\n}\n\nexport default arrayMap;\n","/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\nexport default isArray;\n","import Symbol from './_Symbol.js';\nimport arrayMap from './_arrayMap.js';\nimport isArray from './isArray.js';\nimport isSymbol from './isSymbol.js';\n\n/** Used as references for various `Number` constants. */\nvar INFINITY = 1 / 0;\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolToString = symbolProto ? symbolProto.toString : undefined;\n\n/**\n * The base implementation of `_.toString` which doesn't convert nullish\n * values to empty strings.\n *\n * @private\n * @param {*} value The value to process.\n * @returns {string} Returns the string.\n */\nfunction baseToString(value) {\n  // Exit early for strings to avoid a performance hit in some environments.\n  if (typeof value == 'string') {\n    return value;\n  }\n  if (isArray(value)) {\n    // Recursively convert values (susceptible to call stack limits).\n    return arrayMap(value, baseToString) + '';\n  }\n  if (isSymbol(value)) {\n    return symbolToString ? symbolToString.call(value) : '';\n  }\n  var result = (value + '');\n  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\n}\n\nexport default baseToString;\n","/** Used to match a single whitespace character. */\nvar reWhitespace = /\\s/;\n\n/**\n * Used by `_.trim` and `_.trimEnd` to get the index of the last non-whitespace\n * character of `string`.\n *\n * @private\n * @param {string} string The string to inspect.\n * @returns {number} Returns the index of the last non-whitespace character.\n */\nfunction trimmedEndIndex(string) {\n  var index = string.length;\n\n  while (index-- && reWhitespace.test(string.charAt(index))) {}\n  return index;\n}\n\nexport default trimmedEndIndex;\n","import trimmedEndIndex from './_trimmedEndIndex.js';\n\n/** Used to match leading whitespace. */\nvar reTrimStart = /^\\s+/;\n\n/**\n * The base implementation of `_.trim`.\n *\n * @private\n * @param {string} string The string to trim.\n * @returns {string} Returns the trimmed string.\n */\nfunction baseTrim(string) {\n  return string\n    ? string.slice(0, trimmedEndIndex(string) + 1).replace(reTrimStart, '')\n    : string;\n}\n\nexport default baseTrim;\n","/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return value != null && (type == 'object' || type == 'function');\n}\n\nexport default isObject;\n","import baseTrim from './_baseTrim.js';\nimport isObject from './isObject.js';\nimport isSymbol from './isSymbol.js';\n\n/** Used as references for various `Number` constants. */\nvar NAN = 0 / 0;\n\n/** Used to detect bad signed hexadecimal string values. */\nvar reIsBadHex = /^[-+]0x[0-9a-f]+$/i;\n\n/** Used to detect binary string values. */\nvar reIsBinary = /^0b[01]+$/i;\n\n/** Used to detect octal string values. */\nvar reIsOctal = /^0o[0-7]+$/i;\n\n/** Built-in method references without a dependency on `root`. */\nvar freeParseInt = parseInt;\n\n/**\n * Converts `value` to a number.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to process.\n * @returns {number} Returns the number.\n * @example\n *\n * _.toNumber(3.2);\n * // => 3.2\n *\n * _.toNumber(Number.MIN_VALUE);\n * // => 5e-324\n *\n * _.toNumber(Infinity);\n * // => Infinity\n *\n * _.toNumber('3.2');\n * // => 3.2\n */\nfunction toNumber(value) {\n  if (typeof value == 'number') {\n    return value;\n  }\n  if (isSymbol(value)) {\n    return NAN;\n  }\n  if (isObject(value)) {\n    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;\n    value = isObject(other) ? (other + '') : other;\n  }\n  if (typeof value != 'string') {\n    return value === 0 ? value : +value;\n  }\n  value = baseTrim(value);\n  var isBinary = reIsBinary.test(value);\n  return (isBinary || reIsOctal.test(value))\n    ? freeParseInt(value.slice(2), isBinary ? 2 : 8)\n    : (reIsBadHex.test(value) ? NAN : +value);\n}\n\nexport default toNumber;\n","import toNumber from './toNumber.js';\n\n/** Used as references for various `Number` constants. */\nvar INFINITY = 1 / 0,\n    MAX_INTEGER = 1.7976931348623157e+308;\n\n/**\n * Converts `value` to a finite number.\n *\n * @static\n * @memberOf _\n * @since 4.12.0\n * @category Lang\n * @param {*} value The value to convert.\n * @returns {number} Returns the converted number.\n * @example\n *\n * _.toFinite(3.2);\n * // => 3.2\n *\n * _.toFinite(Number.MIN_VALUE);\n * // => 5e-324\n *\n * _.toFinite(Infinity);\n * // => 1.7976931348623157e+308\n *\n * _.toFinite('3.2');\n * // => 3.2\n */\nfunction toFinite(value) {\n  if (!value) {\n    return value === 0 ? value : 0;\n  }\n  value = toNumber(value);\n  if (value === INFINITY || value === -INFINITY) {\n    var sign = (value < 0 ? -1 : 1);\n    return sign * MAX_INTEGER;\n  }\n  return value === value ? value : 0;\n}\n\nexport default toFinite;\n","import toFinite from './toFinite.js';\n\n/**\n * Converts `value` to an integer.\n *\n * **Note:** This method is loosely based on\n * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to convert.\n * @returns {number} Returns the converted integer.\n * @example\n *\n * _.toInteger(3.2);\n * // => 3\n *\n * _.toInteger(Number.MIN_VALUE);\n * // => 0\n *\n * _.toInteger(Infinity);\n * // => 1.7976931348623157e+308\n *\n * _.toInteger('3.2');\n * // => 3\n */\nfunction toInteger(value) {\n  var result = toFinite(value),\n      remainder = result % 1;\n\n  return result === result ? (remainder ? result - remainder : result) : 0;\n}\n\nexport default toInteger;\n","import baseGetTag from './_baseGetTag.js';\nimport isObject from './isObject.js';\n\n/** `Object#toString` result references. */\nvar asyncTag = '[object AsyncFunction]',\n    funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]',\n    proxyTag = '[object Proxy]';\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n  if (!isObject(value)) {\n    return false;\n  }\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in Safari 9 which returns 'object' for typed arrays and other constructors.\n  var tag = baseGetTag(value);\n  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;\n}\n\nexport default isFunction;\n","import root from './_root.js';\n\n/** Used to detect overreaching core-js shims. */\nvar coreJsData = root['__core-js_shared__'];\n\nexport default coreJsData;\n","import coreJsData from './_coreJsData.js';\n\n/** Used to detect methods masquerading as native. */\nvar maskSrcKey = (function() {\n  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\n  return uid ? ('Symbol(src)_1.' + uid) : '';\n}());\n\n/**\n * Checks if `func` has its source masked.\n *\n * @private\n * @param {Function} func The function to check.\n * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n */\nfunction isMasked(func) {\n  return !!maskSrcKey && (maskSrcKey in func);\n}\n\nexport default isMasked;\n","/** Used for built-in method references. */\nvar funcProto = Function.prototype;\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/**\n * Converts `func` to its source code.\n *\n * @private\n * @param {Function} func The function to convert.\n * @returns {string} Returns the source code.\n */\nfunction toSource(func) {\n  if (func != null) {\n    try {\n      return funcToString.call(func);\n    } catch (e) {}\n    try {\n      return (func + '');\n    } catch (e) {}\n  }\n  return '';\n}\n\nexport default toSource;\n","import isFunction from './isFunction.js';\nimport isMasked from './_isMasked.js';\nimport isObject from './isObject.js';\nimport toSource from './_toSource.js';\n\n/**\n * Used to match `RegExp`\n * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n */\nvar reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\n\n/** Used to detect host constructors (Safari). */\nvar reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n/** Used for built-in method references. */\nvar funcProto = Function.prototype,\n    objectProto = Object.prototype;\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/** Used to detect if a method is native. */\nvar reIsNative = RegExp('^' +\n  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')\n  .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n);\n\n/**\n * The base implementation of `_.isNative` without bad shim checks.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a native function,\n *  else `false`.\n */\nfunction baseIsNative(value) {\n  if (!isObject(value) || isMasked(value)) {\n    return false;\n  }\n  var pattern = isFunction(value) ? reIsNative : reIsHostCtor;\n  return pattern.test(toSource(value));\n}\n\nexport default baseIsNative;\n","/**\n * Gets the value at `key` of `object`.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {string} key The key of the property to get.\n * @returns {*} Returns the property value.\n */\nfunction getValue(object, key) {\n  return object == null ? undefined : object[key];\n}\n\nexport default getValue;\n","import baseIsNative from './_baseIsNative.js';\nimport getValue from './_getValue.js';\n\n/**\n * Gets the native function at `key` of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {string} key The key of the method to get.\n * @returns {*} Returns the function if it's native, else `undefined`.\n */\nfunction getNative(object, key) {\n  var value = getValue(object, key);\n  return baseIsNative(value) ? value : undefined;\n}\n\nexport default getNative;\n","import getNative from './_getNative.js';\nimport root from './_root.js';\n\n/* Built-in method references that are verified to be native. */\nvar WeakMap = getNative(root, 'WeakMap');\n\nexport default WeakMap;\n","/** Used as references for various `Number` constants. */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/**\n * Checks if `value` is a valid array-like length.\n *\n * **Note:** This method is loosely based on\n * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n * @example\n *\n * _.isLength(3);\n * // => true\n *\n * _.isLength(Number.MIN_VALUE);\n * // => false\n *\n * _.isLength(Infinity);\n * // => false\n *\n * _.isLength('3');\n * // => false\n */\nfunction isLength(value) {\n  return typeof value == 'number' &&\n    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n}\n\nexport default isLength;\n","import isFunction from './isFunction.js';\nimport isLength from './isLength.js';\n\n/**\n * Checks if `value` is array-like. A value is considered array-like if it's\n * not a function and has a `value.length` that's an integer greater than or\n * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n * @example\n *\n * _.isArrayLike([1, 2, 3]);\n * // => true\n *\n * _.isArrayLike(document.body.children);\n * // => true\n *\n * _.isArrayLike('abc');\n * // => true\n *\n * _.isArrayLike(_.noop);\n * // => false\n */\nfunction isArrayLike(value) {\n  return value != null && isLength(value.length) && !isFunction(value);\n}\n\nexport default isArrayLike;\n","/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/**\n * Checks if `value` is likely a prototype object.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n */\nfunction isPrototype(value) {\n  var Ctor = value && value.constructor,\n      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;\n\n  return value === proto;\n}\n\nexport default isPrototype;\n","import baseGetTag from './_baseGetTag.js';\nimport isObjectLike from './isObjectLike.js';\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]';\n\n/**\n * The base implementation of `_.isArguments`.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n */\nfunction baseIsArguments(value) {\n  return isObjectLike(value) && baseGetTag(value) == argsTag;\n}\n\nexport default baseIsArguments;\n","import baseIsArguments from './_baseIsArguments.js';\nimport isObjectLike from './isObjectLike.js';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/** Built-in value references. */\nvar propertyIsEnumerable = objectProto.propertyIsEnumerable;\n\n/**\n * Checks if `value` is likely an `arguments` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n *  else `false`.\n * @example\n *\n * _.isArguments(function() { return arguments; }());\n * // => true\n *\n * _.isArguments([1, 2, 3]);\n * // => false\n */\nvar isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {\n  return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&\n    !propertyIsEnumerable.call(value, 'callee');\n};\n\nexport default isArguments;\n","/**\n * This method returns `false`.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {boolean} Returns `false`.\n * @example\n *\n * _.times(2, _.stubFalse);\n * // => [false, false]\n */\nfunction stubFalse() {\n  return false;\n}\n\nexport default stubFalse;\n","import root from './_root.js';\nimport stubFalse from './stubFalse.js';\n\n/** Detect free variable `exports`. */\nvar freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;\n\n/** Detect free variable `module`. */\nvar freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n\n/** Detect the popular CommonJS extension `module.exports`. */\nvar moduleExports = freeModule && freeModule.exports === freeExports;\n\n/** Built-in value references. */\nvar Buffer = moduleExports ? root.Buffer : undefined;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined;\n\n/**\n * Checks if `value` is a buffer.\n *\n * @static\n * @memberOf _\n * @since 4.3.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.\n * @example\n *\n * _.isBuffer(new Buffer(2));\n * // => true\n *\n * _.isBuffer(new Uint8Array(2));\n * // => false\n */\nvar isBuffer = nativeIsBuffer || stubFalse;\n\nexport default isBuffer;\n","import baseGetTag from './_baseGetTag.js';\nimport isLength from './isLength.js';\nimport isObjectLike from './isObjectLike.js';\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    arrayTag = '[object Array]',\n    boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    errorTag = '[object Error]',\n    funcTag = '[object Function]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    objectTag = '[object Object]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    weakMapTag = '[object WeakMap]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]',\n    float32Tag = '[object Float32Array]',\n    float64Tag = '[object Float64Array]',\n    int8Tag = '[object Int8Array]',\n    int16Tag = '[object Int16Array]',\n    int32Tag = '[object Int32Array]',\n    uint8Tag = '[object Uint8Array]',\n    uint8ClampedTag = '[object Uint8ClampedArray]',\n    uint16Tag = '[object Uint16Array]',\n    uint32Tag = '[object Uint32Array]';\n\n/** Used to identify `toStringTag` values of typed arrays. */\nvar typedArrayTags = {};\ntypedArrayTags[float32Tag] = typedArrayTags[float64Tag] =\ntypedArrayTags[int8Tag] = typedArrayTags[int16Tag] =\ntypedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =\ntypedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =\ntypedArrayTags[uint32Tag] = true;\ntypedArrayTags[argsTag] = typedArrayTags[arrayTag] =\ntypedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =\ntypedArrayTags[dataViewTag] = typedArrayTags[dateTag] =\ntypedArrayTags[errorTag] = typedArrayTags[funcTag] =\ntypedArrayTags[mapTag] = typedArrayTags[numberTag] =\ntypedArrayTags[objectTag] = typedArrayTags[regexpTag] =\ntypedArrayTags[setTag] = typedArrayTags[stringTag] =\ntypedArrayTags[weakMapTag] = false;\n\n/**\n * The base implementation of `_.isTypedArray` without Node.js optimizations.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n */\nfunction baseIsTypedArray(value) {\n  return isObjectLike(value) &&\n    isLength(value.length) && !!typedArrayTags[baseGetTag(value)];\n}\n\nexport default baseIsTypedArray;\n","/**\n * The base implementation of `_.unary` without support for storing metadata.\n *\n * @private\n * @param {Function} func The function to cap arguments for.\n * @returns {Function} Returns the new capped function.\n */\nfunction baseUnary(func) {\n  return function(value) {\n    return func(value);\n  };\n}\n\nexport default baseUnary;\n","import freeGlobal from './_freeGlobal.js';\n\n/** Detect free variable `exports`. */\nvar freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;\n\n/** Detect free variable `module`. */\nvar freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n\n/** Detect the popular CommonJS extension `module.exports`. */\nvar moduleExports = freeModule && freeModule.exports === freeExports;\n\n/** Detect free variable `process` from Node.js. */\nvar freeProcess = moduleExports && freeGlobal.process;\n\n/** Used to access faster Node.js helpers. */\nvar nodeUtil = (function() {\n  try {\n    // Use `util.types` for Node.js 10+.\n    var types = freeModule && freeModule.require && freeModule.require('util').types;\n\n    if (types) {\n      return types;\n    }\n\n    // Legacy `process.binding('util')` for Node.js < 10.\n    return freeProcess && freeProcess.binding && freeProcess.binding('util');\n  } catch (e) {}\n}());\n\nexport default nodeUtil;\n","import baseIsTypedArray from './_baseIsTypedArray.js';\nimport baseUnary from './_baseUnary.js';\nimport nodeUtil from './_nodeUtil.js';\n\n/* Node.js helper references. */\nvar nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;\n\n/**\n * Checks if `value` is classified as a typed array.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n * @example\n *\n * _.isTypedArray(new Uint8Array);\n * // => true\n *\n * _.isTypedArray([]);\n * // => false\n */\nvar isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;\n\nexport default isTypedArray;\n","/**\n * Creates a unary function that invokes `func` with its argument transformed.\n *\n * @private\n * @param {Function} func The function to wrap.\n * @param {Function} transform The argument transform.\n * @returns {Function} Returns the new function.\n */\nfunction overArg(func, transform) {\n  return function(arg) {\n    return func(transform(arg));\n  };\n}\n\nexport default overArg;\n","import overArg from './_overArg.js';\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeKeys = overArg(Object.keys, Object);\n\nexport default nativeKeys;\n","import isPrototype from './_isPrototype.js';\nimport nativeKeys from './_nativeKeys.js';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction baseKeys(object) {\n  if (!isPrototype(object)) {\n    return nativeKeys(object);\n  }\n  var result = [];\n  for (var key in Object(object)) {\n    if (hasOwnProperty.call(object, key) && key != 'constructor') {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\nexport default baseKeys;\n","import getNative from './_getNative.js';\nimport root from './_root.js';\n\n/* Built-in method references that are verified to be native. */\nvar Map = getNative(root, 'Map');\n\nexport default Map;\n","import baseToString from './_baseToString.js';\n\n/**\n * Converts `value` to a string. An empty string is returned for `null`\n * and `undefined` values. The sign of `-0` is preserved.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n * @example\n *\n * _.toString(null);\n * // => ''\n *\n * _.toString(-0);\n * // => '-0'\n *\n * _.toString([1, 2, 3]);\n * // => '1,2,3'\n */\nfunction toString(value) {\n  return value == null ? '' : baseToString(value);\n}\n\nexport default toString;\n","import getNative from './_getNative.js';\nimport root from './_root.js';\n\n/* Built-in method references that are verified to be native. */\nvar DataView = getNative(root, 'DataView');\n\nexport default DataView;\n","import getNative from './_getNative.js';\nimport root from './_root.js';\n\n/* Built-in method references that are verified to be native. */\nvar Promise = getNative(root, 'Promise');\n\nexport default Promise;\n","import getNative from './_getNative.js';\nimport root from './_root.js';\n\n/* Built-in method references that are verified to be native. */\nvar Set = getNative(root, 'Set');\n\nexport default Set;\n","import DataView from './_DataView.js';\nimport Map from './_Map.js';\nimport Promise from './_Promise.js';\nimport Set from './_Set.js';\nimport WeakMap from './_WeakMap.js';\nimport baseGetTag from './_baseGetTag.js';\nimport toSource from './_toSource.js';\n\n/** `Object#toString` result references. */\nvar mapTag = '[object Map]',\n    objectTag = '[object Object]',\n    promiseTag = '[object Promise]',\n    setTag = '[object Set]',\n    weakMapTag = '[object WeakMap]';\n\nvar dataViewTag = '[object DataView]';\n\n/** Used to detect maps, sets, and weakmaps. */\nvar dataViewCtorString = toSource(DataView),\n    mapCtorString = toSource(Map),\n    promiseCtorString = toSource(Promise),\n    setCtorString = toSource(Set),\n    weakMapCtorString = toSource(WeakMap);\n\n/**\n * Gets the `toStringTag` of `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nvar getTag = baseGetTag;\n\n// Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.\nif ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||\n    (Map && getTag(new Map) != mapTag) ||\n    (Promise && getTag(Promise.resolve()) != promiseTag) ||\n    (Set && getTag(new Set) != setTag) ||\n    (WeakMap && getTag(new WeakMap) != weakMapTag)) {\n  getTag = function(value) {\n    var result = baseGetTag(value),\n        Ctor = result == objectTag ? value.constructor : undefined,\n        ctorString = Ctor ? toSource(Ctor) : '';\n\n    if (ctorString) {\n      switch (ctorString) {\n        case dataViewCtorString: return dataViewTag;\n        case mapCtorString: return mapTag;\n        case promiseCtorString: return promiseTag;\n        case setCtorString: return setTag;\n        case weakMapCtorString: return weakMapTag;\n      }\n    }\n    return result;\n  };\n}\n\nexport default getTag;\n","/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max,\n    nativeMin = Math.min;\n\n/**\n * The base implementation of `_.inRange` which doesn't coerce arguments.\n *\n * @private\n * @param {number} number The number to check.\n * @param {number} start The start of the range.\n * @param {number} end The end of the range.\n * @returns {boolean} Returns `true` if `number` is in the range, else `false`.\n */\nfunction baseInRange(number, start, end) {\n  return number >= nativeMin(start, end) && number < nativeMax(start, end);\n}\n\nexport default baseInRange;\n","import baseInRange from './_baseInRange.js';\nimport toFinite from './toFinite.js';\nimport toNumber from './toNumber.js';\n\n/**\n * Checks if `n` is between `start` and up to, but not including, `end`. If\n * `end` is not specified, it's set to `start` with `start` then set to `0`.\n * If `start` is greater than `end` the params are swapped to support\n * negative ranges.\n *\n * @static\n * @memberOf _\n * @since 3.3.0\n * @category Number\n * @param {number} number The number to check.\n * @param {number} [start=0] The start of the range.\n * @param {number} end The end of the range.\n * @returns {boolean} Returns `true` if `number` is in the range, else `false`.\n * @see _.range, _.rangeRight\n * @example\n *\n * _.inRange(3, 2, 4);\n * // => true\n *\n * _.inRange(4, 8);\n * // => true\n *\n * _.inRange(4, 2);\n * // => false\n *\n * _.inRange(2, 2);\n * // => false\n *\n * _.inRange(1.2, 2);\n * // => true\n *\n * _.inRange(5.2, 4);\n * // => false\n *\n * _.inRange(-3, -2, -6);\n * // => true\n */\nfunction inRange(number, start, end) {\n  start = toFinite(start);\n  if (end === undefined) {\n    end = start;\n    start = 0;\n  } else {\n    end = toFinite(end);\n  }\n  number = toNumber(number);\n  return baseInRange(number, start, end);\n}\n\nexport default inRange;\n","import baseGetTag from './_baseGetTag.js';\nimport isArray from './isArray.js';\nimport isObjectLike from './isObjectLike.js';\n\n/** `Object#toString` result references. */\nvar stringTag = '[object String]';\n\n/**\n * Checks if `value` is classified as a `String` primitive or object.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a string, else `false`.\n * @example\n *\n * _.isString('abc');\n * // => true\n *\n * _.isString(1);\n * // => false\n */\nfunction isString(value) {\n  return typeof value == 'string' ||\n    (!isArray(value) && isObjectLike(value) && baseGetTag(value) == stringTag);\n}\n\nexport default isString;\n","import baseGetTag from './_baseGetTag.js';\nimport isObjectLike from './isObjectLike.js';\n\n/** `Object#toString` result references. */\nvar dateTag = '[object Date]';\n\n/**\n * The base implementation of `_.isDate` without Node.js optimizations.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a date object, else `false`.\n */\nfunction baseIsDate(value) {\n  return isObjectLike(value) && baseGetTag(value) == dateTag;\n}\n\nexport default baseIsDate;\n","import baseIsDate from './_baseIsDate.js';\nimport baseUnary from './_baseUnary.js';\nimport nodeUtil from './_nodeUtil.js';\n\n/* Node.js helper references. */\nvar nodeIsDate = nodeUtil && nodeUtil.isDate;\n\n/**\n * Checks if `value` is classified as a `Date` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a date object, else `false`.\n * @example\n *\n * _.isDate(new Date);\n * // => true\n *\n * _.isDate('Mon April 23 2012');\n * // => false\n */\nvar isDate = nodeIsDate ? baseUnary(nodeIsDate) : baseIsDate;\n\nexport default isDate;\n","import baseKeys from './_baseKeys.js';\nimport getTag from './_getTag.js';\nimport isArguments from './isArguments.js';\nimport isArray from './isArray.js';\nimport isArrayLike from './isArrayLike.js';\nimport isBuffer from './isBuffer.js';\nimport isPrototype from './_isPrototype.js';\nimport isTypedArray from './isTypedArray.js';\n\n/** `Object#toString` result references. */\nvar mapTag = '[object Map]',\n    setTag = '[object Set]';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Checks if `value` is an empty object, collection, map, or set.\n *\n * Objects are considered empty if they have no own enumerable string keyed\n * properties.\n *\n * Array-like values such as `arguments` objects, arrays, buffers, strings, or\n * jQuery-like collections are considered empty if they have a `length` of `0`.\n * Similarly, maps and sets are considered empty if they have a `size` of `0`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is empty, else `false`.\n * @example\n *\n * _.isEmpty(null);\n * // => true\n *\n * _.isEmpty(true);\n * // => true\n *\n * _.isEmpty(1);\n * // => true\n *\n * _.isEmpty([1, 2, 3]);\n * // => false\n *\n * _.isEmpty({ 'a': 1 });\n * // => false\n */\nfunction isEmpty(value) {\n  if (value == null) {\n    return true;\n  }\n  if (isArrayLike(value) &&\n      (isArray(value) || typeof value == 'string' || typeof value.splice == 'function' ||\n        isBuffer(value) || isTypedArray(value) || isArguments(value))) {\n    return !value.length;\n  }\n  var tag = getTag(value);\n  if (tag == mapTag || tag == setTag) {\n    return !value.size;\n  }\n  if (isPrototype(value)) {\n    return !baseKeys(value).length;\n  }\n  for (var key in value) {\n    if (hasOwnProperty.call(value, key)) {\n      return false;\n    }\n  }\n  return true;\n}\n\nexport default isEmpty;\n","import toInteger from './toInteger.js';\n\n/**\n * Checks if `value` is an integer.\n *\n * **Note:** This method is based on\n * [`Number.isInteger`](https://mdn.io/Number/isInteger).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an integer, else `false`.\n * @example\n *\n * _.isInteger(3);\n * // => true\n *\n * _.isInteger(Number.MIN_VALUE);\n * // => false\n *\n * _.isInteger(Infinity);\n * // => false\n *\n * _.isInteger('3');\n * // => false\n */\nfunction isInteger(value) {\n  return typeof value == 'number' && value == toInteger(value);\n}\n\nexport default isInteger;\n","import baseGetTag from './_baseGetTag.js';\nimport isObjectLike from './isObjectLike.js';\n\n/** `Object#toString` result references. */\nvar numberTag = '[object Number]';\n\n/**\n * Checks if `value` is classified as a `Number` primitive or object.\n *\n * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are\n * classified as numbers, use the `_.isFinite` method.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a number, else `false`.\n * @example\n *\n * _.isNumber(3);\n * // => true\n *\n * _.isNumber(Number.MIN_VALUE);\n * // => true\n *\n * _.isNumber(Infinity);\n * // => true\n *\n * _.isNumber('3');\n * // => false\n */\nfunction isNumber(value) {\n  return typeof value == 'number' ||\n    (isObjectLike(value) && baseGetTag(value) == numberTag);\n}\n\nexport default isNumber;\n","/**\n * Checks if `value` is `null` or `undefined`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is nullish, else `false`.\n * @example\n *\n * _.isNil(null);\n * // => true\n *\n * _.isNil(void 0);\n * // => true\n *\n * _.isNil(NaN);\n * // => false\n */\nfunction isNil(value) {\n  return value == null;\n}\n\nexport default isNil;\n","/**\n * Checks if `value` is `null`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is `null`, else `false`.\n * @example\n *\n * _.isNull(null);\n * // => true\n *\n * _.isNull(void 0);\n * // => false\n */\nfunction isNull(value) {\n  return value === null;\n}\n\nexport default isNull;\n","/**\n * Checks if `value` is `undefined`.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.\n * @example\n *\n * _.isUndefined(void 0);\n * // => true\n *\n * _.isUndefined(null);\n * // => false\n */\nfunction isUndefined(value) {\n  return value === undefined;\n}\n\nexport default isUndefined;\n","import root from './_root.js';\nimport toString from './toString.js';\n\n/** Used to match leading whitespace. */\nvar reTrimStart = /^\\s+/;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeParseInt = root.parseInt;\n\n/**\n * Converts `string` to an integer of the specified radix. If `radix` is\n * `undefined` or `0`, a `radix` of `10` is used unless `value` is a\n * hexadecimal, in which case a `radix` of `16` is used.\n *\n * **Note:** This method aligns with the\n * [ES5 implementation](https://es5.github.io/#x15.1.2.2) of `parseInt`.\n *\n * @static\n * @memberOf _\n * @since 1.1.0\n * @category String\n * @param {string} string The string to convert.\n * @param {number} [radix=10] The radix to interpret `value` by.\n * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n * @returns {number} Returns the converted integer.\n * @example\n *\n * _.parseInt('08');\n * // => 8\n *\n * _.map(['6', '08', '10'], _.parseInt);\n * // => [6, 8, 10]\n */\nfunction parseInt(string, radix, guard) {\n  if (guard || radix == null) {\n    radix = 0;\n  } else if (radix) {\n    radix = +radix;\n  }\n  return nativeParseInt(toString(string).replace(reTrimStart, ''), radix || 0);\n}\n\nexport default parseInt;\n","//function add {\nfunction add(number1, number2) {\n    var _a;\n    if (number2 === void 0) { number2 = \"0\"; }\n    var neg = 0, ind = -1;\n    //check for negatives\n    if (number1[0] == \"-\") {\n        number1 = number1.substring(1);\n        if (!testZero(number1)) {\n            neg++;\n            ind = 1;\n            number1.length;\n        }\n    }\n    if (number2[0] == \"-\") {\n        number2 = number2.substring(1);\n        if (!testZero(number2)) {\n            neg++;\n            ind = 2;\n            number2.length;\n        }\n    }\n    number1 = trim(number1);\n    number2 = trim(number2);\n    _a = pad(trim(number1), trim(number2)), number1 = _a[0], number2 = _a[1];\n    if (neg == 1) {\n        if (ind === 1)\n            number1 = compliment(number1);\n        else if (ind === 2)\n            number2 = compliment(number2);\n    }\n    var res = addCore(number1, number2);\n    if (!neg)\n        return trim(res);\n    else if (neg == 2)\n        return \"-\" + trim(res);\n    else {\n        if (number1.length < res.length)\n            return trim(res.substring(1));\n        else\n            return \"-\" + trim(compliment(res));\n    }\n}\nfunction compliment(number) {\n    if (testZero(number)) {\n        return number;\n    }\n    var s = \"\", l = number.length, dec = number.split(\".\")[1], ld = dec ? dec.length : 0;\n    for (var i = 0; i < l; i++) {\n        if (number[i] >= \"0\" && number[i] <= \"9\")\n            s += 9 - parseInt(number[i]);\n        else\n            s += number[i];\n    }\n    var one = ld > 0 ? \"0.\" + new Array(ld).join(\"0\") + \"1\" : \"1\";\n    return addCore(s, one);\n}\nfunction trim(number) {\n    var parts = number.split(\".\");\n    if (!parts[0])\n        parts[0] = \"0\";\n    while (parts[0][0] == \"0\" && parts[0].length > 1)\n        parts[0] = parts[0].substring(1);\n    return parts[0] + (parts[1] ? \".\" + parts[1] : \"\");\n}\nfunction pad(number1, number2) {\n    var parts1 = number1.split(\".\"), parts2 = number2.split(\".\");\n    //pad integral part\n    var length1 = parts1[0].length, length2 = parts2[0].length;\n    if (length1 > length2) {\n        parts2[0] =\n            new Array(Math.abs(length1 - length2) + 1).join(\"0\") +\n                (parts2[0] ? parts2[0] : \"\");\n    }\n    else {\n        parts1[0] =\n            new Array(Math.abs(length1 - length2) + 1).join(\"0\") +\n                (parts1[0] ? parts1[0] : \"\");\n    }\n    //pad fractional part\n    (length1 = parts1[1] ? parts1[1].length : 0),\n        (length2 = parts2[1] ? parts2[1].length : 0);\n    if (length1 || length2) {\n        if (length1 > length2) {\n            parts2[1] =\n                (parts2[1] ? parts2[1] : \"\") +\n                    new Array(Math.abs(length1 - length2) + 1).join(\"0\");\n        }\n        else {\n            parts1[1] =\n                (parts1[1] ? parts1[1] : \"\") +\n                    new Array(Math.abs(length1 - length2) + 1).join(\"0\");\n        }\n    }\n    number1 = parts1[0] + (parts1[1] ? \".\" + parts1[1] : \"\");\n    number2 = parts2[0] + (parts2[1] ? \".\" + parts2[1] : \"\");\n    return [number1, number2];\n}\nfunction addCore(number1, number2) {\n    var _a;\n    _a = pad(number1, number2), number1 = _a[0], number2 = _a[1];\n    var sum = \"\", carry = 0;\n    for (var i = number1.length - 1; i >= 0; i--) {\n        if (number1[i] === \".\") {\n            sum = \".\" + sum;\n            continue;\n        }\n        var temp = parseInt(number1[i]) + parseInt(number2[i]) + carry;\n        sum = (temp % 10) + sum;\n        carry = Math.floor(temp / 10);\n    }\n    return carry ? carry.toString() + sum : sum;\n}\nfunction testZero(number) {\n    return /^0[0]*[.]{0,1}[0]*$/.test(number);\n}\n\nfunction abs(n) {\n    if (typeof n == \"number\" || typeof n == \"bigint\")\n        n = n.toString();\n    if (n[0] == \"-\")\n        return n.substring(1);\n    return n;\n}\n\nvar RoundingModes;\n(function (RoundingModes) {\n    /**\n     * Rounding mode to round towards positive infinity.\n     */\n    RoundingModes[RoundingModes[\"CEILING\"] = 0] = \"CEILING\";\n    /**\n     * Rounding mode to round towards zero.\n     */\n    RoundingModes[RoundingModes[\"DOWN\"] = 1] = \"DOWN\";\n    /**\n     * Rounding mode to round towards negative infinity.\n     */\n    RoundingModes[RoundingModes[\"FLOOR\"] = 2] = \"FLOOR\";\n    /**\n     * Rounding mode to round towards \"nearest neighbor\" unless both neighbors are equidistant,\n     * in which case round down.\n     */\n    RoundingModes[RoundingModes[\"HALF_DOWN\"] = 3] = \"HALF_DOWN\";\n    /**\n     * Rounding mode to round towards the \"nearest neighbor\" unless both neighbors are equidistant,\n     * in which case, round towards the even neighbor.\n     */\n    RoundingModes[RoundingModes[\"HALF_EVEN\"] = 4] = \"HALF_EVEN\";\n    /**\n     * Rounding mode to round towards \"nearest neighbor\" unless both neighbors are equidistant,\n     * in which case round up.\n     */\n    RoundingModes[RoundingModes[\"HALF_UP\"] = 5] = \"HALF_UP\";\n    /**\n     * Rounding mode to assert that the requested operation has an exact result, hence no rounding is necessary.\n     * UNIMPLEMENTED\n     */\n    RoundingModes[RoundingModes[\"UNNECESSARY\"] = 6] = \"UNNECESSARY\";\n    /**\n     * Rounding mode to round away from zero.\n     */\n    RoundingModes[RoundingModes[\"UP\"] = 7] = \"UP\";\n})(RoundingModes || (RoundingModes = {}));\n\n/**\n *\n * @param input the number to round\n * @param n precision\n * @param mode Rounding Mode\n */\nfunction roundOff(input, n, mode) {\n    if (n === void 0) { n = 0; }\n    if (mode === void 0) { mode = RoundingModes.HALF_EVEN; }\n    if (mode === RoundingModes.UNNECESSARY) {\n        throw new Error(\"UNNECESSARY Rounding Mode has not yet been implemented\");\n    }\n    if (typeof (input) == 'number' || typeof (input) == 'bigint')\n        input = input.toString();\n    var neg = false;\n    if (input[0] === '-') {\n        neg = true;\n        input = input.substring(1);\n    }\n    var parts = input.split('.'), partInt = parts[0], partDec = parts[1];\n    //handle case of -ve n: roundOff(12564,-2)=12600\n    if (n < 0) {\n        n = -n;\n        if (partInt.length <= n)\n            return '0';\n        else {\n            var prefix = partInt.substr(0, partInt.length - n);\n            input = prefix + '.' + partInt.substr(partInt.length - n) + partDec;\n            prefix = roundOff(input, 0, mode);\n            return (neg ? '-' : '') + prefix + (new Array(n + 1).join('0'));\n        }\n    }\n    // handle case when integer output is desired\n    if (n == 0) {\n        partInt.length;\n        if (greaterThanFive(parts[1], partInt, neg, mode)) {\n            partInt = increment(partInt);\n        }\n        return (neg && parseInt(partInt) ? '-' : '') + partInt;\n    }\n    // handle case when n>0\n    if (!parts[1]) {\n        return (neg ? '-' : '') + partInt + '.' + (new Array(n + 1).join('0'));\n    }\n    else if (parts[1].length < n) {\n        return (neg ? '-' : '') + partInt + '.' + parts[1] + (new Array(n - parts[1].length + 1).join('0'));\n    }\n    partDec = parts[1].substring(0, n);\n    var rem = parts[1].substring(n);\n    if (rem && greaterThanFive(rem, partDec, neg, mode)) {\n        partDec = increment(partDec);\n        if (partDec.length > n) {\n            return (neg ? '-' : '') + increment(partInt, parseInt(partDec[0])) + '.' + partDec.substring(1);\n        }\n    }\n    return (neg && (parseInt(partInt) || parseInt(partDec)) ? '-' : '') + partInt + '.' + partDec;\n}\nfunction greaterThanFive(part, pre, neg, mode) {\n    if (!part || part === new Array(part.length + 1).join('0'))\n        return false;\n    // #region UP, DOWN, CEILING, FLOOR \n    if (mode === RoundingModes.DOWN || (!neg && mode === RoundingModes.FLOOR) ||\n        (neg && mode === RoundingModes.CEILING))\n        return false;\n    if (mode === RoundingModes.UP || (neg && mode === RoundingModes.FLOOR) ||\n        (!neg && mode === RoundingModes.CEILING))\n        return true;\n    // #endregion\n    // case when part !== five\n    var five = '5' + (new Array(part.length).join('0'));\n    if (part > five)\n        return true;\n    else if (part < five)\n        return false;\n    // case when part === five\n    switch (mode) {\n        case RoundingModes.HALF_DOWN: return false;\n        case RoundingModes.HALF_UP: return true;\n        case RoundingModes.HALF_EVEN:\n        default: return (parseInt(pre[pre.length - 1]) % 2 == 1);\n    }\n}\nfunction increment(part, c) {\n    if (c === void 0) { c = 0; }\n    if (!c)\n        c = 1;\n    if (typeof (part) == 'number')\n        part.toString();\n    var l = part.length - 1, s = '';\n    for (var i = l; i >= 0; i--) {\n        var x = parseInt(part[i]) + c;\n        if (x == 10) {\n            c = 1;\n            x = 0;\n        }\n        else {\n            c = 0;\n        }\n        s += x;\n    }\n    if (c)\n        s += c;\n    return s.split('').reverse().join('');\n}\n\n/*\n* Removes zero from front and back*/\nfunction stripTrailingZero(number) {\n    var isNegative = number[0] === '-';\n    if (isNegative) {\n        number = number.substr(1);\n    }\n    while (number[0] == '0') {\n        number = number.substr(1);\n    }\n    if (number.indexOf('.') != -1) {\n        while (number[number.length - 1] == '0') {\n            number = number.substr(0, number.length - 1);\n        }\n    }\n    if (number == \"\" || number == \".\") {\n        number = '0';\n    }\n    else if (number[number.length - 1] == '.') {\n        number = number.substr(0, number.length - 1);\n    }\n    if (number[0] == '.') {\n        number = '0' + number;\n    }\n    if (isNegative && number != '0') {\n        number = '-' + number;\n    }\n    return number;\n}\n\nfunction multiply(number1, number2) {\n    number1 = number1.toString();\n    number2 = number2.toString();\n    /*Filter numbers*/\n    var negative = 0;\n    if (number1[0] == '-') {\n        negative++;\n        number1 = number1.substr(1);\n    }\n    if (number2[0] == '-') {\n        negative++;\n        number2 = number2.substr(1);\n    }\n    number1 = stripTrailingZero(number1);\n    number2 = stripTrailingZero(number2);\n    var decimalLength1 = 0;\n    var decimalLength2 = 0;\n    if (number1.indexOf('.') != -1) {\n        decimalLength1 = number1.length - number1.indexOf('.') - 1;\n    }\n    if (number2.indexOf('.') != -1) {\n        decimalLength2 = number2.length - number2.indexOf('.') - 1;\n    }\n    var decimalLength = decimalLength1 + decimalLength2;\n    number1 = stripTrailingZero(number1.replace('.', ''));\n    number2 = stripTrailingZero(number2.replace('.', ''));\n    if (number1.length < number2.length) {\n        var temp = number1;\n        number1 = number2;\n        number2 = temp;\n    }\n    if (number2 == '0') {\n        return '0';\n    }\n    /*\n    * Core multiplication\n    */\n    var length = number2.length;\n    var carry = 0;\n    var positionVector = [];\n    var currentPosition = length - 1;\n    var result = \"\";\n    for (var i = 0; i < length; i++) {\n        positionVector[i] = number1.length - 1;\n    }\n    for (var i = 0; i < 2 * number1.length; i++) {\n        var sum = 0;\n        for (var j = number2.length - 1; j >= currentPosition && j >= 0; j--) {\n            if (positionVector[j] > -1 && positionVector[j] < number1.length) {\n                sum += parseInt(number1[positionVector[j]--]) * parseInt(number2[j]);\n            }\n        }\n        sum += carry;\n        carry = Math.floor(sum / 10);\n        result = sum % 10 + result;\n        currentPosition--;\n    }\n    /*\n    * Formatting result\n    */\n    result = stripTrailingZero(adjustDecimal(result, decimalLength));\n    if (negative == 1) {\n        result = '-' + result;\n    }\n    return result;\n}\n/*\n* Add decimal point\n*/\nfunction adjustDecimal(number, decimal) {\n    if (decimal == 0)\n        return number;\n    else {\n        number = (decimal >= number.length) ? ((new Array(decimal - number.length + 1)).join('0') + number) : number;\n        return number.substr(0, number.length - decimal) + '.' + number.substr(number.length - decimal, decimal);\n    }\n}\n\nfunction divide(dividend, divisor, precission, mode) {\n    if (precission === void 0) { precission = 8; }\n    if (mode === void 0) { mode = RoundingModes.HALF_EVEN; }\n    if (divisor == 0) {\n        throw new Error('Cannot divide by 0');\n    }\n    dividend = dividend.toString();\n    divisor = divisor.toString();\n    // remove trailing zeros in decimal ISSUE#18\n    dividend = dividend.replace(/(\\.\\d*?[1-9])0+$/g, \"$1\").replace(/\\.0+$/, \"\");\n    divisor = divisor.replace(/(\\.\\d*?[1-9])0+$/g, \"$1\").replace(/\\.0+$/, \"\");\n    if (dividend == 0)\n        return '0';\n    var neg = 0;\n    if (divisor[0] == '-') {\n        divisor = divisor.substring(1);\n        neg++;\n    }\n    if (dividend[0] == '-') {\n        dividend = dividend.substring(1);\n        neg++;\n    }\n    var pt_dvsr = divisor.indexOf('.') > 0 ? divisor.length - divisor.indexOf('.') - 1 : -1;\n    divisor = trim(divisor.replace('.', ''));\n    if (pt_dvsr >= 0) {\n        var pt_dvnd = dividend.indexOf('.') > 0 ? dividend.length - dividend.indexOf('.') - 1 : -1;\n        if (pt_dvnd == -1) {\n            dividend = trim(dividend + (new Array(pt_dvsr + 1)).join('0'));\n        }\n        else {\n            if (pt_dvsr > pt_dvnd) {\n                dividend = dividend.replace('.', '');\n                dividend = trim(dividend + (new Array(pt_dvsr - pt_dvnd + 1)).join('0'));\n            }\n            else if (pt_dvsr < pt_dvnd) {\n                dividend = dividend.replace('.', '');\n                var loc = dividend.length - pt_dvnd + pt_dvsr;\n                dividend = trim(dividend.substring(0, loc) + '.' + dividend.substring(loc));\n            }\n            else if (pt_dvsr == pt_dvnd) {\n                dividend = trim(dividend.replace('.', ''));\n            }\n        }\n    }\n    var prec = 0, dl = divisor.length, quotent = '';\n    var dvnd = (dividend.indexOf('.') > -1 && dividend.indexOf('.') < dl) ? dividend.substring(0, dl + 1) : dividend.substring(0, dl);\n    dividend = (dividend.indexOf('.') > -1 && dividend.indexOf('.') < dl) ? dividend.substring(dl + 1) : dividend.substring(dl);\n    if (dvnd.indexOf('.') > -1) {\n        var shift = dvnd.length - dvnd.indexOf('.') - 1;\n        dvnd = dvnd.replace('.', '');\n        if (dl > dvnd.length) {\n            shift += dl - dvnd.length;\n            dvnd = dvnd + (new Array(dl - dvnd.length + 1)).join('0');\n        }\n        prec = shift;\n        quotent = '0.' + (new Array(shift)).join('0');\n    }\n    precission = precission + 2;\n    while (prec <= precission) {\n        var qt = 0;\n        while (parseInt(dvnd) >= parseInt(divisor)) {\n            dvnd = add(dvnd, '-' + divisor);\n            qt++;\n        }\n        quotent += qt;\n        if (!dividend) {\n            if (!prec)\n                quotent += '.';\n            prec++;\n            dvnd = dvnd + '0';\n        }\n        else {\n            if (dividend[0] == '.') {\n                quotent += '.';\n                prec++;\n                dividend = dividend.substring(1);\n            }\n            dvnd = dvnd + dividend.substring(0, 1);\n            dividend = dividend.substring(1);\n        }\n    }\n    return ((neg == 1) ? '-' : '') + trim(roundOff(quotent, precission - 2, mode));\n}\n\nfunction subtract(number1, number2) {\n    number1 = number1.toString();\n    number2 = number2.toString();\n    number2 = negate(number2);\n    return add(number1, number2);\n}\nfunction negate(number) {\n    if (number[0] == '-') {\n        number = number.substr(1);\n    }\n    else {\n        number = '-' + number;\n    }\n    return number;\n}\n\nfunction modulus(dividend, divisor) {\n    if (divisor == 0) {\n        throw new Error('Cannot divide by 0');\n    }\n    dividend = dividend.toString();\n    divisor = divisor.toString();\n    validate(dividend);\n    validate(divisor);\n    var sign = '';\n    if (dividend[0] == '-') {\n        sign = '-';\n        dividend = dividend.substr(1);\n    }\n    if (divisor[0] == '-') {\n        divisor = divisor.substr(1);\n    }\n    var result = subtract(dividend, multiply(divisor, roundOff(divide(dividend, divisor), 0, RoundingModes.FLOOR)));\n    return sign + result;\n}\nfunction validate(oparand) {\n    if (oparand.indexOf('.') != -1) {\n        throw new Error('Modulus of non-integers not supported');\n    }\n}\n\nfunction compareTo(number1, number2) {\n    var _a, _b;\n    var negative = false;\n    _a = [number1, number2].map(function (n) { return stripTrailingZero(n); }), number1 = _a[0], number2 = _a[1];\n    if (number1[0] == '-' && number2[0] != \"-\") {\n        return -1;\n    }\n    else if (number1[0] != '-' && number2[0] == '-') {\n        return 1;\n    }\n    else if (number1[0] == '-' && number2[0] == '-') {\n        number1 = number1.substr(1);\n        number2 = number2.substr(1);\n        negative = true;\n    }\n    _b = pad(number1, number2), number1 = _b[0], number2 = _b[1];\n    if (number1.localeCompare(number2) == 0) {\n        return 0;\n    }\n    for (var i = 0; i < number1.length; i++) {\n        if (number1[i] == number2[i]) {\n            continue;\n        }\n        else if (number1[i] > number2[i]) {\n            if (negative) {\n                return -1;\n            }\n            else {\n                return 1;\n            }\n        }\n        else {\n            if (negative) {\n                return 1;\n            }\n            else {\n                return -1;\n            }\n        }\n    }\n    return 0;\n}\n\nvar bigDecimal = /** @class */ (function () {\n    function bigDecimal(number) {\n        if (number === void 0) { number = \"0\"; }\n        this.value = bigDecimal.validate(number);\n    }\n    bigDecimal.validate = function (number) {\n        if (number) {\n            number = number.toString();\n            if (isNaN(number))\n                throw Error(\"Parameter is not a number: \" + number);\n            if (number[0] == \"+\")\n                number = number.substring(1);\n        }\n        else\n            number = \"0\";\n        //handle missing leading zero\n        if (number.startsWith(\".\"))\n            number = \"0\" + number;\n        else if (number.startsWith(\"-.\"))\n            number = \"-0\" + number.substr(1);\n        //handle exponentiation\n        if (/e/i.test(number)) {\n            var _a = number.split(/[eE]/), mantisa = _a[0], exponent = _a[1];\n            mantisa = trim(mantisa);\n            var sign = \"\";\n            if (mantisa[0] == \"-\") {\n                sign = \"-\";\n                mantisa = mantisa.substring(1);\n            }\n            if (mantisa.indexOf(\".\") >= 0) {\n                exponent = parseInt(exponent) + mantisa.indexOf(\".\");\n                mantisa = mantisa.replace(\".\", \"\");\n            }\n            else {\n                exponent = parseInt(exponent) + mantisa.length;\n            }\n            if (mantisa.length < exponent) {\n                number =\n                    sign + mantisa + new Array(exponent - mantisa.length + 1).join(\"0\");\n            }\n            else if (mantisa.length >= exponent && exponent > 0) {\n                number =\n                    sign +\n                        trim(mantisa.substring(0, exponent)) +\n                        (mantisa.length > exponent ? \".\" + mantisa.substring(exponent) : \"\");\n            }\n            else {\n                number = sign + \"0.\" + new Array(-exponent + 1).join(\"0\") + mantisa;\n            }\n        }\n        return number;\n    };\n    bigDecimal.prototype.getValue = function () {\n        return this.value;\n    };\n    bigDecimal.prototype.setValue = function (num) {\n        this.value = bigDecimal.validate(num);\n    };\n    bigDecimal.getPrettyValue = function (number, digits, separator) {\n        if (digits === void 0) { digits = 3; }\n        if (separator === void 0) { separator = \",\"; }\n        // if (!(digits || separator)) {\n        //     digits = 3;\n        //     separator = ',';\n        // } else if (!(digits && separator)) {\n        //     throw Error('Illegal Arguments. Should pass both digits and separator or pass none');\n        // }\n        number = bigDecimal.validate(number);\n        var neg = number.charAt(0) == \"-\";\n        if (neg)\n            number = number.substring(1);\n        var len = number.indexOf(\".\");\n        len = len > 0 ? len : number.length;\n        var temp = \"\";\n        for (var i = len; i > 0;) {\n            if (i < digits) {\n                digits = i;\n                i = 0;\n            }\n            else\n                i -= digits;\n            temp =\n                number.substring(i, i + digits) +\n                    (i < len - digits && i >= 0 ? separator : \"\") +\n                    temp;\n        }\n        return (neg ? \"-\" : \"\") + temp + number.substring(len);\n    };\n    bigDecimal.prototype.getPrettyValue = function (digits, separator) {\n        if (digits === void 0) { digits = 3; }\n        if (separator === void 0) { separator = \",\"; }\n        return bigDecimal.getPrettyValue(this.value, digits, separator);\n    };\n    bigDecimal.round = function (number, precision, mode) {\n        if (precision === void 0) { precision = 0; }\n        if (mode === void 0) { mode = RoundingModes.HALF_EVEN; }\n        number = bigDecimal.validate(number);\n        // console.log(number)\n        if (isNaN(precision))\n            throw Error(\"Precision is not a number: \" + precision);\n        return roundOff(number, precision, mode);\n    };\n    bigDecimal.prototype.round = function (precision, mode) {\n        if (precision === void 0) { precision = 0; }\n        if (mode === void 0) { mode = RoundingModes.HALF_EVEN; }\n        if (isNaN(precision))\n            throw Error(\"Precision is not a number: \" + precision);\n        return new bigDecimal(roundOff(this.value, precision, mode));\n    };\n    bigDecimal.abs = function (number) {\n        number = bigDecimal.validate(number);\n        return abs(number);\n    };\n    bigDecimal.prototype.abs = function () {\n        return new bigDecimal(abs(this.value));\n    };\n    bigDecimal.floor = function (number) {\n        number = bigDecimal.validate(number);\n        if (number.indexOf(\".\") === -1)\n            return number;\n        return bigDecimal.round(number, 0, RoundingModes.FLOOR);\n    };\n    bigDecimal.prototype.floor = function () {\n        if (this.value.indexOf(\".\") === -1)\n            return new bigDecimal(this.value);\n        return new bigDecimal(this.value).round(0, RoundingModes.FLOOR);\n    };\n    bigDecimal.ceil = function (number) {\n        number = bigDecimal.validate(number);\n        if (number.indexOf(\".\") === -1)\n            return number;\n        return bigDecimal.round(number, 0, RoundingModes.CEILING);\n    };\n    bigDecimal.prototype.ceil = function () {\n        if (this.value.indexOf(\".\") === -1)\n            return new bigDecimal(this.value);\n        return new bigDecimal(this.value).round(0, RoundingModes.CEILING);\n    };\n    bigDecimal.add = function (number1, number2) {\n        number1 = bigDecimal.validate(number1);\n        number2 = bigDecimal.validate(number2);\n        return add(number1, number2);\n    };\n    bigDecimal.prototype.add = function (number) {\n        return new bigDecimal(add(this.value, number.getValue()));\n    };\n    bigDecimal.subtract = function (number1, number2) {\n        number1 = bigDecimal.validate(number1);\n        number2 = bigDecimal.validate(number2);\n        return subtract(number1, number2);\n    };\n    bigDecimal.prototype.subtract = function (number) {\n        return new bigDecimal(subtract(this.value, number.getValue()));\n    };\n    bigDecimal.multiply = function (number1, number2) {\n        number1 = bigDecimal.validate(number1);\n        number2 = bigDecimal.validate(number2);\n        return multiply(number1, number2);\n    };\n    bigDecimal.prototype.multiply = function (number) {\n        return new bigDecimal(multiply(this.value, number.getValue()));\n    };\n    bigDecimal.divide = function (number1, number2, precision, mode) {\n        number1 = bigDecimal.validate(number1);\n        number2 = bigDecimal.validate(number2);\n        return divide(number1, number2, precision, mode);\n    };\n    bigDecimal.prototype.divide = function (number, precision, mode) {\n        return new bigDecimal(divide(this.value, number.getValue(), precision, mode));\n    };\n    bigDecimal.modulus = function (number1, number2) {\n        number1 = bigDecimal.validate(number1);\n        number2 = bigDecimal.validate(number2);\n        return modulus(number1, number2);\n    };\n    bigDecimal.prototype.modulus = function (number) {\n        return new bigDecimal(modulus(this.value, number.getValue()));\n    };\n    bigDecimal.compareTo = function (number1, number2) {\n        number1 = bigDecimal.validate(number1);\n        number2 = bigDecimal.validate(number2);\n        return compareTo(number1, number2);\n    };\n    bigDecimal.prototype.compareTo = function (number) {\n        return compareTo(this.value, number.getValue());\n    };\n    bigDecimal.negate = function (number) {\n        number = bigDecimal.validate(number);\n        return negate(number);\n    };\n    bigDecimal.prototype.negate = function () {\n        return new bigDecimal(negate(this.value));\n    };\n    bigDecimal.stripTrailingZero = function (number) {\n        number = bigDecimal.validate(number);\n        return stripTrailingZero(number);\n    };\n    bigDecimal.prototype.stripTrailingZero = function () {\n        return new bigDecimal(stripTrailingZero(this.value));\n    };\n    bigDecimal.RoundingModes = RoundingModes;\n    return bigDecimal;\n}());\n\nexport { bigDecimal, bigDecimal as default };\n//# sourceMappingURL=big-decimal.js.map\n","// base-x encoding / decoding\n// Copyright (c) 2018 base-x contributors\n// Copyright (c) 2014-2018 The Bitcoin Core developers (base58.cpp)\n// Distributed under the MIT software license, see the accompanying\n// file LICENSE or http://www.opensource.org/licenses/mit-license.php.\nfunction base (ALPHABET) {\n  if (ALPHABET.length >= 255) { throw new TypeError('Alphabet too long') }\n  const BASE_MAP = new Uint8Array(256)\n  for (let j = 0; j < BASE_MAP.length; j++) {\n    BASE_MAP[j] = 255\n  }\n  for (let i = 0; i < ALPHABET.length; i++) {\n    const x = ALPHABET.charAt(i)\n    const xc = x.charCodeAt(0)\n    if (BASE_MAP[xc] !== 255) { throw new TypeError(x + ' is ambiguous') }\n    BASE_MAP[xc] = i\n  }\n  const BASE = ALPHABET.length\n  const LEADER = ALPHABET.charAt(0)\n  const FACTOR = Math.log(BASE) / Math.log(256) // log(BASE) / log(256), rounded up\n  const iFACTOR = Math.log(256) / Math.log(BASE) // log(256) / log(BASE), rounded up\n  function encode (source) {\n    // eslint-disable-next-line no-empty\n    if (source instanceof Uint8Array) { } else if (ArrayBuffer.isView(source)) {\n      source = new Uint8Array(source.buffer, source.byteOffset, source.byteLength)\n    } else if (Array.isArray(source)) {\n      source = Uint8Array.from(source)\n    }\n    if (!(source instanceof Uint8Array)) { throw new TypeError('Expected Uint8Array') }\n    if (source.length === 0) { return '' }\n    // Skip & count leading zeroes.\n    let zeroes = 0\n    let length = 0\n    let pbegin = 0\n    const pend = source.length\n    while (pbegin !== pend && source[pbegin] === 0) {\n      pbegin++\n      zeroes++\n    }\n    // Allocate enough space in big-endian base58 representation.\n    const size = ((pend - pbegin) * iFACTOR + 1) >>> 0\n    const b58 = new Uint8Array(size)\n    // Process the bytes.\n    while (pbegin !== pend) {\n      let carry = source[pbegin]\n      // Apply \"b58 = b58 * 256 + ch\".\n      let i = 0\n      for (let it1 = size - 1; (carry !== 0 || i < length) && (it1 !== -1); it1--, i++) {\n        carry += (256 * b58[it1]) >>> 0\n        b58[it1] = (carry % BASE) >>> 0\n        carry = (carry / BASE) >>> 0\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i\n      pbegin++\n    }\n    // Skip leading zeroes in base58 result.\n    let it2 = size - length\n    while (it2 !== size && b58[it2] === 0) {\n      it2++\n    }\n    // Translate the result into a string.\n    let str = LEADER.repeat(zeroes)\n    for (; it2 < size; ++it2) { str += ALPHABET.charAt(b58[it2]) }\n    return str\n  }\n  function decodeUnsafe (source) {\n    if (typeof source !== 'string') { throw new TypeError('Expected String') }\n    if (source.length === 0) { return new Uint8Array() }\n    let psz = 0\n    // Skip and count leading '1's.\n    let zeroes = 0\n    let length = 0\n    while (source[psz] === LEADER) {\n      zeroes++\n      psz++\n    }\n    // Allocate enough space in big-endian base256 representation.\n    const size = (((source.length - psz) * FACTOR) + 1) >>> 0 // log(58) / log(256), rounded up.\n    const b256 = new Uint8Array(size)\n    // Process the characters.\n    while (psz < source.length) {\n      // Find code of next character\n      const charCode = source.charCodeAt(psz)\n      // Base map can not be indexed using char code\n      if (charCode > 255) { return }\n      // Decode character\n      let carry = BASE_MAP[charCode]\n      // Invalid character\n      if (carry === 255) { return }\n      let i = 0\n      for (let it3 = size - 1; (carry !== 0 || i < length) && (it3 !== -1); it3--, i++) {\n        carry += (BASE * b256[it3]) >>> 0\n        b256[it3] = (carry % 256) >>> 0\n        carry = (carry / 256) >>> 0\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i\n      psz++\n    }\n    // Skip leading zeroes in b256.\n    let it4 = size - length\n    while (it4 !== size && b256[it4] === 0) {\n      it4++\n    }\n    const vch = new Uint8Array(zeroes + (size - it4))\n    let j = zeroes\n    while (it4 !== size) {\n      vch[j++] = b256[it4++]\n    }\n    return vch\n  }\n  function decode (string) {\n    const buffer = decodeUnsafe(string)\n    if (buffer) { return buffer }\n    throw new Error('Non-base' + BASE + ' character')\n  }\n  return {\n    encode,\n    decodeUnsafe,\n    decode\n  }\n}\nexport default base\n","import basex from 'base-x';\nvar ALPHABET = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz';\nexport default basex(ALPHABET);\n","import $hgUW1$crypto from \"crypto\";\nimport {isString as $hgUW1$isString, isNumber as $hgUW1$isNumber, isUndefined as $hgUW1$isUndefined, isObject as $hgUW1$isObject, isNil as $hgUW1$isNil, isInteger as $hgUW1$isInteger, isArray as $hgUW1$isArray, inRange as $hgUW1$inRange, isNull as $hgUW1$isNull, isEmpty as $hgUW1$isEmpty, isDate as $hgUW1$isDate} from \"lodash-es\";\nimport $hgUW1$bnjs from \"bn.js\";\nimport $hgUW1$jsbigdecimal from \"js-big-decimal\";\nimport $hgUW1$elliptic from \"elliptic\";\nimport $hgUW1$bs58 from \"bs58\";\n\n\n      var $parcel$global = globalThis;\n    var $df64573ef6d51081$exports = {};\n$df64573ef6d51081$exports = JSON.parse(\"{\\\"name\\\":\\\"libnexa-ts\\\",\\\"version\\\":\\\"1.0.6\\\",\\\"description\\\":\\\"A pure and powerful Nexa SDK library.\\\",\\\"type\\\":\\\"module\\\",\\\"source\\\":\\\"src/index.ts\\\",\\\"types\\\":\\\"dist/index.d.ts\\\",\\\"main\\\":\\\"dist/index.cjs\\\",\\\"module\\\":\\\"dist/index.mjs\\\",\\\"browser\\\":\\\"dist/index.web.mjs\\\",\\\"exports\\\":{\\\"types\\\":\\\"./dist/index.d.ts\\\",\\\"node\\\":{\\\"import\\\":\\\"./dist/index.mjs\\\",\\\"require\\\":\\\"./dist/index.cjs\\\"},\\\"browser\\\":\\\"./dist/index.web.mjs\\\",\\\"default\\\":\\\"./dist/index.mjs\\\"},\\\"targets\\\":{\\\"main\\\":{\\\"context\\\":\\\"node\\\",\\\"outputFormat\\\":\\\"commonjs\\\",\\\"distDir\\\":\\\"dist\\\",\\\"isLibrary\\\":true,\\\"includeNodeModules\\\":[\\\"lodash-es\\\"]},\\\"module\\\":{\\\"context\\\":\\\"node\\\",\\\"outputFormat\\\":\\\"esmodule\\\",\\\"distDir\\\":\\\"dist\\\",\\\"isLibrary\\\":true},\\\"browser\\\":{\\\"context\\\":\\\"browser\\\",\\\"outputFormat\\\":\\\"esmodule\\\",\\\"distDir\\\":\\\"dist\\\",\\\"isLibrary\\\":true}},\\\"files\\\":[\\\"dist\\\"],\\\"scripts\\\":{\\\"check\\\":\\\"tsc --noEmit && npm run madge\\\",\\\"build\\\":\\\"del-cli ./dist && parcel build\\\",\\\"lint\\\":\\\"eslint .\\\",\\\"madge\\\":\\\"madge --circular src/index.ts\\\",\\\"test\\\":\\\"vitest run --dir tests\\\",\\\"coverage\\\":\\\"del-cli ./coverage && npm test -- --coverage --reporter=verbose --reporter=junit\\\",\\\"docs\\\":\\\"typedoc\\\"},\\\"keywords\\\":[\\\"nexa\\\",\\\"blockchain\\\"],\\\"repository\\\":{\\\"type\\\":\\\"git\\\",\\\"url\\\":\\\"https://gitlab.com/nexa/libnexa-ts\\\"},\\\"author\\\":\\\"vgrunner\\\",\\\"license\\\":\\\"MIT\\\",\\\"dependencies\\\":{\\\"bn.js\\\":\\\"^5.2.2\\\",\\\"bs58\\\":\\\"^6.0.0\\\",\\\"elliptic\\\":\\\"^6.6.1\\\",\\\"js-big-decimal\\\":\\\"^2.2.0\\\",\\\"lodash-es\\\":\\\"^4.17.21\\\"},\\\"devDependencies\\\":{\\\"@parcel/packager-ts\\\":\\\"^2.15.4\\\",\\\"@parcel/transformer-typescript-types\\\":\\\"^2.15.4\\\",\\\"@types/bn.js\\\":\\\"^5.2.0\\\",\\\"@types/elliptic\\\":\\\"^6.4.18\\\",\\\"@types/lodash-es\\\":\\\"^4.17.12\\\",\\\"@types/node\\\":\\\"^24.0.8\\\",\\\"@vitest/coverage-v8\\\":\\\"^3.2.4\\\",\\\"del-cli\\\":\\\"^6.0.0\\\",\\\"eslint\\\":\\\"^9.30.0\\\",\\\"madge\\\":\\\"^8.0.0\\\",\\\"parcel\\\":\\\"^2.15.4\\\",\\\"typedoc\\\":\\\"^0.28.7\\\",\\\"typedoc-plugin-markdown\\\":\\\"^4.7.0\\\",\\\"typedoc-plugin-rename-defaults\\\":\\\"^0.7.3\\\",\\\"typescript\\\":\\\"^5.8.3\\\",\\\"typescript-eslint\\\":\\\"^8.35.1\\\",\\\"vitest\\\":\\\"^3.0.6\\\"},\\\"@parcel/resolver-default\\\":{\\\"packageExports\\\":true},\\\"madge\\\":{\\\"detectiveOptions\\\":{\\\"ts\\\":{\\\"skipTypeImports\\\":true}}}}\");\n\n\n\n\n\nclass $e44f707fde477092$export$2e2bcd8739ae039 {\n    static validateState(condition, message) {\n        if (!condition) throw new Error(`Invalid State: ${message}`);\n    }\n    static validateArgument(condition, argumentName, message = \"\") {\n        if (!condition) throw new Error(`Invalid Argument: ${argumentName}. ${message}`);\n    }\n    static validateArgumentType(argument, type, argumentName) {\n        argumentName = argumentName || '(unknown name)';\n        if ((0, $hgUW1$isString)(type)) {\n            if (type === 'Buffer') {\n                if (!Buffer.isBuffer(argument)) throw new TypeError(`Invalid Argument for ${argumentName}, expected ${type} but got ${typeof argument}`);\n            } else if (typeof argument !== type) throw new TypeError(`Invalid Argument for ${argumentName}, expected ${type} but got ${typeof argument}`);\n        } else {\n            if (!(argument instanceof type)) throw new TypeError(`Invalid Argument for ${argumentName}, expected ${type} but got ${typeof argument}`);\n        }\n    }\n}\n\n\nclass $9f918c10ad4fef51$export$2e2bcd8739ae039 {\n    /**\n   * Fill a buffer with a value.\n   *\n   * @param buffer\n   * @param value\n   * @return filled buffer\n   * \n   * @deprecated use `buffer.fill(value)`\n   */ static fill(buffer, value) {\n        (0, $e44f707fde477092$export$2e2bcd8739ae039).validateArgumentType(buffer, 'Buffer', 'buffer');\n        (0, $e44f707fde477092$export$2e2bcd8739ae039).validateArgumentType(value, 'number', 'value');\n        return buffer.fill(value);\n    }\n    /**\n   *\n   * @param original buffer\n   * @return Return a copy of a buffer\n   * \n   * @deprecated use `Buffer.from(original) or Buffer.copyBytesFrom(original)`\n   */ static copy(original) {\n        let buffer = Buffer.alloc(original.length);\n        original.copy(buffer);\n        return buffer;\n    }\n    /**\n   * Tests for both node's Buffer and Uint8Array\n   *\n   * @param arg\n   * @return Returns true if the given argument is an instance of a buffer. \n   */ static isBuffer(arg) {\n        return Buffer.isBuffer(arg) || arg instanceof Uint8Array;\n    }\n    /**\n   * Tests for both node's Buffer and Uint8Array\n   *\n   * @param arg\n   * @return Returns true if the given argument is an instance of a hash160 or hash256 buffer. \n   */ static isHashBuffer(arg) {\n        return this.isBuffer(arg) && (arg.length === 20 || arg.length === 32);\n    }\n    /**\n   * Returns a zero-filled byte array\n   *\n   * @param length\n   * \n   * @deprecated use `Buffer.alloc(length)`\n   */ static emptyBuffer(length) {\n        (0, $e44f707fde477092$export$2e2bcd8739ae039).validateArgumentType(length, 'number', 'length');\n        return Buffer.alloc(length);\n    }\n    /**\n   * Reverse a buffer\n   * @param param\n   * @return new reversed buffer\n   */ static reverse(param) {\n        return Buffer.from(param).reverse();\n    }\n    /**\n   * Transforms a buffer into a string with a number in hexa representation\n   *\n   * Shorthand for <tt>buffer.toString('hex')</tt>\n   *\n   * @param buffer\n   * @return string\n   */ static bufferToHex(buffer) {\n        (0, $e44f707fde477092$export$2e2bcd8739ae039).validateArgumentType(buffer, 'Buffer', 'buffer');\n        return buffer.toString('hex');\n    }\n    /**\n   * Transforms a number from 0 to 255 into a Buffer of size 1 with that value\n   *\n   * @param integer\n   * @return Buffer\n   */ static integerAsSingleByteBuffer(integer) {\n        (0, $e44f707fde477092$export$2e2bcd8739ae039).validateArgumentType(integer, 'number', 'integer');\n        return Buffer.from([\n            integer & 0xff\n        ]);\n    }\n    /**\n   * Transforms the first byte of an array into a number ranging from -128 to 127\n   * \n   * @param buffer\n   * @return number\n   */ static integerFromSingleByteBuffer(buffer) {\n        (0, $e44f707fde477092$export$2e2bcd8739ae039).validateArgumentType(buffer, 'Buffer', 'buffer');\n        return buffer[0];\n    }\n    /**\n   * Transform a 4-byte integer into a Buffer of length 4.\n   *\n   * @param integer\n   * @return Buffer\n   */ static integerAsBuffer(integer) {\n        (0, $e44f707fde477092$export$2e2bcd8739ae039).validateArgumentType(integer, 'number', 'integer');\n        let bytes = [];\n        bytes.push(integer >> 24 & 0xff);\n        bytes.push(integer >> 16 & 0xff);\n        bytes.push(integer >> 8 & 0xff);\n        bytes.push(integer & 0xff);\n        return Buffer.from(bytes);\n    }\n    /**\n   * Transform the first 4 values of a Buffer into a number, in little endian encoding\n   *\n   * @param buffer\n   * @return integer\n   */ static integerFromBuffer(buffer) {\n        (0, $e44f707fde477092$export$2e2bcd8739ae039).validateArgumentType(buffer, 'Buffer', 'buffer');\n        return buffer[0] << 24 | buffer[1] << 16 | buffer[2] << 8 | buffer[3];\n    }\n    /* secure random bytes that sometimes throws an error due to lack of entropy */ static getRandomBuffer(size) {\n        return (0, $hgUW1$crypto).randomBytes(size);\n    }\n}\n\n\n\nvar $62ca61b6ba036e1b$var$SHA_BLOCKSIZE = /*#__PURE__*/ function(SHA_BLOCKSIZE) {\n    SHA_BLOCKSIZE[SHA_BLOCKSIZE[\"SHA256\"] = 512] = \"SHA256\";\n    SHA_BLOCKSIZE[SHA_BLOCKSIZE[\"SHA512\"] = 1024] = \"SHA512\";\n    return SHA_BLOCKSIZE;\n}($62ca61b6ba036e1b$var$SHA_BLOCKSIZE || {});\nclass $62ca61b6ba036e1b$export$2e2bcd8739ae039 {\n    static sha1(buf) {\n        (0, $e44f707fde477092$export$2e2bcd8739ae039).validateArgument((0, $9f918c10ad4fef51$export$2e2bcd8739ae039).isBuffer(buf), \"buf\", \"Must be Buffer\");\n        return (0, $hgUW1$crypto).createHash('sha1').update(buf).digest();\n    }\n    static sha256(buf) {\n        (0, $e44f707fde477092$export$2e2bcd8739ae039).validateArgument((0, $9f918c10ad4fef51$export$2e2bcd8739ae039).isBuffer(buf), \"buf\", \"Must be Buffer\");\n        return (0, $hgUW1$crypto).createHash('sha256').update(buf).digest();\n    }\n    static sha512(buf) {\n        (0, $e44f707fde477092$export$2e2bcd8739ae039).validateArgument((0, $9f918c10ad4fef51$export$2e2bcd8739ae039).isBuffer(buf), \"buf\", \"Must be Buffer\");\n        return (0, $hgUW1$crypto).createHash('sha512').update(buf).digest();\n    }\n    static ripemd160(buf) {\n        (0, $e44f707fde477092$export$2e2bcd8739ae039).validateArgument((0, $9f918c10ad4fef51$export$2e2bcd8739ae039).isBuffer(buf), \"buf\", \"Must be Buffer\");\n        return (0, $hgUW1$crypto).createHash('ripemd160').update(buf).digest();\n    }\n    static sha256sha256(buf) {\n        (0, $e44f707fde477092$export$2e2bcd8739ae039).validateArgument((0, $9f918c10ad4fef51$export$2e2bcd8739ae039).isBuffer(buf), \"buf\", \"Must be Buffer\");\n        return this.sha256(this.sha256(buf));\n    }\n    static sha256ripemd160(buf) {\n        (0, $e44f707fde477092$export$2e2bcd8739ae039).validateArgument((0, $9f918c10ad4fef51$export$2e2bcd8739ae039).isBuffer(buf), \"buf\", \"Must be Buffer\");\n        return this.ripemd160(this.sha256(buf));\n    }\n    static sha256hmac(data, key) {\n        return $62ca61b6ba036e1b$export$2e2bcd8739ae039.hmac($62ca61b6ba036e1b$export$2e2bcd8739ae039.sha256, 512, data, key);\n    }\n    static sha512hmac(data, key) {\n        return $62ca61b6ba036e1b$export$2e2bcd8739ae039.hmac($62ca61b6ba036e1b$export$2e2bcd8739ae039.sha512, 1024, data, key);\n    }\n    static hmac(hashf, size, data, key) {\n        //http://en.wikipedia.org/wiki/Hash-based_message_authentication_code\n        //http://tools.ietf.org/html/rfc4868#section-2\n        (0, $e44f707fde477092$export$2e2bcd8739ae039).validateArgument((0, $9f918c10ad4fef51$export$2e2bcd8739ae039).isBuffer(data), \"data\", \"Must be Buffer\");\n        (0, $e44f707fde477092$export$2e2bcd8739ae039).validateArgument((0, $9f918c10ad4fef51$export$2e2bcd8739ae039).isBuffer(key), \"key\", \"Must be Buffer\");\n        let blocksize = size / 8;\n        if (key.length > blocksize) key = hashf(key);\n        else if (key.length < blocksize) {\n            let fill = Buffer.alloc(blocksize);\n            fill.fill(0);\n            key.copy(fill);\n            key = fill;\n        }\n        let o_key = Buffer.alloc(blocksize);\n        o_key.fill(0x5c);\n        let i_key = Buffer.alloc(blocksize);\n        i_key.fill(0x36);\n        let o_key_pad = Buffer.alloc(blocksize);\n        let i_key_pad = Buffer.alloc(blocksize);\n        for(let i = 0; i < blocksize; i++){\n            o_key_pad[i] = o_key[i] ^ key[i];\n            i_key_pad[i] = i_key[i] ^ key[i];\n        }\n        return hashf(Buffer.concat([\n            o_key_pad,\n            hashf(Buffer.concat([\n                i_key_pad,\n                data\n            ]))\n        ]));\n    }\n}\n\n\n\n\nclass $c337f7a9455509cf$export$2e2bcd8739ae039 {\n    /**\n   * Determines whether a string contains only hexadecimal values\n   * \n   * @param value\n   * @returns true if the string is the hexa representation of a number\n   */ static isHexa(value) {\n        return (0, $hgUW1$isString)(value) && value.length % 2 === 0 && /^[0-9a-fA-F]+$/.test(value);\n    }\n    /**\n   * Test if an argument is a valid JSON object. If it is, returns a truthy\n   * value (the json object decoded), so no double JSON.parse call is necessary\n   *\n   * @param arg\n   * @return false if the argument is not a JSON string.\n   */ static isValidJSON(arg) {\n        if (!(0, $hgUW1$isString)(arg)) return false;\n        try {\n            return JSON.parse(arg);\n        } catch  {\n            return false;\n        }\n    }\n    static cloneArray(array) {\n        return [\n            ...array\n        ];\n    }\n    /**\n   * Checks that a value is a natural number.\n   *\n   * @param value\n   * @return true if a positive integer or zero.\n   */ static isNaturalNumber(value) {\n        return typeof value === 'number' && isFinite(value) && Math.floor(value) === value && value >= 0;\n    }\n    /**\n   * Checks that a value is a natural number.\n   *\n   * @param value\n   * @return true if a positive integer or zero.\n   */ static isNaturalBigInt(value) {\n        return typeof value === 'bigint' && value >= 0n;\n    }\n}\n\n\n\n\n\n\nclass $5aa97aebe18a7924$export$2e2bcd8739ae039 extends (0, $hgUW1$bnjs) {\n    static{\n        this.Zero = new $5aa97aebe18a7924$export$2e2bcd8739ae039(0);\n    }\n    static{\n        this.One = new $5aa97aebe18a7924$export$2e2bcd8739ae039(1);\n    }\n    static{\n        this.Minus1 = new $5aa97aebe18a7924$export$2e2bcd8739ae039(-1);\n    }\n    static fromNumber(num) {\n        (0, $e44f707fde477092$export$2e2bcd8739ae039).validateArgument((0, $hgUW1$isNumber)(num), \"num\");\n        return new $5aa97aebe18a7924$export$2e2bcd8739ae039(num);\n    }\n    static fromBigInt(num) {\n        (0, $e44f707fde477092$export$2e2bcd8739ae039).validateArgument(typeof num === 'bigint', \"num\");\n        return new $5aa97aebe18a7924$export$2e2bcd8739ae039(num.toString());\n    }\n    static fromString(str, base) {\n        (0, $e44f707fde477092$export$2e2bcd8739ae039).validateArgument((0, $hgUW1$isString)(str), \"str\");\n        return new $5aa97aebe18a7924$export$2e2bcd8739ae039(str, base);\n    }\n    static fromBuffer(buf, opts) {\n        (0, $e44f707fde477092$export$2e2bcd8739ae039).validateArgument((0, $9f918c10ad4fef51$export$2e2bcd8739ae039).isBuffer(buf), \"buf\");\n        if (opts?.endian === 'little') buf = (0, $9f918c10ad4fef51$export$2e2bcd8739ae039).reverse(buf);\n        return new $5aa97aebe18a7924$export$2e2bcd8739ae039(buf.toString('hex'), 16);\n    }\n    /**\n   * Create a BN from a \"ScriptNum\":\n   * This is analogous to the constructor for CScriptNum in nexad. Many ops in\n   * nexad's script interpreter use CScriptNum, which is not really a proper\n   * bignum. Instead, an error is thrown if trying to input a number bigger than\n   * 4 bytes. We copy that behavior here. A third argument, `size`, is provided to\n   * extend the hard limit of 4 bytes, as some usages require more than 4 bytes.\n   */ static fromScriptNumBuffer(buf, fRequireMinimal, size) {\n        let nMaxNumSize = size || 4;\n        (0, $e44f707fde477092$export$2e2bcd8739ae039).validateArgument(buf.length <= nMaxNumSize, 'script number overflow');\n        if (fRequireMinimal && buf.length > 0) // Check that the number is encoded with the minimum possible\n        // number of bytes.\n        //\n        // If the most-significant-byte - excluding the sign bit - is zero\n        // then we're not minimal. Note how this test also rejects the\n        // negative-zero encoding, 0x80.\n        {\n            if ((buf[buf.length - 1] & 0x7f) === 0) {\n                // One exception: if there's more than one byte and the most\n                // significant bit of the second-most-significant-byte is set\n                // it would conflict with the sign bit. An example of this case\n                // is +-255, which encode to 0xff00 and 0xff80 respectively.\n                // (big-endian).\n                if (buf.length <= 1 || (buf[buf.length - 2] & 0x80) === 0) throw new Error('non-minimally encoded script number');\n            }\n        }\n        return $5aa97aebe18a7924$export$2e2bcd8739ae039.fromSM(buf, {\n            endian: 'little'\n        });\n    }\n    // Override arithmetic methods to ensure they return BNExtended instances\n    add(b) {\n        const result = super.add(b).toString();\n        return new $5aa97aebe18a7924$export$2e2bcd8739ae039(result);\n    }\n    sub(b) {\n        const result = super.sub(b).toString();\n        return new $5aa97aebe18a7924$export$2e2bcd8739ae039(result);\n    }\n    mul(b) {\n        const result = super.mul(b).toString();\n        return new $5aa97aebe18a7924$export$2e2bcd8739ae039(result);\n    }\n    mod(b) {\n        const result = super.mod(b).toString();\n        return new $5aa97aebe18a7924$export$2e2bcd8739ae039(result);\n    }\n    umod(b) {\n        const result = super.umod(b).toString();\n        return new $5aa97aebe18a7924$export$2e2bcd8739ae039(result);\n    }\n    toNumber() {\n        return parseInt(this.toString(10), 10);\n    }\n    toBigInt() {\n        return BigInt(this.toString(10));\n    }\n    toBuffer(opts, length) {\n        if ((0, $hgUW1$isString)(opts)) // compatability with override\n        return super.toBuffer(opts, length);\n        let hex = this.toString(16, 2);\n        let buf = Buffer.from(hex, 'hex');\n        if (opts?.size) {\n            let natlen = hex.length / 2;\n            if (natlen > opts.size) buf = $5aa97aebe18a7924$export$2e2bcd8739ae039.trim(buf, natlen);\n            else if (natlen < opts.size) buf = $5aa97aebe18a7924$export$2e2bcd8739ae039.pad(buf, natlen, opts.size);\n        }\n        if (opts?.endian === 'little') buf = (0, $9f918c10ad4fef51$export$2e2bcd8739ae039).reverse(buf);\n        return buf;\n    }\n    /**\n   * The corollary to the above, with the notable exception that we do not throw\n   * an error if the output is larger than four bytes. (Which can happen if\n   * performing a numerical operation that results in an overflow to more than 4\n   * bytes).\n   */ toScriptNumBuffer() {\n        return this.toSM({\n            endian: 'little'\n        });\n    }\n    toScriptBigNumBuffer() {\n        return this.toSM({\n            endian: 'little',\n            bignum: true\n        });\n    }\n    getSize() {\n        const bin = this.toString(2).replace('-', '');\n        const numBits = bin.length + 1;\n        return numBits / 8;\n    }\n    safeAdd(bigNumToAdd, maxSize) {\n        const sum = this.add(bigNumToAdd);\n        this.checkOperationForOverflow(bigNumToAdd, sum, maxSize);\n        return sum;\n    }\n    safeSub(bigNumToSubtract, maxSize) {\n        const difference = this.sub(bigNumToSubtract);\n        this.checkOperationForOverflow(bigNumToSubtract, difference, maxSize);\n        return difference;\n    }\n    safeMul(bigNumToMultiply, maxSize) {\n        const product = this.mul(bigNumToMultiply);\n        this.checkOperationForOverflow(bigNumToMultiply, product, maxSize);\n        return product;\n    }\n    checkOperationForOverflow(operand, result, maxSize) {\n        if (this.getSize() > maxSize || operand.getSize() > maxSize || result.getSize() > 8) throw new Error('overflow');\n    }\n    toSMBigEndian() {\n        let buf;\n        if (this.cmp($5aa97aebe18a7924$export$2e2bcd8739ae039.Zero) === -1) {\n            buf = this.neg().toBuffer();\n            if (buf[0] & 0x80) buf = Buffer.concat([\n                Buffer.from([\n                    0x80\n                ]),\n                buf\n            ]);\n            else buf[0] = buf[0] | 0x80;\n        } else {\n            buf = this.toBuffer();\n            if (buf[0] & 0x80) buf = Buffer.concat([\n                Buffer.from([\n                    0x00\n                ]),\n                buf\n            ]);\n        }\n        if (buf.length === 1 && buf[0] === 0) buf = Buffer.from([]);\n        return buf;\n    }\n    toBigNumSMBigEndian() {\n        let buf;\n        if (this.cmp($5aa97aebe18a7924$export$2e2bcd8739ae039.Zero) === -1) {\n            buf = this.neg().toBuffer();\n            buf = Buffer.concat([\n                Buffer.from([\n                    0x80\n                ]),\n                buf\n            ]);\n        } else {\n            buf = this.toBuffer();\n            buf = Buffer.concat([\n                Buffer.from([\n                    0x00\n                ]),\n                buf\n            ]);\n        }\n        return buf;\n    }\n    toSM(opts) {\n        let buf = opts?.bignum ? this.toBigNumSMBigEndian() : this.toSMBigEndian();\n        if (opts?.endian === 'little') buf = (0, $9f918c10ad4fef51$export$2e2bcd8739ae039).reverse(buf);\n        return buf;\n    }\n    /**\n * Instantiate a BigNumber from a \"signed magnitude buffer\"\n * (a buffer where the most significant bit represents the sign (0 = positive, -1 = negative))\n */ static fromSM(buf, opts) {\n        if (buf.length === 0) return this.fromBuffer(Buffer.from([\n            0\n        ]));\n        if (opts?.endian === 'little') buf = (0, $9f918c10ad4fef51$export$2e2bcd8739ae039).reverse(buf);\n        let ret;\n        if (buf[0] & 0x80) {\n            buf[0] = buf[0] & 0x7f;\n            ret = this.fromBuffer(buf);\n            ret.neg().copy(ret);\n        } else ret = this.fromBuffer(buf);\n        return ret;\n    }\n    static trim(buf, natlen) {\n        return buf.subarray(natlen - buf.length, natlen);\n    }\n    static pad(buf, natlen, size) {\n        let rbuf = Buffer.alloc(size);\n        for(let i = 0; i < buf.length; i++)rbuf[rbuf.length - 1 - i] = buf[buf.length - 1 - i];\n        for(let i = 0; i < size - natlen; i++)rbuf[i] = 0;\n        return rbuf;\n    }\n}\n\n\n\n\n\n\nclass $12fea2c2eb591556$export$2e2bcd8739ae039 {\n    constructor(buf){\n        this.finished = this.eof;\n        this.buf = Buffer.from([]);\n        this.pos = 0;\n        if ((0, $hgUW1$isUndefined)(buf)) return;\n        if (Buffer.isBuffer(buf)) this.set({\n            buf: buf\n        });\n        else if ((0, $hgUW1$isString)(buf)) {\n            let b = Buffer.from(buf, 'hex');\n            if (b.length * 2 != buf.length) throw new TypeError('Invalid hex string');\n            this.set({\n                buf: b\n            });\n        } else if ((0, $hgUW1$isObject)(buf)) {\n            let obj = buf;\n            this.set(obj);\n        } else throw new TypeError('Unrecognized argument for BufferReader');\n    }\n    set(obj) {\n        this.buf = obj.buf || this.buf;\n        this.pos = obj.pos || this.pos || 0;\n        return this;\n    }\n    eof() {\n        return this.pos >= this.buf.length;\n    }\n    read(len) {\n        (0, $e44f707fde477092$export$2e2bcd8739ae039).validateArgument(!(0, $hgUW1$isUndefined)(len), 'Must specify a length');\n        let buf = this.buf.subarray(this.pos, this.pos + len);\n        this.pos = this.pos + len;\n        return buf;\n    }\n    readAll() {\n        let buf = this.buf.subarray(this.pos, this.buf.length);\n        this.pos = this.buf.length;\n        return buf;\n    }\n    readUInt8() {\n        let val = this.buf.readUInt8(this.pos);\n        this.pos = this.pos + 1;\n        return val;\n    }\n    readUInt16BE() {\n        let val = this.buf.readUInt16BE(this.pos);\n        this.pos = this.pos + 2;\n        return val;\n    }\n    readUInt16LE() {\n        let val = this.buf.readUInt16LE(this.pos);\n        this.pos = this.pos + 2;\n        return val;\n    }\n    readUInt32BE() {\n        let val = this.buf.readUInt32BE(this.pos);\n        this.pos = this.pos + 4;\n        return val;\n    }\n    readUInt32LE() {\n        let val = this.buf.readUInt32LE(this.pos);\n        this.pos = this.pos + 4;\n        return val;\n    }\n    readInt32LE() {\n        let val = this.buf.readInt32LE(this.pos);\n        this.pos = this.pos + 4;\n        return val;\n    }\n    readUInt64BEBN() {\n        let buf = this.buf.subarray(this.pos, this.pos + 8);\n        let bn = (0, $5aa97aebe18a7924$export$2e2bcd8739ae039).fromBuffer(buf);\n        this.pos = this.pos + 8;\n        return bn;\n    }\n    readUInt64LEBN() {\n        let second = this.buf.readUInt32LE(this.pos);\n        let first = this.buf.readUInt32LE(this.pos + 4);\n        let combined = first * 0x100000000 + second;\n        // Instantiating an instance of BN with a number is faster than with an\n        // array or string. However, the maximum safe number for a double precision\n        // floating point is 2 ^ 52 - 1 (0x1fffffffffffff), thus we can safely use\n        // non-floating point numbers less than this amount (52 bits). And in the case\n        // that the number is larger, we can instatiate an instance of BN by passing\n        // an array from the buffer (slower) and specifying the endianness.\n        let bn;\n        if (combined <= 0x1fffffffffffff) bn = new (0, $5aa97aebe18a7924$export$2e2bcd8739ae039)(combined);\n        else {\n            let data = this.buf.subarray(this.pos, this.pos + 8);\n            bn = new (0, $5aa97aebe18a7924$export$2e2bcd8739ae039)(data, 10, 'le');\n        }\n        this.pos = this.pos + 8;\n        return bn;\n    }\n    readVarintNum() {\n        let first = this.readUInt8();\n        switch(first){\n            case 0xFD:\n                return this.readUInt16LE();\n            case 0xFE:\n                return this.readUInt32LE();\n            case 0xFF:\n                let bn = this.readUInt64LEBN();\n                let n = bn.toNumber();\n                if (n <= Math.pow(2, 53)) return n;\n                else throw new Error('number too large to retain precision - use readVarintBN');\n        }\n        return first;\n    }\n    /**\n   * reads a length prepended buffer\n   */ readVarLengthBuffer() {\n        let len = this.readVarintNum();\n        let buf = this.read(len);\n        (0, $e44f707fde477092$export$2e2bcd8739ae039).validateState(buf.length === len, \"Invalid length while reading varlength buffer. Expected to read: \" + len + ' and read ' + buf.length);\n        return buf;\n    }\n    readVarintBuf() {\n        let first = this.buf.readUInt8(this.pos);\n        switch(first){\n            case 0xFD:\n                return this.read(3);\n            case 0xFE:\n                return this.read(5);\n            case 0xFF:\n                return this.read(9);\n            default:\n                return this.read(1);\n        }\n    }\n    readVarintBN() {\n        let first = this.readUInt8();\n        switch(first){\n            case 0xFD:\n                return new (0, $5aa97aebe18a7924$export$2e2bcd8739ae039)(this.readUInt16LE());\n            case 0xFE:\n                return new (0, $5aa97aebe18a7924$export$2e2bcd8739ae039)(this.readUInt32LE());\n            case 0xFF:\n                return this.readUInt64LEBN();\n            default:\n                return new (0, $5aa97aebe18a7924$export$2e2bcd8739ae039)(first);\n        }\n    }\n    reverse() {\n        let buf = (0, $9f918c10ad4fef51$export$2e2bcd8739ae039).reverse(this.buf);\n        this.buf = buf;\n        return this;\n    }\n    readReverse(len) {\n        if ((0, $hgUW1$isUndefined)(len)) len = this.buf.length;\n        let buf = this.buf.subarray(this.pos, this.pos + len);\n        this.pos = this.pos + len;\n        return (0, $9f918c10ad4fef51$export$2e2bcd8739ae039).reverse(buf);\n    }\n    readCoreVarintNum() {\n        let n = 0;\n        while(true){\n            let chData = this.readUInt8();\n            n = n << 7 | chData & 0x7F;\n            if (chData & 0x80) n++;\n            else return n;\n        }\n    }\n}\n\n\n\n\nclass $35852622c8c617e8$export$2e2bcd8739ae039 {\n    constructor(obj){\n        this.bufs = [];\n        this.bufLen = 0;\n        if (obj) this.set(obj);\n    }\n    set(obj) {\n        this.bufs = obj.bufs || this.bufs;\n        this.bufLen = this.bufs.reduce((prev, buf)=>prev + buf.length, 0);\n        return this;\n    }\n    toBuffer() {\n        return this.concat();\n    }\n    concat() {\n        return Buffer.concat(this.bufs, this.bufLen);\n    }\n    write(buf) {\n        (0, $e44f707fde477092$export$2e2bcd8739ae039).validateArgument((0, $9f918c10ad4fef51$export$2e2bcd8739ae039).isBuffer(buf), \"buf\");\n        this.bufs.push(buf);\n        this.bufLen += buf.length;\n        return this;\n    }\n    writeReverse(buf) {\n        (0, $e44f707fde477092$export$2e2bcd8739ae039).validateArgument((0, $9f918c10ad4fef51$export$2e2bcd8739ae039).isBuffer(buf), \"buf\");\n        this.bufs.push((0, $9f918c10ad4fef51$export$2e2bcd8739ae039).reverse(buf));\n        this.bufLen += buf.length;\n        return this;\n    }\n    writeUInt8(n) {\n        let buf = Buffer.alloc(1);\n        buf.writeUInt8(n, 0);\n        this.write(buf);\n        return this;\n    }\n    writeUInt16BE(n) {\n        let buf = Buffer.alloc(2);\n        buf.writeUInt16BE(n, 0);\n        this.write(buf);\n        return this;\n    }\n    writeUInt16LE(n) {\n        let buf = Buffer.alloc(2);\n        buf.writeUInt16LE(n, 0);\n        this.write(buf);\n        return this;\n    }\n    writeUInt32BE(n) {\n        let buf = Buffer.alloc(4);\n        buf.writeUInt32BE(n, 0);\n        this.write(buf);\n        return this;\n    }\n    writeInt32LE(n) {\n        let buf = Buffer.alloc(4);\n        buf.writeInt32LE(n, 0);\n        this.write(buf);\n        return this;\n    }\n    writeUInt32LE(n) {\n        let buf = Buffer.alloc(4);\n        buf.writeUInt32LE(n, 0);\n        this.write(buf);\n        return this;\n    }\n    writeUInt64BEBN(bn) {\n        let buf = bn.toBuffer({\n            size: 8\n        });\n        this.write(buf);\n        return this;\n    }\n    writeUInt64LEBN(bn) {\n        let buf = bn.toBuffer({\n            size: 8\n        });\n        this.writeReverse(buf);\n        return this;\n    }\n    writeVarintNum(n) {\n        let buf = $35852622c8c617e8$export$2e2bcd8739ae039.varintBufNum(n);\n        this.write(buf);\n        return this;\n    }\n    writeVarintBN(bn) {\n        let buf = $35852622c8c617e8$export$2e2bcd8739ae039.varintBufBN(bn);\n        this.write(buf);\n        return this;\n    }\n    writeVarLengthBuf(buf) {\n        (0, $e44f707fde477092$export$2e2bcd8739ae039).validateArgument((0, $9f918c10ad4fef51$export$2e2bcd8739ae039).isBuffer(buf), \"buf\");\n        this.writeVarintNum(buf.length);\n        this.write(buf);\n        return this;\n    }\n    writeCoreVarintNum(n) {\n        let tmp = [];\n        let len = 0;\n        while(true){\n            tmp.push(n & 0x7F | (len ? 0x80 : 0x00));\n            if (n <= 0x7F) break;\n            n = (n >> 7) - 1;\n            len++;\n        }\n        this.write(Buffer.from(tmp).reverse());\n        return this;\n    }\n    static varintBufNum(n) {\n        let buf = undefined;\n        if (n < 253) {\n            buf = Buffer.alloc(1);\n            buf.writeUInt8(n, 0);\n        } else if (n < 0x10000) {\n            buf = Buffer.alloc(3);\n            buf.writeUInt8(253, 0);\n            buf.writeUInt16LE(n, 1);\n        } else if (n < 0x100000000) {\n            buf = Buffer.alloc(5);\n            buf.writeUInt8(254, 0);\n            buf.writeUInt32LE(n, 1);\n        } else {\n            buf = Buffer.alloc(9);\n            buf.writeUInt8(255, 0);\n            buf.writeInt32LE(n & -1, 1);\n            buf.writeUInt32LE(Math.floor(n / 0x100000000), 5);\n        }\n        return buf;\n    }\n    static varintBufBN(bn) {\n        let buf = undefined;\n        let n = bn.toNumber();\n        if (n < 253) {\n            buf = Buffer.alloc(1);\n            buf.writeUInt8(n, 0);\n        } else if (n < 0x10000) {\n            buf = Buffer.alloc(3);\n            buf.writeUInt8(253, 0);\n            buf.writeUInt16LE(n, 1);\n        } else if (n < 0x100000000) {\n            buf = Buffer.alloc(5);\n            buf.writeUInt8(254, 0);\n            buf.writeUInt32LE(n, 1);\n        } else {\n            let bw = new $35852622c8c617e8$export$2e2bcd8739ae039();\n            bw.writeUInt8(255);\n            bw.writeUInt64LEBN(bn);\n            buf = bw.concat();\n        }\n        return buf;\n    }\n}\n\n\n\n\n\nvar $05e660d5daa855e4$export$80d48287646c9e3b = /*#__PURE__*/ function(UnitType) {\n    UnitType[UnitType[\"MEX\"] = 8] = \"MEX\";\n    UnitType[UnitType[\"KEX\"] = 5] = \"KEX\";\n    UnitType[UnitType[\"NEXA\"] = 2] = \"NEXA\";\n    return UnitType;\n}({});\nclass $05e660d5daa855e4$export$2e2bcd8739ae039 {\n    /**\n   *  Converts `value` into a decimal string, assuming `unit` decimal\n   *  places. The `unit` may be the number of decimal places or the enum of\n   *  a unit (e.g. ``UnitType.MEX`` for 8 decimal places).\n   *\n   */ static formatUnits(value, unit) {\n        let decimals = 2;\n        if (!(0, $hgUW1$isNil)(unit)) {\n            (0, $e44f707fde477092$export$2e2bcd8739ae039).validateArgument((0, $hgUW1$isInteger)(unit) && unit >= 0, \"unit\", \"invalid unit\");\n            decimals = unit;\n        }\n        return (0, $hgUW1$jsbigdecimal).divide(value, Math.pow(10, decimals), decimals);\n    }\n    /**\n  *  Converts the decimal string `value` to a BigInt, assuming\n  *  `unit` decimal places. The `unit` may the number of decimal places\n  *  or the name of a unit (e.g. ``UnitType.KEX`` for 5 decimal places).\n  */ static parseUnits(value, unit) {\n        (0, $e44f707fde477092$export$2e2bcd8739ae039).validateArgument((0, $hgUW1$isString)(value), \"value\", \"must be a string\");\n        let decimals = 2;\n        if (!(0, $hgUW1$isNil)(unit)) {\n            (0, $e44f707fde477092$export$2e2bcd8739ae039).validateArgument((0, $hgUW1$isInteger)(unit) && unit >= 0, \"unit\", \"invalid unit\");\n            decimals = unit;\n        }\n        return BigInt((0, $hgUW1$jsbigdecimal).multiply(value, Math.pow(10, decimals)));\n    }\n    /**\n  *  Converts `value` into a decimal string using 2 decimal places.\n  */ static formatNEXA(sats) {\n        return this.formatUnits(sats, 2);\n    }\n    /**\n  *  Converts the decimal string `NEXA` to a BigInt, using 2 decimal places.\n  */ static parseNEXA(nexa) {\n        return this.parseUnits(nexa, 2);\n    }\n}\n\n\n\n\nclass $ddbf68ec49150fba$export$95be4ae94445245a {\n    constructor(params){\n        this.name = params.name;\n        this.alias = params.alias;\n        this.prefix = params.prefix;\n        this.pubkeyhash = params.pubkeyhash;\n        this.privatekey = params.privatekey;\n        this.scripthash = params.scripthash;\n        this.xpubkey = params.xpubkey;\n        this.xprivkey = params.xprivkey;\n        this.networkMagic = (0, $9f918c10ad4fef51$export$2e2bcd8739ae039).integerAsBuffer(params.networkMagic);\n        this.port = params.port;\n        this.dnsSeeds = params.dnsSeeds;\n    }\n    toString() {\n        return this.name;\n    }\n}\nconst $ddbf68ec49150fba$export$673894bea0cfc1c8 = new $ddbf68ec49150fba$export$95be4ae94445245a({\n    name: 'mainnet',\n    alias: 'livenet',\n    prefix: 'nexa',\n    pubkeyhash: 0x19,\n    privatekey: 0x23,\n    scripthash: 0x44,\n    xpubkey: 0x42696720,\n    xprivkey: 0x426c6b73,\n    networkMagic: 0x72271221,\n    port: 7228,\n    dnsSeeds: [\n        'seed.nextchain.cash',\n        'seeder.nexa.org',\n        'nexa-seeder.bitcoinunlimited.info'\n    ]\n});\nconst $ddbf68ec49150fba$export$2cc9cef11fee0dca = new $ddbf68ec49150fba$export$95be4ae94445245a({\n    name: 'testnet',\n    alias: 'testnet',\n    prefix: 'nexatest',\n    pubkeyhash: 0x6f,\n    privatekey: 0xef,\n    scripthash: 0xc4,\n    xpubkey: 0x043587cf,\n    xprivkey: 0x04358394,\n    networkMagic: 0x72271222,\n    port: 7230,\n    dnsSeeds: [\n        'nexa-testnet-seeder.bitcoinunlimited.info',\n        'testnetseeder.nexa.org'\n    ]\n});\n\n\nclass $a89918d61ea4dca0$export$2e2bcd8739ae039 {\n    static{\n        this._instance = new $a89918d61ea4dca0$export$2e2bcd8739ae039();\n    }\n    get mainnet() {\n        return 0, $ddbf68ec49150fba$export$673894bea0cfc1c8;\n    }\n    /** @deprecated use mainnet */ get livenet() {\n        return 0, $ddbf68ec49150fba$export$673894bea0cfc1c8;\n    }\n    get testnet() {\n        return 0, $ddbf68ec49150fba$export$2cc9cef11fee0dca;\n    }\n    get defaultNetwork() {\n        return this._defaultNetwork;\n    }\n    set defaultNetwork(network) {\n        this._defaultNetwork = network;\n    }\n    /**\n   * @returns the singleton instance of NetworkManager\n   */ static getInstance() {\n        return this._instance;\n    }\n    get(arg, key) {\n        if (arg instanceof (0, $ddbf68ec49150fba$export$95be4ae94445245a)) {\n            if (this.networks.includes(arg)) return arg;\n            if (this.networks.map((n)=>n.name).includes(arg.name)) return this.networks.find((n)=>n.name == arg.name);\n        }\n        if (key) return this.networks.find((network)=>{\n            if (key == 'networkMagic') return (0, $9f918c10ad4fef51$export$2e2bcd8739ae039).integerFromBuffer(network[key]) == arg;\n            else return network[key] == arg;\n        });\n        else return this.networks.find((network)=>Object.keys(network).some((prop)=>{\n                let _prop = prop;\n                if (_prop == 'networkMagic') return (0, $9f918c10ad4fef51$export$2e2bcd8739ae039).integerFromBuffer(network[_prop]) == arg;\n                else return network[_prop] == arg;\n            }));\n    }\n    create(network) {\n        return new (0, $ddbf68ec49150fba$export$95be4ae94445245a)(network);\n    }\n    add(network) {\n        if (!(network instanceof (0, $ddbf68ec49150fba$export$95be4ae94445245a))) network = new (0, $ddbf68ec49150fba$export$95be4ae94445245a)(network);\n        this.networks.push(network);\n    }\n    remove(network) {\n        if (typeof network !== 'object') {\n            network = this.get(network);\n            if (!network) return;\n        }\n        for(let i = 0; i < this.networks.length; i++)if (this.networks[i] === network || JSON.stringify(this.networks[i]) == JSON.stringify(network)) this.networks.splice(i, 1);\n    }\n    constructor(){\n        this.networks = [\n            (0, $ddbf68ec49150fba$export$673894bea0cfc1c8),\n            (0, $ddbf68ec49150fba$export$2cc9cef11fee0dca)\n        ];\n        this._defaultNetwork = (0, $ddbf68ec49150fba$export$673894bea0cfc1c8);\n    }\n}\nconst $a89918d61ea4dca0$export$f09b1917886389c3 = $a89918d61ea4dca0$export$2e2bcd8739ae039.getInstance();\n\n\n\n\n\n\n\n\n\n\n\n\n\nclass $369a157b63fbc3fd$export$2e2bcd8739ae039 {\n    constructor(params){\n        this.r = params.r;\n        this.s = params.s;\n        this.i = params.i;\n        this.compressed = params.compressed;\n    }\n    toBuffer(isSchnorr = true) {\n        if (isSchnorr) // Schnorr signatures use a 64 byte r,s format.\n        return Buffer.concat([\n            this.r.toBuffer({\n                size: 32\n            }),\n            this.s.toBuffer({\n                size: 32\n            })\n        ]);\n        let rnbuf = this.r.toBuffer();\n        let snbuf = this.s.toBuffer();\n        let rneg = rnbuf[0] & 0x80 ? true : false;\n        /* c8 ignore next */ let sneg = snbuf[0] & 0x80 ? true : false;\n        let rbuf = rneg ? Buffer.concat([\n            Buffer.from([\n                0x00\n            ]),\n            rnbuf\n        ]) : rnbuf;\n        /* c8 ignore next */ let sbuf = sneg ? Buffer.concat([\n            Buffer.from([\n                0x00\n            ]),\n            snbuf\n        ]) : snbuf;\n        let rlength = rbuf.length;\n        let slength = sbuf.length;\n        let length = 2 + rlength + 2 + slength;\n        let rheader = 0x02;\n        let sheader = 0x02;\n        let header = 0x30;\n        let der = Buffer.concat([\n            Buffer.from([\n                header,\n                length,\n                rheader,\n                rlength\n            ]),\n            rbuf,\n            Buffer.from([\n                sheader,\n                slength\n            ]),\n            sbuf\n        ]);\n        return der;\n    }\n    toTxFormat(sighashBuf) {\n        let sigbuf = this.toBuffer();\n        if ((0, $9f918c10ad4fef51$export$2e2bcd8739ae039).isBuffer(sighashBuf)) return Buffer.concat([\n            sigbuf,\n            sighashBuf\n        ]);\n        return sigbuf;\n    }\n    toString() {\n        return this.toBuffer().toString('hex');\n    }\n    /**\n   * Schnorr signatures are 64 bytes: r [len] 32 || s [len] 32.\n   * \n   * There can be a few more bytes that is the sighashtype. It needs to be trimmed before calling this.\n   */ static fromBuffer(buf, strict) {\n        if (buf.length === 64) {\n            let params = this.parseSchnorrEncodedSig(buf);\n            return new $369a157b63fbc3fd$export$2e2bcd8739ae039(params);\n        }\n        let obj = $369a157b63fbc3fd$export$2e2bcd8739ae039.parseDER(buf, strict);\n        return new $369a157b63fbc3fd$export$2e2bcd8739ae039({\n            r: obj.r,\n            s: obj.s\n        });\n    }\n    /**\n   * The format used in a tx.\n   * schnorr is 64 bytes, the rest are sighashtype bytes\n   * \n   * @param buf \n   */ static fromTxFormat(buf) {\n        let sigbuf = buf.subarray(0, 64);\n        return $369a157b63fbc3fd$export$2e2bcd8739ae039.fromBuffer(sigbuf);\n    }\n    /**\n   * This assumes the str is a raw signature and does not have sighashtype.\n   * Use {@link Signature.fromTxString} when decoding a tx\n   * \n   * @param str the signature hex string\n   * @see fromTxString\n   */ static fromString(str) {\n        let buf = Buffer.from(str, 'hex');\n        return $369a157b63fbc3fd$export$2e2bcd8739ae039.fromBuffer(buf);\n    }\n    /**\n   * This assumes the str might have sighashtype bytes and will trim it if needed.\n   * Use this when decoding a tx signature string\n   * \n   * @param str the tx signature hex string\n   */ static fromTxString(str, encoding = 'hex') {\n        return $369a157b63fbc3fd$export$2e2bcd8739ae039.fromTxFormat(Buffer.from(str, encoding));\n    }\n    static parseSchnorrEncodedSig(buf) {\n        let r = buf.subarray(0, 32);\n        let s = buf.subarray(32, 64);\n        return {\n            r: (0, $5aa97aebe18a7924$export$2e2bcd8739ae039).fromBuffer(r),\n            s: (0, $5aa97aebe18a7924$export$2e2bcd8739ae039).fromBuffer(s)\n        };\n    }\n    /**\n   * For ECDSA. In order to mimic the non-strict DER encoding of OpenSSL, set strict = false.\n   */ static parseDER(buf, strict) {\n        (0, $e44f707fde477092$export$2e2bcd8739ae039).validateArgument((0, $9f918c10ad4fef51$export$2e2bcd8739ae039).isBuffer(buf), 'DER formatted signature should be a buffer');\n        if ((0, $hgUW1$isUndefined)(strict)) strict = true;\n        let header = buf[0];\n        (0, $e44f707fde477092$export$2e2bcd8739ae039).validateArgument(header === 0x30, 'Header byte should be 0x30');\n        let length = buf[1];\n        let buflength = buf.subarray(2).length;\n        (0, $e44f707fde477092$export$2e2bcd8739ae039).validateArgument(!strict || length === buflength, 'Length byte should length of what follows');\n        length = length < buflength ? length : buflength;\n        let rheader = buf[2];\n        (0, $e44f707fde477092$export$2e2bcd8739ae039).validateArgument(rheader === 0x02, 'Integer byte for r should be 0x02');\n        let rlength = buf[3];\n        let rbuf = buf.subarray(4, 4 + rlength);\n        let r = (0, $5aa97aebe18a7924$export$2e2bcd8739ae039).fromBuffer(rbuf);\n        let rneg = buf[4] === 0x00 ? true : false;\n        (0, $e44f707fde477092$export$2e2bcd8739ae039).validateArgument(rlength === rbuf.length, 'Length of r incorrect');\n        let sheader = buf[4 + rlength + 0];\n        (0, $e44f707fde477092$export$2e2bcd8739ae039).validateArgument(sheader === 0x02, 'Integer byte for s should be 0x02');\n        let slength = buf[4 + rlength + 1];\n        let sbuf = buf.subarray(4 + rlength + 2, 4 + rlength + 2 + slength);\n        let s = (0, $5aa97aebe18a7924$export$2e2bcd8739ae039).fromBuffer(sbuf);\n        /* c8 ignore next */ let sneg = buf[4 + rlength + 2 + 2] === 0x00 ? true : false;\n        (0, $e44f707fde477092$export$2e2bcd8739ae039).validateArgument(slength === sbuf.length, 'Length of s incorrect');\n        let sumlength = 4 + rlength + 2 + slength;\n        (0, $e44f707fde477092$export$2e2bcd8739ae039).validateArgument(length === sumlength - 2, 'Length of signature incorrect');\n        let obj = {\n            header: header,\n            length: length,\n            rheader: rheader,\n            rlength: rlength,\n            rneg: rneg,\n            rbuf: rbuf,\n            r: r,\n            sheader: sheader,\n            slength: slength,\n            sneg: sneg,\n            sbuf: sbuf,\n            s: s\n        };\n        return obj;\n    }\n    /**\n   * ECDSA format. used for sign messages\n   */ toCompact(i, compressed) {\n        i = typeof i === 'number' ? i : this.i;\n        compressed = typeof compressed === 'boolean' ? compressed : this.compressed;\n        (0, $e44f707fde477092$export$2e2bcd8739ae039).validateArgument(i === 0 || i === 1 || i === 2 || i === 3, 'i must be equal to 0, 1, 2, or 3');\n        let val = i + 27 + 4;\n        if (compressed === false) val = val - 4;\n        let b1 = Buffer.from([\n            val\n        ]);\n        let b2 = this.r.toBuffer({\n            size: 32\n        });\n        let b3 = this.s.toBuffer({\n            size: 32\n        });\n        return Buffer.concat([\n            b1,\n            b2,\n            b3\n        ]);\n    }\n    static fromCompact(buf) {\n        (0, $e44f707fde477092$export$2e2bcd8739ae039).validateArgument((0, $9f918c10ad4fef51$export$2e2bcd8739ae039).isBuffer(buf), 'Argument is expected to be a Buffer');\n        let compressed = true;\n        let i = buf.subarray(0, 1)[0] - 27 - 4;\n        if (i < 0) {\n            compressed = false;\n            i = i + 4;\n        }\n        let b2 = buf.subarray(1, 33);\n        let b3 = buf.subarray(33, 65);\n        (0, $e44f707fde477092$export$2e2bcd8739ae039).validateArgument(i === 0 || i === 1 || i === 2 || i === 3, 'i must be 0, 1, 2, or 3');\n        (0, $e44f707fde477092$export$2e2bcd8739ae039).validateArgument(b2.length === 32, 'r must be 32 bytes');\n        (0, $e44f707fde477092$export$2e2bcd8739ae039).validateArgument(b3.length === 32, 's must be 32 bytes');\n        return new $369a157b63fbc3fd$export$2e2bcd8739ae039({\n            r: (0, $5aa97aebe18a7924$export$2e2bcd8739ae039).fromBuffer(b2),\n            s: (0, $5aa97aebe18a7924$export$2e2bcd8739ae039).fromBuffer(b3),\n            i: i,\n            compressed: compressed\n        });\n    }\n}\n\n\nclass $2a1cae3adbd93346$export$2e2bcd8739ae039 {\n    constructor(obj){\n        if (obj) this.set(obj);\n    }\n    set(obj) {\n        this.hashbuf = obj.hashbuf || this.hashbuf;\n        this.endian = obj.endian || this.endian;\n        this.privkey = obj.privkey || this.privkey;\n        this.pubkey = obj.pubkey || (this.privkey ? this.privkey.publicKey : this.pubkey);\n        this.sig = obj.sig || this.sig;\n        this.verified = obj.verified || this.verified;\n        return this;\n    }\n    sign() {\n        let hashbuf = this.hashbuf;\n        let privkey = this.privkey;\n        let d = privkey.bn;\n        (0, $e44f707fde477092$export$2e2bcd8739ae039).validateState(!(0, $hgUW1$isNil)(hashbuf) && !(0, $hgUW1$isNil)(privkey) && !(0, $hgUW1$isNil)(d), 'invalid parameters');\n        (0, $e44f707fde477092$export$2e2bcd8739ae039).validateState((0, $9f918c10ad4fef51$export$2e2bcd8739ae039).isBuffer(hashbuf) && hashbuf.length === 32, 'hashbuf must be a 32 byte buffer');\n        let e = (0, $5aa97aebe18a7924$export$2e2bcd8739ae039).fromBuffer(hashbuf, this.endian ? {\n            endian: this.endian\n        } : undefined);\n        let obj = this._findSignature(d, e);\n        obj.compressed = this.pubkey.compressed;\n        this.sig = new (0, $369a157b63fbc3fd$export$2e2bcd8739ae039)(obj);\n        return this;\n    }\n    verify() {\n        this.verified = !this.sigError();\n        return this;\n    }\n    toPublicKey() {\n        return this.privkey.toPublicKey();\n    }\n    privkey2pubkey() {\n        this.pubkey = this.privkey.toPublicKey();\n    }\n}\n\n\n\n\nconst $ba7e1a38972b2d09$var$EC = (0, $hgUW1$elliptic).ec;\nclass $ba7e1a38972b2d09$export$2e2bcd8739ae039 {\n    static{\n        this.ec = new $ba7e1a38972b2d09$var$EC('secp256k1').curve;\n    }\n    static{\n        this._g = new $ba7e1a38972b2d09$export$2e2bcd8739ae039(this.ec.g);\n    }\n    constructor(point, skipValidation = false){\n        this.ecPoint = point;\n        if (!skipValidation) this.validate();\n    }\n    /**\n   * Will return the X coordinate of the Point\n   *\n   * @returns A BN instance of the X coordinate\n   */ getX() {\n        return new (0, $5aa97aebe18a7924$export$2e2bcd8739ae039)(this.ecPoint.getX().toArray());\n    }\n    /**\n   * Will return the Y coordinate of the Point\n   *\n   * @returns A BN instance of the Y coordinate\n   */ getY() {\n        return new (0, $5aa97aebe18a7924$export$2e2bcd8739ae039)(this.ecPoint.getY().toArray());\n    }\n    add(p) {\n        return new $ba7e1a38972b2d09$export$2e2bcd8739ae039(this.ecPoint.add(p.ecPoint), true);\n    }\n    mul(k) {\n        let p = this.ecPoint.mul(k);\n        return new $ba7e1a38972b2d09$export$2e2bcd8739ae039(p, true);\n    }\n    mulAdd(k1, p2, k2) {\n        let p = this.ecPoint.mulAdd(k1, p2.ecPoint, k2); // eslint-disable-line @typescript-eslint/no-explicit-any\n        return new $ba7e1a38972b2d09$export$2e2bcd8739ae039(p, true);\n    }\n    eq(p) {\n        return this.ecPoint.eq(p.ecPoint);\n    }\n    /**\n   * Will determine if the point is valid\n   *\n   * @see {@link https://www.iacr.org/archive/pkc2003/25670211/25670211.pdf}\n   * @throws A validation error if exists\n   * @returns An instance of the same Point\n   */ validate() {\n        if (this.ecPoint.isInfinity()) throw new Error('Point cannot be equal to Infinity');\n        let p2;\n        try {\n            p2 = $ba7e1a38972b2d09$export$2e2bcd8739ae039.ec.pointFromX(this.getX(), this.getY().isOdd());\n        } catch  {\n            throw new Error('Point does not lie on the curve');\n        }\n        if (p2.y.cmp(this.ecPoint.y) !== 0) throw new Error('Invalid y value for curve.');\n        if (!this.ecPoint.mul($ba7e1a38972b2d09$export$2e2bcd8739ae039.getN()).isInfinity()) throw new Error('Point times N must be infinity');\n        return this;\n    }\n    hasSquare() {\n        return !this.ecPoint.isInfinity() && $ba7e1a38972b2d09$export$2e2bcd8739ae039.isSquare(this.getY());\n    }\n    static isSquare(x) {\n        let p = new (0, $5aa97aebe18a7924$export$2e2bcd8739ae039)('FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFC2F', 'hex');\n        let x0 = new (0, $5aa97aebe18a7924$export$2e2bcd8739ae039)(x);\n        let base = x0.toRed((0, $5aa97aebe18a7924$export$2e2bcd8739ae039).red(p));\n        let res = base.redPow(p.sub((0, $5aa97aebe18a7924$export$2e2bcd8739ae039).One).div(new (0, $5aa97aebe18a7924$export$2e2bcd8739ae039)(2))).fromRed();\n        return res.eq(new (0, $5aa97aebe18a7924$export$2e2bcd8739ae039)(1));\n    }\n    /**\n   * Instantiate a valid secp256k1 Point from the X and Y coordinates.\n   *\n   * @param x - The X coordinate\n   * @param y - The Y coordinate\n   * @see {@link https://github.com/indutny/elliptic}\n   * @throws A validation error if exists\n   */ static ecPoint(x, y, isRed) {\n        return new $ba7e1a38972b2d09$export$2e2bcd8739ae039(this.ec.point(x, y, isRed));\n    }\n    /**\n   *\n   * Instantiate a valid secp256k1 Point from only the X coordinate\n   * \n   * @param odd - If the Y coordinate is odd\n   * @param x - The X coordinate\n   * @throws A validation error if exists\n   */ static ecPointFromX(odd, x) {\n        let point;\n        try {\n            point = this.ec.pointFromX(x, odd);\n        } catch  {\n            throw new Error('Invalid X');\n        }\n        return new $ba7e1a38972b2d09$export$2e2bcd8739ae039(point);\n    }\n    /**\n   *\n   * Will return a secp256k1 ECDSA base point.\n   *\n   * @see {@link https://en.bitcoin.it/wiki/Secp256k1}\n   * @returns An instance of the base point.\n   */ static getG() {\n        return this._g;\n    }\n    /**\n   *\n   * Will return the max of range of valid private keys as governed by the secp256k1 ECDSA standard.\n   *\n   * @see {@link https://en.bitcoin.it/wiki/Private_key#Range_of_valid_ECDSA_private_keys}\n   * @returns A BN instance of the number of points on the curve\n   */ static getN() {\n        return new (0, $5aa97aebe18a7924$export$2e2bcd8739ae039)(this.ec.n.toArray());\n    }\n    static pointToCompressed(point) {\n        let xbuf = point.getX().toBuffer({\n            size: 32\n        });\n        let ybuf = point.getY().toBuffer({\n            size: 32\n        });\n        let odd = ybuf[ybuf.length - 1] % 2;\n        let prefix = Buffer.from(odd ? [\n            0x03\n        ] : [\n            0x02\n        ]);\n        return Buffer.concat([\n            prefix,\n            xbuf\n        ]);\n    }\n}\n\n\n\n\n\n\n\n\n\n\n\nclass $246eb589bb078d6d$export$2e2bcd8739ae039 {\n    /**\n   * @param data - The pubkey data\n   */ constructor(data){\n        this.toObject = this.toJSON;\n        this.toDER = this.toBuffer;\n        (0, $e44f707fde477092$export$2e2bcd8739ae039).validateArgument(!(0, $hgUW1$isNil)(data), 'First argument is required, please include public key data.');\n        if (data instanceof $246eb589bb078d6d$export$2e2bcd8739ae039) // Return copy, but as it's an immutable object, return same argument\n        return data;\n        if ($246eb589bb078d6d$export$2e2bcd8739ae039._isPublicKeyData(data)) {\n            data.point.validate();\n            this.point = data.point;\n            this.compressed = (0, $hgUW1$isUndefined)(data.compressed) || data.compressed;\n            this.network = data.network || (0, $a89918d61ea4dca0$export$f09b1917886389c3).defaultNetwork;\n        } else throw new TypeError('First argument is an unrecognized data format.');\n    }\n    /**\n   * @returns A plain object of the PublicKey\n   */ toJSON() {\n        return {\n            x: this.point.getX().toString('hex', 2),\n            y: this.point.getY().toString('hex', 2),\n            compressed: this.compressed,\n            network: this.network.toString()\n        };\n    }\n    /**\n   * Will output the PublicKey to a DER Buffer\n   *\n   * @returns  A DER hex encoded buffer\n   */ toBuffer() {\n        let x = this.point.getX();\n        let y = this.point.getY();\n        let xbuf = x.toBuffer({\n            size: 32\n        });\n        let ybuf = y.toBuffer({\n            size: 32\n        });\n        let prefix;\n        if (!this.compressed) {\n            prefix = Buffer.from([\n                0x04\n            ]);\n            return Buffer.concat([\n                prefix,\n                xbuf,\n                ybuf\n            ]);\n        } else {\n            let odd = ybuf[ybuf.length - 1] % 2;\n            if (odd) prefix = Buffer.from([\n                0x03\n            ]);\n            else prefix = Buffer.from([\n                0x02\n            ]);\n            return Buffer.concat([\n                prefix,\n                xbuf\n            ]);\n        }\n    }\n    /**\n   * Will output the PublicKey to a DER encoded hex string\n   *\n   * @returns A DER hex encoded string\n   */ toString() {\n        return this.toBuffer().toString('hex');\n    }\n    /**\n   * Will return a string formatted for the console\n   *\n   * @returns Public key string inspection\n   */ inspect() {\n        return '<PublicKey: ' + this.toString() + (this.compressed ? '' : ', uncompressed') + '>';\n    }\n    /**\n   * Instantiate a PublicKey from various formats\n   * \n   * @param data The encoded data in various formats\n   * @param compressed If the public key is compressed\n   * @param network The key network\n   * @returns New PublicKey instance\n   */ static from(data, compressed, network) {\n        // detect type of data\n        if (data instanceof $246eb589bb078d6d$export$2e2bcd8739ae039) return data;\n        else if (data instanceof (0, $ba7e1a38972b2d09$export$2e2bcd8739ae039)) return this.fromPoint(data, compressed, network);\n        else if (this._isPublicKeyDto(data)) return this.fromObject(data);\n        else if (this._isPublicKeyData(data)) return new $246eb589bb078d6d$export$2e2bcd8739ae039(data);\n        else if (this._isPrivateKeyData(data)) return this.fromPrivateKey(data);\n        else if ((0, $9f918c10ad4fef51$export$2e2bcd8739ae039).isBuffer(data)) return this.fromBuffer(data, true, network);\n        else if ((0, $c337f7a9455509cf$export$2e2bcd8739ae039).isHexa(data)) return this.fromString(data, \"hex\", network);\n        else throw new TypeError('First argument is an unrecognized data format.');\n    }\n    static{\n        this.fromDER = this.fromBuffer;\n    }\n    static{\n        this.fromObject = this.fromJSON;\n    }\n    /**\n   * Instantiate a PublicKey from a Buffer\n   * \n   * @param buf - A DER hex buffer\n   * @param strict - if set to false, will loosen some conditions\n   * @param network - the network of the key\n   * @returns A new valid instance of PublicKey\n   */ static fromBuffer(buf, strict, network) {\n        (0, $e44f707fde477092$export$2e2bcd8739ae039).validateArgument((0, $9f918c10ad4fef51$export$2e2bcd8739ae039).isBuffer(buf), 'Must be a hex buffer of DER encoded public key');\n        let info = $246eb589bb078d6d$export$2e2bcd8739ae039._transformDER(buf, strict);\n        return new $246eb589bb078d6d$export$2e2bcd8739ae039({\n            point: info.point,\n            compressed: info.compressed,\n            network: network\n        });\n    }\n    /**\n   * Instantiate a PublicKey from a Point\n   *\n   * @param point - A Point instance\n   * @param compressed - whether to store this public key as compressed format\n   * @param network - the network of the key\n   * @returns A new valid instance of PublicKey\n   */ static fromPoint(point, compressed, network) {\n        (0, $e44f707fde477092$export$2e2bcd8739ae039).validateArgument(point instanceof (0, $ba7e1a38972b2d09$export$2e2bcd8739ae039), 'First argument must be an instance of Point.');\n        return new $246eb589bb078d6d$export$2e2bcd8739ae039({\n            point: point,\n            compressed: compressed,\n            network: network\n        });\n    }\n    /**\n   * Instantiate a PublicKey from a DER hex encoded string\n   *\n   * @param str - A DER hex string\n   * @param encoding - The type of string encoding\n   * @param network - the network of the key\n   * @returns A new valid instance of PublicKey\n   */ static fromString(str, encoding, network) {\n        let buf = Buffer.from(str, encoding || 'hex');\n        let info = $246eb589bb078d6d$export$2e2bcd8739ae039._transformDER(buf);\n        return new $246eb589bb078d6d$export$2e2bcd8739ae039({\n            point: info.point,\n            compressed: info.compressed,\n            network: network\n        });\n    }\n    /**\n   * Instantiate a PublicKey from PrivateKey data\n   *\n   * @param data - Object contains data of PrivateKey\n   * @returns A new valid instance of PublicKey\n   */ static fromPrivateKey(data) {\n        (0, $e44f707fde477092$export$2e2bcd8739ae039).validateArgument(this._isPrivateKeyData(data), 'data', 'Must be data of PrivateKey');\n        let point = (0, $ba7e1a38972b2d09$export$2e2bcd8739ae039).getG().mul(data.bn);\n        return new $246eb589bb078d6d$export$2e2bcd8739ae039({\n            point: point,\n            compressed: data.compressed,\n            network: data.network\n        });\n    }\n    static fromJSON(data) {\n        let info = $246eb589bb078d6d$export$2e2bcd8739ae039._transformObject(data);\n        return new $246eb589bb078d6d$export$2e2bcd8739ae039(info);\n    }\n    /**\n   * Check if there would be any errors when initializing a PublicKey\n   *\n   * @param data - The encoded data in various formats\n   * @returns An error if exists\n   */ static getValidationError(data) {\n        try {\n            this.from(data);\n        } catch (e) {\n            return e;\n        }\n        return undefined;\n    }\n    /**\n   * Check if the parameters are valid\n   *\n   * @param data - The encoded data in various formats\n   * @returns true If the public key would be valid\n   */ static isValid(data) {\n        return !$246eb589bb078d6d$export$2e2bcd8739ae039.getValidationError(data);\n    }\n    static _isPublicKeyData(data) {\n        return (0, $hgUW1$isObject)(data) && 'point' in data && data.point instanceof (0, $ba7e1a38972b2d09$export$2e2bcd8739ae039);\n    }\n    static _isPublicKeyDto(data) {\n        return (0, $hgUW1$isObject)(data) && 'x' in data && 'y' in data;\n    }\n    static _isPrivateKeyData(data) {\n        return (0, $hgUW1$isObject)(data) && 'bn' in data && 'network' in data;\n    }\n    /**\n   * Internal function to transform DER into a public key point\n   *\n   * @param buf - An hex encoded buffer\n   * @param strict - if set to false, will loosen some conditions\n   * @returns An object with keys: point and compressed\n   */ static _transformDER(buf, strict) {\n        (0, $e44f707fde477092$export$2e2bcd8739ae039).validateArgument((0, $9f918c10ad4fef51$export$2e2bcd8739ae039).isBuffer(buf), 'Must be a hex buffer of DER encoded public key');\n        strict = (0, $hgUW1$isUndefined)(strict) ? true : strict;\n        if (buf[0] === 0x04 || !strict && (buf[0] === 0x06 || buf[0] === 0x07)) {\n            let xbuf = buf.subarray(1, 33);\n            let ybuf = buf.subarray(33, 65);\n            if (xbuf.length !== 32 || ybuf.length !== 32 || buf.length !== 65) throw new TypeError('Length of x and y must be 32 bytes');\n            let x = new (0, $5aa97aebe18a7924$export$2e2bcd8739ae039)(xbuf);\n            let y = new (0, $5aa97aebe18a7924$export$2e2bcd8739ae039)(ybuf);\n            return {\n                point: (0, $ba7e1a38972b2d09$export$2e2bcd8739ae039).ecPoint(x, y),\n                compressed: false\n            };\n        } else if (buf[0] === 0x03) {\n            let xbuf = buf.subarray(1);\n            let x = new (0, $5aa97aebe18a7924$export$2e2bcd8739ae039)(xbuf);\n            return {\n                point: (0, $ba7e1a38972b2d09$export$2e2bcd8739ae039).ecPointFromX(true, x),\n                compressed: true\n            };\n        } else if (buf[0] === 0x02) {\n            let xbuf = buf.subarray(1);\n            let x = new (0, $5aa97aebe18a7924$export$2e2bcd8739ae039)(xbuf);\n            return {\n                point: (0, $ba7e1a38972b2d09$export$2e2bcd8739ae039).ecPointFromX(false, x),\n                compressed: true\n            };\n        } else throw new TypeError('Invalid DER format public key');\n    }\n    /**\n   * Internal function to transform a JSON into a public key point\n   */ static _transformObject(json) {\n        (0, $e44f707fde477092$export$2e2bcd8739ae039).validateArgument((0, $hgUW1$isString)(json.x), 'x', 'must be a hex string');\n        (0, $e44f707fde477092$export$2e2bcd8739ae039).validateArgument((0, $hgUW1$isString)(json.y), 'y', 'must be a hex string');\n        let x = new (0, $5aa97aebe18a7924$export$2e2bcd8739ae039)(json.x, 'hex');\n        let y = new (0, $5aa97aebe18a7924$export$2e2bcd8739ae039)(json.y, 'hex');\n        let point = (0, $ba7e1a38972b2d09$export$2e2bcd8739ae039).ecPoint(x, y);\n        return {\n            point: point,\n            compressed: json.compressed,\n            network: (0, $a89918d61ea4dca0$export$f09b1917886389c3).get(json.network)\n        };\n    }\n}\n\n\nclass $1ef65db4b26d2b16$export$2e2bcd8739ae039 extends (0, $2a1cae3adbd93346$export$2e2bcd8739ae039) {\n    set(obj) {\n        this.k = obj.k || this.k;\n        return super.set(obj);\n    }\n    sigError() {\n        if (!(0, $9f918c10ad4fef51$export$2e2bcd8739ae039).isBuffer(this.hashbuf) || this.hashbuf.length !== 32) return 'hashbuf must be a 32 byte buffer';\n        let r = this.sig.r;\n        let s = this.sig.s;\n        if (!(r.gt((0, $5aa97aebe18a7924$export$2e2bcd8739ae039).Zero) && r.lt((0, $ba7e1a38972b2d09$export$2e2bcd8739ae039).getN())) || !(s.gt((0, $5aa97aebe18a7924$export$2e2bcd8739ae039).Zero) && s.lt((0, $ba7e1a38972b2d09$export$2e2bcd8739ae039).getN()))) return 'r and s not in range';\n        let e = (0, $5aa97aebe18a7924$export$2e2bcd8739ae039).fromBuffer(this.hashbuf, this.endian ? {\n            endian: this.endian\n        } : undefined);\n        let n = (0, $ba7e1a38972b2d09$export$2e2bcd8739ae039).getN();\n        let sinv = s.invm(n);\n        let u1 = sinv.mul(e).umod(n);\n        let u2 = sinv.mul(r).umod(n);\n        let p = (0, $ba7e1a38972b2d09$export$2e2bcd8739ae039).getG().mulAdd(new (0, $5aa97aebe18a7924$export$2e2bcd8739ae039)(u1), this.pubkey.point, new (0, $5aa97aebe18a7924$export$2e2bcd8739ae039)(u2));\n        /* c8 ignore start */ if (p.ecPoint.isInfinity()) return 'p is infinity';\n        /* c8 ignore stop */ if (p.getX().umod(n).cmp(r) !== 0) return 'Invalid signature';\n        else return false;\n    }\n    _findSignature(d, e) {\n        let N = (0, $ba7e1a38972b2d09$export$2e2bcd8739ae039).getN();\n        let G = (0, $ba7e1a38972b2d09$export$2e2bcd8739ae039).getG();\n        // try different values of k until r, s are valid\n        let badrs = 0;\n        let k, Q, r, s;\n        do {\n            if (!this.k || badrs > 0) this.deterministicK(badrs);\n            badrs++;\n            k = this.k;\n            Q = G.mul(k);\n            r = Q.ecPoint.x.umod(N);\n            s = k.invm(N).mul(e.add(d.mul(r))).umod(N);\n        }while (r.cmp((0, $5aa97aebe18a7924$export$2e2bcd8739ae039).Zero) <= 0 || s.cmp((0, $5aa97aebe18a7924$export$2e2bcd8739ae039).Zero) <= 0);\n        s = $1ef65db4b26d2b16$export$2e2bcd8739ae039.toLowS(new (0, $5aa97aebe18a7924$export$2e2bcd8739ae039)(s));\n        return {\n            s: s,\n            r: new (0, $5aa97aebe18a7924$export$2e2bcd8739ae039)(r)\n        };\n    }\n    static toLowS(s) {\n        //enforce low s\n        //see BIP 62, \"low S values in signatures\"\n        if (s.gt((0, $5aa97aebe18a7924$export$2e2bcd8739ae039).fromBuffer(Buffer.from('7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0', 'hex')))) s = (0, $ba7e1a38972b2d09$export$2e2bcd8739ae039).getN().sub(s);\n        return s;\n    }\n    calcI() {\n        for(let i = 0; i < 4; i++){\n            this.sig.i = i;\n            let Qprime;\n            try {\n                Qprime = this.toPublicKey();\n            /* c8 ignore next 3 */ } catch  {\n                continue;\n            }\n            if (Qprime.point.eq(this.pubkey.point)) {\n                this.sig.compressed = this.pubkey.compressed;\n                return this;\n            }\n        /* c8 ignore next 4 */ }\n        this.sig.i = undefined;\n        throw new Error(`Unable to find valid recovery factor`);\n    }\n    randomK() {\n        let N = (0, $ba7e1a38972b2d09$export$2e2bcd8739ae039).getN();\n        let k;\n        do k = (0, $5aa97aebe18a7924$export$2e2bcd8739ae039).fromBuffer((0, $9f918c10ad4fef51$export$2e2bcd8739ae039).getRandomBuffer(32));\n        while (!(k.lt(N) && k.gt((0, $5aa97aebe18a7924$export$2e2bcd8739ae039).Zero)));\n        this.k = k;\n        return this;\n    }\n    // https://tools.ietf.org/html/rfc6979#section-3.2\n    deterministicK(badrs) {\n        // if r or s were invalid when this function was used in signing,\n        // we do not want to actually compute r, s here for efficiency, so,\n        // we can increment badrs. explained at end of RFC 6979 section 3.2\n        if ((0, $hgUW1$isUndefined)(badrs)) badrs = 0;\n        let v = Buffer.alloc(32);\n        v.fill(0x01);\n        let k = Buffer.alloc(32);\n        k.fill(0x00);\n        let x = this.privkey.bn.toBuffer({\n            size: 32\n        });\n        let hashbuf = this.endian === 'little' ? (0, $9f918c10ad4fef51$export$2e2bcd8739ae039).reverse(this.hashbuf) : this.hashbuf;\n        k = (0, $62ca61b6ba036e1b$export$2e2bcd8739ae039).sha256hmac(Buffer.concat([\n            v,\n            Buffer.from([\n                0x00\n            ]),\n            x,\n            hashbuf\n        ]), k);\n        v = (0, $62ca61b6ba036e1b$export$2e2bcd8739ae039).sha256hmac(v, k);\n        k = (0, $62ca61b6ba036e1b$export$2e2bcd8739ae039).sha256hmac(Buffer.concat([\n            v,\n            Buffer.from([\n                0x01\n            ]),\n            x,\n            hashbuf\n        ]), k);\n        v = (0, $62ca61b6ba036e1b$export$2e2bcd8739ae039).sha256hmac(v, k);\n        v = (0, $62ca61b6ba036e1b$export$2e2bcd8739ae039).sha256hmac(v, k);\n        let T = (0, $5aa97aebe18a7924$export$2e2bcd8739ae039).fromBuffer(v);\n        let N = (0, $ba7e1a38972b2d09$export$2e2bcd8739ae039).getN();\n        // also explained in 3.2, we must ensure T is in the proper range (0, N)\n        for(let i = 0; i < badrs || !(T.lt(N) && T.gt((0, $5aa97aebe18a7924$export$2e2bcd8739ae039).Zero)); i++){\n            k = (0, $62ca61b6ba036e1b$export$2e2bcd8739ae039).sha256hmac(Buffer.concat([\n                v,\n                Buffer.from([\n                    0x00\n                ])\n            ]), k);\n            v = (0, $62ca61b6ba036e1b$export$2e2bcd8739ae039).sha256hmac(v, k);\n            v = (0, $62ca61b6ba036e1b$export$2e2bcd8739ae039).sha256hmac(v, k);\n            T = (0, $5aa97aebe18a7924$export$2e2bcd8739ae039).fromBuffer(v);\n        }\n        this.k = T;\n        return this;\n    }\n    signRandomK() {\n        this.randomK();\n        return this.sign();\n    }\n    toString() {\n        let obj = {};\n        if (this.hashbuf) obj.hashbuf = this.hashbuf.toString('hex');\n        if (this.privkey) obj.privkey = this.privkey.toString();\n        if (this.pubkey) obj.pubkey = this.pubkey.toString();\n        if (this.sig) obj.sig = this.sig.toString();\n        if (this.k) obj.k = this.k.toString();\n        return JSON.stringify(obj);\n    }\n    // Information about public key recovery:\n    // https://bitcointalk.org/index.php?topic=6430.0\n    // http://stackoverflow.com/questions/19665491/how-do-i-get-an-ecdsa-public-key-from-just-a-bitcoin-signature-sec1-4-1-6-k\n    toPublicKey() {\n        let i = this.sig.i;\n        (0, $e44f707fde477092$export$2e2bcd8739ae039).validateArgument(i === 0 || i === 1 || i === 2 || i === 3, 'i must be equal to 0, 1, 2, or 3');\n        let e = (0, $5aa97aebe18a7924$export$2e2bcd8739ae039).fromBuffer(this.hashbuf);\n        let r = this.sig.r;\n        let s = this.sig.s;\n        // A set LSB signifies that the y-coordinate is odd\n        let isYOdd = i & 1;\n        // The more significant bit specifies whether we should use the\n        // first or second candidate key.\n        let isSecondKey = i >> 1;\n        let n = (0, $ba7e1a38972b2d09$export$2e2bcd8739ae039).getN();\n        let G = (0, $ba7e1a38972b2d09$export$2e2bcd8739ae039).getG();\n        // 1.1 Let x = r + jn\n        let x = isSecondKey ? r.add(n) : r;\n        let R = (0, $ba7e1a38972b2d09$export$2e2bcd8739ae039).ecPointFromX(!!isYOdd, x);\n        // 1.4 Check that nR is at infinity\n        let nR = R.mul(n);\n        /* c8 ignore start */ if (!nR.ecPoint.isInfinity()) throw new Error('nR is not a valid curve point');\n        /* c8 ignore stop */ // Compute -e from e\n        let eNeg = e.neg().umod(n);\n        // 1.6.1 Compute Q = r^-1 (sR - eG)\n        // Q = r^-1 (sR + -eG)\n        let rInv = r.invm(n);\n        //let Q = R.multiplyTwo(s, G, eNeg).mul(rInv);\n        let Q = R.mul(s).add(G.mul(new (0, $5aa97aebe18a7924$export$2e2bcd8739ae039)(eNeg))).mul(new (0, $5aa97aebe18a7924$export$2e2bcd8739ae039)(rInv));\n        let pubkey = (0, $246eb589bb078d6d$export$2e2bcd8739ae039).fromPoint(Q, this.sig.compressed);\n        return pubkey;\n    }\n    static fromString(str) {\n        let obj = JSON.parse(str);\n        return new $1ef65db4b26d2b16$export$2e2bcd8739ae039(obj);\n    }\n    static sign(hashbuf, privkey, endian) {\n        return new $1ef65db4b26d2b16$export$2e2bcd8739ae039({\n            hashbuf: hashbuf,\n            endian: endian,\n            privkey: privkey\n        }).sign().sig;\n    }\n    static verify(hashbuf, sig, pubkey, endian) {\n        return new $1ef65db4b26d2b16$export$2e2bcd8739ae039({\n            hashbuf: hashbuf,\n            endian: endian,\n            sig: sig,\n            pubkey: pubkey\n        }).verify().verified;\n    }\n}\n\n\n\n\n\n\n\n\nclass $1739481af0c86d04$export$2e2bcd8739ae039 extends (0, $2a1cae3adbd93346$export$2e2bcd8739ae039) {\n    sigError() {\n        if (!(0, $9f918c10ad4fef51$export$2e2bcd8739ae039).isBuffer(this.hashbuf) || this.hashbuf.length !== 32) return 'hashbuf must be a 32 byte buffer';\n        let sigLength = $1739481af0c86d04$export$2e2bcd8739ae039.getProperSizeBuffer(this.sig.r).length + $1739481af0c86d04$export$2e2bcd8739ae039.getProperSizeBuffer(this.sig.s).length;\n        if (!(sigLength === 64 || sigLength === 65)) return 'signature must be a 64 byte or 65 byte array';\n        let hashbuf = this.endian === 'little' ? (0, $9f918c10ad4fef51$export$2e2bcd8739ae039).reverse(this.hashbuf) : this.hashbuf;\n        let P = this.pubkey.point;\n        let G = (0, $ba7e1a38972b2d09$export$2e2bcd8739ae039).getG();\n        if (P.ecPoint.isInfinity()) return true; /* c8 ignore next */ \n        let r = this.sig.r;\n        let s = this.sig.s;\n        let p = new (0, $5aa97aebe18a7924$export$2e2bcd8739ae039)('FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFC2F', 'hex');\n        let n = (0, $ba7e1a38972b2d09$export$2e2bcd8739ae039).getN();\n        if (r.gte(p) || s.gte(n)) // (\"Failed >= condition\") \n        return true;\n        let Br = $1739481af0c86d04$export$2e2bcd8739ae039.getProperSizeBuffer(this.sig.r);\n        let Bp = (0, $ba7e1a38972b2d09$export$2e2bcd8739ae039).pointToCompressed(P);\n        let hash = (0, $62ca61b6ba036e1b$export$2e2bcd8739ae039).sha256(Buffer.concat([\n            Br,\n            Bp,\n            hashbuf\n        ]));\n        let e = (0, $5aa97aebe18a7924$export$2e2bcd8739ae039).fromBuffer(hash, {\n            endian: 'big'\n        }).umod(n);\n        let sG = G.mul(s);\n        let eP = P.mul(n.sub(e));\n        let R = sG.add(eP);\n        if (R.ecPoint.isInfinity() || !R.hasSquare() || !R.getX().eq(r)) return true;\n        return false;\n    }\n    /**\n   * RFC6979 deterministic nonce generation used from https://reviews.bitcoinabc.org/D2501\n   * \n   * @param privkeybuf \n   * @param msgbuf \n   * @return BN nonce\n   */ nonceFunctionRFC6979(privkeybuf, msgbuf) {\n        let V = Buffer.from(\"0101010101010101010101010101010101010101010101010101010101010101\", \"hex\");\n        let K = Buffer.from(\"0000000000000000000000000000000000000000000000000000000000000000\", \"hex\");\n        let blob = Buffer.concat([\n            privkeybuf,\n            msgbuf,\n            Buffer.from(\"\", \"ascii\"),\n            Buffer.from(\"Schnorr+SHA256  \", \"ascii\")\n        ]);\n        K = (0, $62ca61b6ba036e1b$export$2e2bcd8739ae039).sha256hmac(Buffer.concat([\n            V,\n            Buffer.from('00', 'hex'),\n            blob\n        ]), K);\n        V = (0, $62ca61b6ba036e1b$export$2e2bcd8739ae039).sha256hmac(V, K);\n        K = (0, $62ca61b6ba036e1b$export$2e2bcd8739ae039).sha256hmac(Buffer.concat([\n            V,\n            Buffer.from('01', 'hex'),\n            blob\n        ]), K);\n        V = (0, $62ca61b6ba036e1b$export$2e2bcd8739ae039).sha256hmac(V, K);\n        let k = new (0, $5aa97aebe18a7924$export$2e2bcd8739ae039)(0);\n        let T;\n        while(true){\n            V = (0, $62ca61b6ba036e1b$export$2e2bcd8739ae039).sha256hmac(V, K);\n            T = (0, $5aa97aebe18a7924$export$2e2bcd8739ae039).fromBuffer(V);\n            k = T;\n            (0, $e44f707fde477092$export$2e2bcd8739ae039).validateState(V.length >= 32, \"V length should be >= 32\");\n            if (k.gt(new (0, $5aa97aebe18a7924$export$2e2bcd8739ae039)(0)) && k.lt((0, $ba7e1a38972b2d09$export$2e2bcd8739ae039).getN())) break;\n             /* c8 ignore start */ \n            K = (0, $62ca61b6ba036e1b$export$2e2bcd8739ae039).sha256hmac(Buffer.concat([\n                V,\n                Buffer.from(\"00\", 'hex')\n            ]), K);\n            V = (0, $62ca61b6ba036e1b$export$2e2bcd8739ae039).sha256hmac(V, K);\n        } /* c8 ignore stop */ \n        return k;\n    }\n    /**\n   * @remarks\n   * Important references for schnorr implementation {@link https://spec.nexa.org/forks/2019-05-15-schnorr/}\n   * \n   * @param d the private key\n   * @param e the message to be signed\n   */ _findSignature(d, e) {\n        let n = (0, $ba7e1a38972b2d09$export$2e2bcd8739ae039).getN();\n        let G = (0, $ba7e1a38972b2d09$export$2e2bcd8739ae039).getG();\n        (0, $e44f707fde477092$export$2e2bcd8739ae039).validateState(!d.lte(new (0, $5aa97aebe18a7924$export$2e2bcd8739ae039)(0)), 'privkey out of field of curve');\n        (0, $e44f707fde477092$export$2e2bcd8739ae039).validateState(!d.gte(n), 'privkey out of field of curve');\n        let k = this.nonceFunctionRFC6979(d.toBuffer({\n            size: 32\n        }), e.toBuffer({\n            size: 32\n        }));\n        let P = G.mul(d);\n        let R = G.mul(k);\n        // Find deterministic k\n        if (R.hasSquare()) k;\n        else k = n.sub(k);\n        let r = R.getX();\n        let e0 = (0, $5aa97aebe18a7924$export$2e2bcd8739ae039).fromBuffer((0, $62ca61b6ba036e1b$export$2e2bcd8739ae039).sha256(Buffer.concat([\n            $1739481af0c86d04$export$2e2bcd8739ae039.getProperSizeBuffer(r),\n            (0, $ba7e1a38972b2d09$export$2e2bcd8739ae039).pointToCompressed(P),\n            e.toBuffer({\n                size: 32\n            })\n        ])));\n        let s = e0.mul(d).add(k).mod(n);\n        return {\n            r: r,\n            s: s\n        };\n    }\n    /**\n   * Function written to ensure s or r parts of signature is at least 32 bytes, when converting \n   * from a BN to type Buffer.\n   * The BN type naturally cuts off leading zeros, e.g.\n   * <BN: 4f92d8094f710bc11b93935ac157730dda26c5c2a856650dbd8ebcd730d2d4> 31 bytes\n   * Buffer <00 4f 92 d8 09 4f 71 0b c1 1b 93 93 5a c1 57 73 0d da 26 c5 c2 a8 56 65 0d bd 8e bc d7 30 d2 d4> 32 bytes\n   * Both types are equal, however Schnorr signatures must be a minimum of 64 bytes.\n   * In a previous implementation of this schnorr module, was resulting in 63 byte signatures. \n   * (Although it would have been verified, it's proper to ensure the min requirement)\n   * \n   * @param buf the r or s signature part\n   */ static getProperSizeBuffer(buf) {\n        if (buf.toBuffer().length < 32) return buf.toBuffer({\n            size: 32\n        });\n        return buf.toBuffer();\n    }\n    static sign(hashbuf, privkey, endian) {\n        return new $1739481af0c86d04$export$2e2bcd8739ae039({\n            hashbuf: hashbuf,\n            endian: endian,\n            privkey: privkey\n        }).sign().sig;\n    }\n    static verify(hashbuf, sig, pubkey, endian) {\n        return new $1739481af0c86d04$export$2e2bcd8739ae039({\n            hashbuf: hashbuf,\n            endian: endian,\n            sig: sig,\n            pubkey: pubkey\n        }).verify().verified;\n    }\n}\n\n\n\n\n\n\n\n\n\n\nclass $5d1fb851ba849ee0$export$2e2bcd8739ae039 {\n    static{\n        this.ALPHABET = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'.split('');\n    }\n    constructor(obj){\n        if (Buffer.isBuffer(obj)) {\n            let buf = obj;\n            this.fromBuffer(buf);\n        } else if (typeof obj === 'string') {\n            let str = obj;\n            this.fromString(str);\n        } else if (obj) this.set(obj);\n    }\n    toBuffer() {\n        return this.buf;\n    }\n    toString() {\n        return this.buf ? $5d1fb851ba849ee0$export$2e2bcd8739ae039.encode(this.buf) : \"\";\n    }\n    fromBuffer(buf) {\n        this.buf = buf;\n        return this;\n    }\n    fromString(str) {\n        let buf = $5d1fb851ba849ee0$export$2e2bcd8739ae039.decode(str);\n        this.buf = buf;\n        return this;\n    }\n    set(obj) {\n        this.buf = obj.buf || this.buf || undefined;\n        return this;\n    }\n    static encode(buf) {\n        if (!Buffer.isBuffer(buf)) throw new Error('Input should be a buffer');\n        return (0, $hgUW1$bs58).encode(buf);\n    }\n    static decode(str) {\n        if (typeof str !== 'string') throw new Error('Input should be a string');\n        return Buffer.from((0, $hgUW1$bs58).decode(str));\n    }\n    static validCharacters(chars) {\n        if (Buffer.isBuffer(chars)) chars = chars.toString();\n        return chars.split(\"\").every((char)=>$5d1fb851ba849ee0$export$2e2bcd8739ae039.ALPHABET.includes(char));\n    }\n}\n\n\n\nclass $7daa49d6586b1e1a$export$2e2bcd8739ae039 {\n    constructor(obj){\n        if (Buffer.isBuffer(obj)) {\n            let buf = obj;\n            this.fromBuffer(buf);\n        } else if (typeof obj === 'string') {\n            let str = obj;\n            this.fromString(str);\n        } else if (obj) this.set(obj);\n    }\n    static validChecksum(data, checksum) {\n        if ((0, $hgUW1$isString)(data)) data = Buffer.from((0, $5d1fb851ba849ee0$export$2e2bcd8739ae039).decode(data));\n        if ((0, $hgUW1$isString)(checksum)) checksum = Buffer.from((0, $5d1fb851ba849ee0$export$2e2bcd8739ae039).decode(checksum));\n        if (!checksum) {\n            checksum = data.subarray(-4);\n            data = data.subarray(0, -4);\n        }\n        return $7daa49d6586b1e1a$export$2e2bcd8739ae039.checksum(data).toString('hex') === checksum.toString('hex');\n    }\n    static decode(s) {\n        if (typeof s !== 'string') throw new Error('Input must be a string');\n        let buf = Buffer.from((0, $5d1fb851ba849ee0$export$2e2bcd8739ae039).decode(s));\n        if (buf.length < 4) throw new Error(\"Input string too short\");\n        let data = buf.subarray(0, -4);\n        let csum = buf.subarray(-4);\n        let hash = (0, $62ca61b6ba036e1b$export$2e2bcd8739ae039).sha256sha256(data);\n        let hash4 = hash.subarray(0, 4);\n        if (csum.toString('hex') !== hash4.toString('hex')) throw new Error(\"Checksum mismatch\");\n        return data;\n    }\n    static checksum(buffer) {\n        return (0, $62ca61b6ba036e1b$export$2e2bcd8739ae039).sha256sha256(buffer).subarray(0, 4);\n    }\n    static encode(buf) {\n        if (!Buffer.isBuffer(buf)) throw new Error('Input must be a buffer');\n        let checkedBuf = Buffer.alloc(buf.length + 4);\n        let hash = $7daa49d6586b1e1a$export$2e2bcd8739ae039.checksum(buf);\n        buf.copy(checkedBuf);\n        hash.copy(checkedBuf, buf.length);\n        return (0, $5d1fb851ba849ee0$export$2e2bcd8739ae039).encode(checkedBuf);\n    }\n    toBuffer() {\n        return this.buf;\n    }\n    toString() {\n        return this.buf ? $7daa49d6586b1e1a$export$2e2bcd8739ae039.encode(this.buf) : \"\";\n    }\n    fromBuffer(buf) {\n        this.buf = buf;\n        return this;\n    }\n    fromString(str) {\n        let buf = $7daa49d6586b1e1a$export$2e2bcd8739ae039.decode(str);\n        this.buf = buf;\n        return this;\n    }\n    set(obj) {\n        this.buf = obj.buf || this.buf || undefined;\n        return this;\n    }\n}\n\n\n\n\n\n\n\n\nclass $9a13d4ba0015a72e$export$2e2bcd8739ae039 {\n    static{\n        /***\n   * Charset containing the 32 symbols used in the base32 encoding.\n   */ this.CHARSET = 'qpzry9x8gf2tvdw0s3jn54khce6mua7l';\n    }\n    static{\n        /***\n   * Inverted index mapping each symbol into its index within the charset.\n   */ this.CHARSET_INVERSE_INDEX = {\n            'q': 0,\n            'p': 1,\n            'z': 2,\n            'r': 3,\n            'y': 4,\n            '9': 5,\n            'x': 6,\n            '8': 7,\n            'g': 8,\n            'f': 9,\n            '2': 10,\n            't': 11,\n            'v': 12,\n            'd': 13,\n            'w': 14,\n            '0': 15,\n            's': 16,\n            '3': 17,\n            'j': 18,\n            'n': 19,\n            '5': 20,\n            '4': 21,\n            'k': 22,\n            'h': 23,\n            'c': 24,\n            'e': 25,\n            '6': 26,\n            'm': 27,\n            'u': 28,\n            'a': 29,\n            '7': 30,\n            'l': 31\n        };\n    }\n    /***\n   * Encodes the given array of 5-bit integers as a base32-encoded string.\n   *\n   * @param data Array of integers between 0 and 31 inclusive.\n   */ static encode(data) {\n        (0, $e44f707fde477092$export$2e2bcd8739ae039).validateArgument(data instanceof Array, 'Must be Array');\n        let base32 = '';\n        data.forEach((value)=>{\n            (0, $e44f707fde477092$export$2e2bcd8739ae039).validateArgument(0 <= value && value < 32, 'value ' + value);\n            base32 += this.CHARSET[value];\n        });\n        return base32;\n    }\n    /***\n   * Decodes the given base32-encoded string into an array of 5-bit integers.\n   *\n   * @param base32 \n   */ static decode(base32) {\n        (0, $e44f707fde477092$export$2e2bcd8739ae039).validateArgument(typeof base32 === 'string', 'Must be base32-encoded string');\n        let data = [];\n        for (let value of base32){\n            (0, $e44f707fde477092$export$2e2bcd8739ae039).validateArgument(value in this.CHARSET_INVERSE_INDEX, 'value ' + value);\n            data.push(this.CHARSET_INVERSE_INDEX[value]);\n        }\n        return data;\n    }\n}\n\n\n\n\nvar $c889a5b1bdeeb100$export$189c6ba3eaa96ac2 = /*#__PURE__*/ function(AddressType) {\n    AddressType[\"PayToPublicKeyHash\"] = \"P2PKH\";\n    AddressType[\"PayToScriptTemplate\"] = \"P2ST\";\n    AddressType[\"GroupIdAddress\"] = \"GROUP\";\n    return AddressType;\n}({});\nclass $c889a5b1bdeeb100$export$2e2bcd8739ae039 {\n    static{\n        this.VALID_PREFIXES = [\n            'nexa',\n            'nexatest'\n        ];\n    }\n    /** @see encodeAddress */ static encode(prefix, type, data) {\n        return this.encodeAddress({\n            prefix: prefix,\n            type: type,\n            data: data\n        });\n    }\n    /**\n   * Encodes a hash from a given type into a Nexa address with the given prefix.\n   *\n   * @param address Object contains Network prefix (E.g.: 'nexa'), Type of address to generate and data to encode.\n   */ static encodeAddress(address) {\n        (0, $e44f707fde477092$export$2e2bcd8739ae039).validateArgument(typeof address.prefix === 'string' && this.isValidPrefix(address.prefix), 'Invalid prefix: ' + address.prefix + '.');\n        (0, $e44f707fde477092$export$2e2bcd8739ae039).validateArgument(typeof address.type === 'string', 'Invalid type: ' + address.type + '.');\n        (0, $e44f707fde477092$export$2e2bcd8739ae039).validateArgument((0, $9f918c10ad4fef51$export$2e2bcd8739ae039).isBuffer(address.data), 'Invalid data: ' + address.data + '.');\n        let eight0 = [\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0\n        ];\n        let prefixData = this.prefixToArray(address.prefix).concat([\n            0\n        ]);\n        let versionByte = this.getTypeBits(address.type);\n        let payloadData = this.convertBits(Buffer.concat([\n            Buffer.from([\n                versionByte\n            ]),\n            address.data\n        ]), 8, 5);\n        let checksumData = prefixData.concat(payloadData).concat(eight0);\n        let payload = payloadData.concat(this.checksumToArray(this.polymod(checksumData)));\n        return address.prefix + ':' + (0, $9a13d4ba0015a72e$export$2e2bcd8739ae039).encode(payload);\n    }\n    /**\n   * Decodes the given address into its constituting prefix, type and data. See {@link encodeAddress}.\n   *\n   * @param {string} address Address to decode. E.g.: 'nexa:qpm2qsznhks23z7629mms6s4cwef74vcwvgpsey0xy'.\n   */ static decode(address) {\n        (0, $e44f707fde477092$export$2e2bcd8739ae039).validateArgument(typeof address === 'string' && this.hasSingleCase(address), 'Invalid address: ' + address + '.');\n        let pieces = address.toLowerCase().split(':');\n        (0, $e44f707fde477092$export$2e2bcd8739ae039).validateState(pieces.length === 2, 'Missing prefix: ' + address + '.');\n        let prefix = pieces[0];\n        let payload = (0, $9a13d4ba0015a72e$export$2e2bcd8739ae039).decode(pieces[1]);\n        (0, $e44f707fde477092$export$2e2bcd8739ae039).validateState(this.validChecksum(prefix, payload), 'Invalid checksum: ' + address + '.');\n        let convertedBits = this.convertBits(payload.slice(0, -8), 5, 8, true);\n        let versionByte = convertedBits.shift();\n        let hash = convertedBits;\n        // no length limits in nexa: validate(getHashSize(versionByte) === hash.length * 8, 'Invalid hash size: ' + address + '.');\n        let type = this.getType(versionByte);\n        return {\n            prefix: prefix,\n            type: type,\n            data: Buffer.from(hash)\n        };\n    }\n    /**\n   * Checks whether a string is a valid prefix; ie., it has a single letter case\n   * and is one of the above.\n   * \n   * @param prefix\n   */ static isValidPrefix(prefix) {\n        return this.hasSingleCase(prefix) && this.VALID_PREFIXES.includes(prefix.toLowerCase());\n    }\n    /**\n   * Derives an array from the given prefix to be used in the computation\n   * of the address' checksum.\n   *\n   * @param prefix Network prefix. E.g.: 'nexa'.\n   */ static prefixToArray(prefix) {\n        let result = [];\n        for(let i = 0; i < prefix.length; ++i)result.push(prefix.charCodeAt(i) & 31);\n        return result;\n    }\n    /**\n   * Returns an array representation of the given checksum to be encoded\n   * within the address' payload.\n   *\n   * @param checksum Computed checksum.\n   */ static checksumToArray(checksum) {\n        let result = [];\n        for(let i = 0; i < 8; ++i){\n            result.push(checksum & 31);\n            checksum /= 32;\n        }\n        return result.reverse();\n    }\n    /**\n   * Returns the bit representation of the given type within the version byte.\n   *\n   * @param type Address type. Either 'P2PKH' or 'P2SH'.\n   */ static getTypeBits(type) {\n        switch(type){\n            case \"P2PKH\":\n                return 0;\n            case \"P2ST\":\n                return 152;\n            case \"GROUP\":\n                return 88;\n            default:\n                throw new TypeError('Invalid type: ' + type + '.');\n        }\n    }\n    /**\n   * Retrieves the address type from its bit representation within the\n   * version byte.\n   *\n   * @param versionByte\n   */ static getType(versionByte) {\n        switch(versionByte & 248){\n            case 0:\n                return \"P2PKH\";\n            case 152:\n                return \"P2ST\";\n            case 88:\n                return \"GROUP\";\n            default:\n                throw new Error('Invalid address type in version byte: ' + versionByte + '.');\n        }\n    }\n    /**\n   * Returns true if, and only if, the given string contains either uppercase\n   * or lowercase letters, but not both.\n   *\n   * @param string Input string.\n   */ static hasSingleCase(string) {\n        return string === string.toLowerCase() || string === string.toUpperCase();\n    }\n    /**\n  * Verify that the payload has not been corrupted by checking that the\n  * checksum is valid.\n  *\n  * @param prefix Network prefix. E.g.: 'nexa'.\n  * @param payload Array of 5-bit integers containing the address' payload.\n  */ static validChecksum(prefix, payload) {\n        let prefixData = this.prefixToArray(prefix).concat([\n            0\n        ]);\n        return this.polymod(prefixData.concat(payload)) === 0;\n    }\n    /**\n   * Computes a checksum from the given input data as specified for the CashAddr\n   * format: https://github.com/Bitcoin-UAHF/spec/blob/master/cashaddr.md.\n   *\n   * @param data Array of 5-bit integers over which the checksum is to be computed.\n   */ static polymod(data) {\n        let GENERATOR1 = [\n            0x98,\n            0x79,\n            0xf3,\n            0xae,\n            0x1e\n        ];\n        let GENERATOR2 = [\n            0xf2bc8e61,\n            0xb76d99e2,\n            0x3e5fb3c4,\n            0x2eabe2a8,\n            0x4f43e470\n        ];\n        // Treat c as 8 bits + 32 bits\n        let c0 = 0, c1 = 1, C = 0;\n        for(let j = 0; j < data.length; j++){\n            // Set C to c shifted by 35\n            C = c0 >>> 3;\n            // 0x[07]ffffffff\n            c0 &= 0x07;\n            // Shift as a whole number\n            c0 <<= 5;\n            c0 |= c1 >>> 27;\n            // 0xffffffff >>> 5\n            c1 &= 0x07ffffff;\n            c1 <<= 5;\n            // xor the last 5 bits\n            c1 ^= data[j];\n            for(let i = 0; i < GENERATOR1.length; ++i)if (C & 1 << i) {\n                c0 ^= GENERATOR1[i];\n                c1 ^= GENERATOR2[i];\n            }\n        }\n        c1 ^= 1;\n        // Negative numbers -> large positive numbers\n        if (c1 < 0) {\n            c1 ^= -2147483648;\n            c1 += 1073741824 * 2;\n        }\n        // Unless bitwise operations are used,\n        // numbers are consisting of 52 bits, except\n        // the sign bit. The result is max 40 bits,\n        // so it fits perfectly in one number!\n        return c0 * 1073741824 * 4 + c1;\n    }\n    /**\n   * Converts an array of integers made up of `from` bits into an\n   * array of integers made up of `to` bits. The output array is\n   * zero-padded if necessary, unless strict mode is true.\n   * Original by Pieter Wuille: https://github.com/sipa/bech32.\n   *\n   * @param data Array of integers made up of `from` bits.\n   * @param from Length in bits of elements in the input array.\n   * @param to Length in bits of elements in the output array.\n   * @param strict Require the conversion to be completed without padding.\n   */ static convertBits(data, from, to, strict = false) {\n        let accumulator = 0;\n        let bits = 0;\n        let result = [];\n        let mask = (1 << to) - 1;\n        for(let i = 0; i < data.length; i++){\n            let value = data[i];\n            (0, $e44f707fde477092$export$2e2bcd8739ae039).validateArgument(!(value < 0 || value >> from !== 0), 'value ' + value);\n            accumulator = accumulator << from | value;\n            bits += from;\n            while(bits >= to){\n                bits -= to;\n                result.push(accumulator >> bits & mask);\n            }\n        }\n        if (!strict) {\n            if (bits > 0) result.push(accumulator << to - bits & mask);\n        } else (0, $e44f707fde477092$export$2e2bcd8739ae039).validateState(!(bits >= from || accumulator << to - bits & mask), 'Conversion requires padding but strict mode was used');\n        return result;\n    }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar $92c0719d4ab9ac45$export$393941f88fd16991 = /*#__PURE__*/ function(Opcode) {\n    // push value\n    Opcode[Opcode[\"OP_FALSE\"] = 0] = \"OP_FALSE\";\n    Opcode[Opcode[\"OP_0\"] = 0] = \"OP_0\";\n    Opcode[Opcode[\"OP_PUSHDATA1\"] = 76] = \"OP_PUSHDATA1\";\n    Opcode[Opcode[\"OP_PUSHDATA2\"] = 77] = \"OP_PUSHDATA2\";\n    Opcode[Opcode[\"OP_PUSHDATA4\"] = 78] = \"OP_PUSHDATA4\";\n    Opcode[Opcode[\"OP_1NEGATE\"] = 79] = \"OP_1NEGATE\";\n    Opcode[Opcode[\"OP_RESERVED\"] = 80] = \"OP_RESERVED\";\n    Opcode[Opcode[\"OP_TRUE\"] = 81] = \"OP_TRUE\";\n    Opcode[Opcode[\"OP_1\"] = 81] = \"OP_1\";\n    Opcode[Opcode[\"OP_2\"] = 82] = \"OP_2\";\n    Opcode[Opcode[\"OP_3\"] = 83] = \"OP_3\";\n    Opcode[Opcode[\"OP_4\"] = 84] = \"OP_4\";\n    Opcode[Opcode[\"OP_5\"] = 85] = \"OP_5\";\n    Opcode[Opcode[\"OP_6\"] = 86] = \"OP_6\";\n    Opcode[Opcode[\"OP_7\"] = 87] = \"OP_7\";\n    Opcode[Opcode[\"OP_8\"] = 88] = \"OP_8\";\n    Opcode[Opcode[\"OP_9\"] = 89] = \"OP_9\";\n    Opcode[Opcode[\"OP_10\"] = 90] = \"OP_10\";\n    Opcode[Opcode[\"OP_11\"] = 91] = \"OP_11\";\n    Opcode[Opcode[\"OP_12\"] = 92] = \"OP_12\";\n    Opcode[Opcode[\"OP_13\"] = 93] = \"OP_13\";\n    Opcode[Opcode[\"OP_14\"] = 94] = \"OP_14\";\n    Opcode[Opcode[\"OP_15\"] = 95] = \"OP_15\";\n    Opcode[Opcode[\"OP_16\"] = 96] = \"OP_16\";\n    // control\n    Opcode[Opcode[\"OP_NOP\"] = 97] = \"OP_NOP\";\n    Opcode[Opcode[\"OP_INVALID_CONTROL1\"] = 98] = \"OP_INVALID_CONTROL1\";\n    Opcode[Opcode[\"OP_IF\"] = 99] = \"OP_IF\";\n    Opcode[Opcode[\"OP_NOTIF\"] = 100] = \"OP_NOTIF\";\n    Opcode[Opcode[\"OP_JUMP\"] = 101] = \"OP_JUMP\";\n    Opcode[Opcode[\"OP_INVALID_CONTROL2\"] = 102] = \"OP_INVALID_CONTROL2\";\n    Opcode[Opcode[\"OP_ELSE\"] = 103] = \"OP_ELSE\";\n    Opcode[Opcode[\"OP_ENDIF\"] = 104] = \"OP_ENDIF\";\n    Opcode[Opcode[\"OP_VERIFY\"] = 105] = \"OP_VERIFY\";\n    Opcode[Opcode[\"OP_RETURN\"] = 106] = \"OP_RETURN\";\n    // stack ops\n    Opcode[Opcode[\"OP_TOALTSTACK\"] = 107] = \"OP_TOALTSTACK\";\n    Opcode[Opcode[\"OP_FROMALTSTACK\"] = 108] = \"OP_FROMALTSTACK\";\n    Opcode[Opcode[\"OP_2DROP\"] = 109] = \"OP_2DROP\";\n    Opcode[Opcode[\"OP_2DUP\"] = 110] = \"OP_2DUP\";\n    Opcode[Opcode[\"OP_3DUP\"] = 111] = \"OP_3DUP\";\n    Opcode[Opcode[\"OP_2OVER\"] = 112] = \"OP_2OVER\";\n    Opcode[Opcode[\"OP_2ROT\"] = 113] = \"OP_2ROT\";\n    Opcode[Opcode[\"OP_2SWAP\"] = 114] = \"OP_2SWAP\";\n    Opcode[Opcode[\"OP_IFDUP\"] = 115] = \"OP_IFDUP\";\n    Opcode[Opcode[\"OP_DEPTH\"] = 116] = \"OP_DEPTH\";\n    Opcode[Opcode[\"OP_DROP\"] = 117] = \"OP_DROP\";\n    Opcode[Opcode[\"OP_DUP\"] = 118] = \"OP_DUP\";\n    Opcode[Opcode[\"OP_NIP\"] = 119] = \"OP_NIP\";\n    Opcode[Opcode[\"OP_OVER\"] = 120] = \"OP_OVER\";\n    Opcode[Opcode[\"OP_PICK\"] = 121] = \"OP_PICK\";\n    Opcode[Opcode[\"OP_ROLL\"] = 122] = \"OP_ROLL\";\n    Opcode[Opcode[\"OP_ROT\"] = 123] = \"OP_ROT\";\n    Opcode[Opcode[\"OP_SWAP\"] = 124] = \"OP_SWAP\";\n    Opcode[Opcode[\"OP_TUCK\"] = 125] = \"OP_TUCK\";\n    // splice ops\n    Opcode[Opcode[\"OP_CAT\"] = 126] = \"OP_CAT\";\n    Opcode[Opcode[\"OP_SPLIT\"] = 127] = \"OP_SPLIT\";\n    Opcode[Opcode[\"OP_NUM2BIN\"] = 128] = \"OP_NUM2BIN\";\n    Opcode[Opcode[\"OP_BIN2NUM\"] = 129] = \"OP_BIN2NUM\";\n    Opcode[Opcode[\"OP_SIZE\"] = 130] = \"OP_SIZE\";\n    // bit logic\n    Opcode[Opcode[\"OP_INVERT\"] = 131] = \"OP_INVERT\";\n    Opcode[Opcode[\"OP_AND\"] = 132] = \"OP_AND\";\n    Opcode[Opcode[\"OP_OR\"] = 133] = \"OP_OR\";\n    Opcode[Opcode[\"OP_XOR\"] = 134] = \"OP_XOR\";\n    Opcode[Opcode[\"OP_EQUAL\"] = 135] = \"OP_EQUAL\";\n    Opcode[Opcode[\"OP_EQUALVERIFY\"] = 136] = \"OP_EQUALVERIFY\";\n    Opcode[Opcode[\"OP_RESERVED1\"] = 137] = \"OP_RESERVED1\";\n    Opcode[Opcode[\"OP_RESERVED2\"] = 138] = \"OP_RESERVED2\";\n    // numeric\n    Opcode[Opcode[\"OP_1ADD\"] = 139] = \"OP_1ADD\";\n    Opcode[Opcode[\"OP_1SUB\"] = 140] = \"OP_1SUB\";\n    Opcode[Opcode[\"OP_2MUL\"] = 141] = \"OP_2MUL\";\n    Opcode[Opcode[\"OP_2DIV\"] = 142] = \"OP_2DIV\";\n    Opcode[Opcode[\"OP_NEGATE\"] = 143] = \"OP_NEGATE\";\n    Opcode[Opcode[\"OP_ABS\"] = 144] = \"OP_ABS\";\n    Opcode[Opcode[\"OP_NOT\"] = 145] = \"OP_NOT\";\n    Opcode[Opcode[\"OP_0NOTEQUAL\"] = 146] = \"OP_0NOTEQUAL\";\n    Opcode[Opcode[\"OP_ADD\"] = 147] = \"OP_ADD\";\n    Opcode[Opcode[\"OP_SUB\"] = 148] = \"OP_SUB\";\n    Opcode[Opcode[\"OP_MUL\"] = 149] = \"OP_MUL\";\n    Opcode[Opcode[\"OP_DIV\"] = 150] = \"OP_DIV\";\n    Opcode[Opcode[\"OP_MOD\"] = 151] = \"OP_MOD\";\n    Opcode[Opcode[\"OP_LSHIFT\"] = 152] = \"OP_LSHIFT\";\n    Opcode[Opcode[\"OP_RSHIFT\"] = 153] = \"OP_RSHIFT\";\n    Opcode[Opcode[\"OP_BOOLAND\"] = 154] = \"OP_BOOLAND\";\n    Opcode[Opcode[\"OP_BOOLOR\"] = 155] = \"OP_BOOLOR\";\n    Opcode[Opcode[\"OP_NUMEQUAL\"] = 156] = \"OP_NUMEQUAL\";\n    Opcode[Opcode[\"OP_NUMEQUALVERIFY\"] = 157] = \"OP_NUMEQUALVERIFY\";\n    Opcode[Opcode[\"OP_NUMNOTEQUAL\"] = 158] = \"OP_NUMNOTEQUAL\";\n    Opcode[Opcode[\"OP_LESSTHAN\"] = 159] = \"OP_LESSTHAN\";\n    Opcode[Opcode[\"OP_GREATERTHAN\"] = 160] = \"OP_GREATERTHAN\";\n    Opcode[Opcode[\"OP_LESSTHANOREQUAL\"] = 161] = \"OP_LESSTHANOREQUAL\";\n    Opcode[Opcode[\"OP_GREATERTHANOREQUAL\"] = 162] = \"OP_GREATERTHANOREQUAL\";\n    Opcode[Opcode[\"OP_MIN\"] = 163] = \"OP_MIN\";\n    Opcode[Opcode[\"OP_MAX\"] = 164] = \"OP_MAX\";\n    Opcode[Opcode[\"OP_WITHIN\"] = 165] = \"OP_WITHIN\";\n    // crypto\n    Opcode[Opcode[\"OP_RIPEMD160\"] = 166] = \"OP_RIPEMD160\";\n    Opcode[Opcode[\"OP_SHA1\"] = 167] = \"OP_SHA1\";\n    Opcode[Opcode[\"OP_SHA256\"] = 168] = \"OP_SHA256\";\n    Opcode[Opcode[\"OP_HASH160\"] = 169] = \"OP_HASH160\";\n    Opcode[Opcode[\"OP_HASH256\"] = 170] = \"OP_HASH256\";\n    Opcode[Opcode[\"OP_CODESEPARATOR\"] = 171] = \"OP_CODESEPARATOR\";\n    Opcode[Opcode[\"OP_CHECKSIG\"] = 172] = \"OP_CHECKSIG\";\n    Opcode[Opcode[\"OP_CHECKSIGVERIFY\"] = 173] = \"OP_CHECKSIGVERIFY\";\n    Opcode[Opcode[\"OP_CHECKMULTISIG\"] = 174] = \"OP_CHECKMULTISIG\";\n    Opcode[Opcode[\"OP_CHECKMULTISIGVERIFY\"] = 175] = \"OP_CHECKMULTISIGVERIFY\";\n    // timelocks\n    Opcode[Opcode[\"OP_NOP2\"] = 177] = \"OP_NOP2\";\n    Opcode[Opcode[\"OP_CHECKLOCKTIMEVERIFY\"] = 177] = \"OP_CHECKLOCKTIMEVERIFY\";\n    Opcode[Opcode[\"OP_NOP3\"] = 178] = \"OP_NOP3\";\n    Opcode[Opcode[\"OP_CHECKSEQUENCEVERIFY\"] = 178] = \"OP_CHECKSEQUENCEVERIFY\";\n    // expansion\n    Opcode[Opcode[\"OP_NOP1\"] = 176] = \"OP_NOP1\";\n    Opcode[Opcode[\"OP_NOP4\"] = 179] = \"OP_NOP4\";\n    Opcode[Opcode[\"OP_NOP5\"] = 180] = \"OP_NOP5\";\n    Opcode[Opcode[\"OP_NOP6\"] = 181] = \"OP_NOP6\";\n    Opcode[Opcode[\"OP_NOP7\"] = 182] = \"OP_NOP7\";\n    Opcode[Opcode[\"OP_NOP8\"] = 183] = \"OP_NOP8\";\n    Opcode[Opcode[\"OP_NOP9\"] = 184] = \"OP_NOP9\";\n    Opcode[Opcode[\"OP_NOP10\"] = 185] = \"OP_NOP10\";\n    // More crypto\n    Opcode[Opcode[\"OP_CHECKDATASIG\"] = 186] = \"OP_CHECKDATASIG\";\n    Opcode[Opcode[\"OP_CHECKDATASIGVERIFY\"] = 187] = \"OP_CHECKDATASIGVERIFY\";\n    // additional byte string operations\n    Opcode[Opcode[\"OP_REVERSEBYTES\"] = 188] = \"OP_REVERSEBYTES\";\n    // Transaction Introspection Opcodes\n    Opcode[Opcode[\"OP_INPUTINDEX\"] = 192] = \"OP_INPUTINDEX\";\n    Opcode[Opcode[\"OP_ACTIVEBYTECODE\"] = 193] = \"OP_ACTIVEBYTECODE\";\n    Opcode[Opcode[\"OP_TXVERSION\"] = 194] = \"OP_TXVERSION\";\n    Opcode[Opcode[\"OP_TXINPUTCOUNT\"] = 195] = \"OP_TXINPUTCOUNT\";\n    Opcode[Opcode[\"OP_TXOUTPUTCOUNT\"] = 196] = \"OP_TXOUTPUTCOUNT\";\n    Opcode[Opcode[\"OP_TXLOCKTIME\"] = 197] = \"OP_TXLOCKTIME\";\n    Opcode[Opcode[\"OP_UTXOVALUE\"] = 198] = \"OP_UTXOVALUE\";\n    Opcode[Opcode[\"OP_UTXOBYTECODE\"] = 199] = \"OP_UTXOBYTECODE\";\n    Opcode[Opcode[\"OP_OUTPOINTHASH\"] = 200] = \"OP_OUTPOINTHASH\";\n    Opcode[Opcode[\"OP_INPUTBYTECODE\"] = 202] = \"OP_INPUTBYTECODE\";\n    Opcode[Opcode[\"OP_INPUTSEQUENCENUMBER\"] = 203] = \"OP_INPUTSEQUENCENUMBER\";\n    Opcode[Opcode[\"OP_OUTPUTVALUE\"] = 204] = \"OP_OUTPUTVALUE\";\n    Opcode[Opcode[\"OP_OUTPUTBYTECODE\"] = 205] = \"OP_OUTPUTBYTECODE\";\n    Opcode[Opcode[\"OP_INPUTTYPE\"] = 206] = \"OP_INPUTTYPE\";\n    Opcode[Opcode[\"OP_OUTPUTTYPE\"] = 207] = \"OP_OUTPUTTYPE\";\n    Opcode[Opcode[\"OP_INPUTVALUE\"] = 208] = \"OP_INPUTVALUE\";\n    // NEXA opcodes\n    Opcode[Opcode[\"OP_PARSE\"] = 230] = \"OP_PARSE\";\n    Opcode[Opcode[\"OP_STORE\"] = 231] = \"OP_STORE\";\n    Opcode[Opcode[\"OP_LOAD\"] = 232] = \"OP_LOAD\";\n    Opcode[Opcode[\"OP_PLACE\"] = 233] = \"OP_PLACE\";\n    Opcode[Opcode[\"OP_PUSH_TX_STATE\"] = 234] = \"OP_PUSH_TX_STATE\";\n    Opcode[Opcode[\"OP_SETBMD\"] = 235] = \"OP_SETBMD\";\n    Opcode[Opcode[\"OP_BIN2BIGNUM\"] = 236] = \"OP_BIN2BIGNUM\";\n    Opcode[Opcode[\"OP_EXEC\"] = 237] = \"OP_EXEC\";\n    Opcode[Opcode[\"OP_MERKLEROOT\"] = 238] = \"OP_MERKLEROOT\";\n    // The first op_code value after all defined opcodes\n    Opcode[Opcode[\"FIRST_UNDEFINED_OP_VALUE\"] = 239] = \"FIRST_UNDEFINED_OP_VALUE\";\n    Opcode[Opcode[\"OP_INVALIDOPCODE\"] = 255] = \"OP_INVALIDOPCODE\";\n    return Opcode;\n}({});\nclass $92c0719d4ab9ac45$export$2e2bcd8739ae039 {\n    constructor(val){\n        if ((0, $hgUW1$isNumber)(val)) this.num = val;\n        else if ((0, $hgUW1$isString)(val)) this.num = $92c0719d4ab9ac45$export$393941f88fd16991[val];\n        else throw new TypeError('Unrecognized val type: \"' + typeof val + '\" for Opcode');\n    }\n    static fromBuffer(buf) {\n        (0, $e44f707fde477092$export$2e2bcd8739ae039).validateArgument((0, $9f918c10ad4fef51$export$2e2bcd8739ae039).isBuffer(buf), 'buf must be Buffer');\n        return new $92c0719d4ab9ac45$export$2e2bcd8739ae039(Number('0x' + buf.toString('hex')));\n    }\n    static fromNumber(num) {\n        (0, $e44f707fde477092$export$2e2bcd8739ae039).validateArgument((0, $hgUW1$isNumber)(num), 'num must be number');\n        return new $92c0719d4ab9ac45$export$2e2bcd8739ae039(num);\n    }\n    static fromString(str) {\n        (0, $e44f707fde477092$export$2e2bcd8739ae039).validateArgument((0, $hgUW1$isString)(str), 'str must be string');\n        let value = $92c0719d4ab9ac45$export$393941f88fd16991[str];\n        if (typeof value === 'undefined') throw new TypeError('Invalid opcodestr');\n        return new $92c0719d4ab9ac45$export$2e2bcd8739ae039(value);\n    }\n    static smallInt(n) {\n        (0, $e44f707fde477092$export$2e2bcd8739ae039).validateArgument((0, $hgUW1$isNumber)(n), 'n should be number');\n        (0, $e44f707fde477092$export$2e2bcd8739ae039).validateArgument(n >= 0 && n <= 16, 'n must be between 0 and 16');\n        if (n === 0) return new $92c0719d4ab9ac45$export$2e2bcd8739ae039('OP_0');\n        return new $92c0719d4ab9ac45$export$2e2bcd8739ae039(81 + n - 1);\n    }\n    /**\n   * @returns true if opcode is one of OP_0, OP_1, ..., OP_16\n   */ static isSmallIntOp(opcode) {\n        if (opcode instanceof $92c0719d4ab9ac45$export$2e2bcd8739ae039) opcode = opcode.toNumber();\n        return opcode === 0 || opcode >= 81 && opcode <= 96;\n    }\n    toHex() {\n        return this.num.toString(16);\n    }\n    toBuffer() {\n        return Buffer.from(this.toHex(), 'hex');\n    }\n    toNumber() {\n        return this.num;\n    }\n    toString() {\n        let str = $92c0719d4ab9ac45$export$393941f88fd16991[this.num];\n        if (typeof str === 'undefined') throw new Error('Opcode does not have a string representation');\n        return str;\n    }\n    /**\n   * Will return a string formatted for the console\n   *\n   * @returns Script opcode\n   */ inspect() {\n        return '<Opcode: ' + this.toString() + ', hex: ' + this.toHex() + ', decimal: ' + this.num + '>';\n    }\n    /**\n   * Comes from nexad's script DecodeOP_N function\n   * @param opcode\n   * @returns numeric value in range of 0 to 16\n   */ static decodeOP_N(opcode) {\n        if (opcode === 0) return 0;\n        else if (opcode >= 81 && opcode <= 96) return opcode - 80;\n        else throw new Error('Invalid opcode: ' + JSON.stringify(opcode));\n    }\n}\n\n\n\n\nclass $90f45db77a786f2b$export$2e2bcd8739ae039 {\n    constructor(from){\n        this.append = this.add;\n        this.chunks = [];\n        if (!from) return;\n        if ((0, $9f918c10ad4fef51$export$2e2bcd8739ae039).isBuffer(from)) return $90f45db77a786f2b$export$2e2bcd8739ae039.fromBuffer(from);\n        else if (from instanceof $90f45db77a786f2b$export$2e2bcd8739ae039) return $90f45db77a786f2b$export$2e2bcd8739ae039.fromBuffer(from.toBuffer());\n        else if ((0, $hgUW1$isString)(from)) return $90f45db77a786f2b$export$2e2bcd8739ae039.fromString(from);\n        else if ($90f45db77a786f2b$export$2e2bcd8739ae039._isScriptObject(from)) this.set(from);\n    }\n    static _isScriptObject(obj) {\n        return (0, $hgUW1$isObject)(obj) && 'chunks' in obj && (0, $hgUW1$isArray)(obj.chunks);\n    }\n    static _isScriptChunk(obj) {\n        return (0, $hgUW1$isObject)(obj) && 'opcodenum' in obj;\n    }\n    set(obj) {\n        (0, $e44f707fde477092$export$2e2bcd8739ae039).validateArgument($90f45db77a786f2b$export$2e2bcd8739ae039._isScriptObject(obj), 'obj');\n        this.chunks = obj.chunks;\n        return this;\n    }\n    /**\n  * @returns a new empty script\n  */ static empty() {\n        return new $90f45db77a786f2b$export$2e2bcd8739ae039();\n    }\n    static fromBuffer(buffer) {\n        let script = new $90f45db77a786f2b$export$2e2bcd8739ae039();\n        script.chunks = [];\n        let br = new (0, $12fea2c2eb591556$export$2e2bcd8739ae039)(buffer);\n        while(!br.finished())try {\n            let opcodenum = br.readUInt8();\n            let len, buf;\n            if (opcodenum > 0 && opcodenum < (0, $92c0719d4ab9ac45$export$393941f88fd16991).OP_PUSHDATA1) {\n                len = opcodenum;\n                script.chunks.push({\n                    buf: br.read(len),\n                    len: len,\n                    opcodenum: opcodenum\n                });\n            } else if (opcodenum === (0, $92c0719d4ab9ac45$export$393941f88fd16991).OP_PUSHDATA1) {\n                len = br.readUInt8();\n                buf = br.read(len);\n                script.chunks.push({\n                    buf: buf,\n                    len: len,\n                    opcodenum: opcodenum\n                });\n            } else if (opcodenum === (0, $92c0719d4ab9ac45$export$393941f88fd16991).OP_PUSHDATA2) {\n                len = br.readUInt16LE();\n                buf = br.read(len);\n                script.chunks.push({\n                    buf: buf,\n                    len: len,\n                    opcodenum: opcodenum\n                });\n            } else if (opcodenum === (0, $92c0719d4ab9ac45$export$393941f88fd16991).OP_PUSHDATA4) {\n                len = br.readUInt32LE();\n                buf = br.read(len);\n                script.chunks.push({\n                    buf: buf,\n                    len: len,\n                    opcodenum: opcodenum\n                });\n            } else script.chunks.push({\n                opcodenum: opcodenum\n            });\n        } catch (e) {\n            throw e instanceof RangeError ? new Error(`Invalid script buffer: can't parse valid script from given buffer ${buffer.toString('hex')}`) : e;\n        }\n        return script;\n    }\n    toBuffer() {\n        let bw = new (0, $35852622c8c617e8$export$2e2bcd8739ae039)();\n        this.chunks.forEach((chunk)=>{\n            bw.writeUInt8(chunk.opcodenum);\n            if (chunk.buf) {\n                if (chunk.opcodenum < (0, $92c0719d4ab9ac45$export$393941f88fd16991).OP_PUSHDATA1) bw.write(chunk.buf);\n                else if (chunk.opcodenum === (0, $92c0719d4ab9ac45$export$393941f88fd16991).OP_PUSHDATA1) {\n                    bw.writeUInt8(chunk.len);\n                    bw.write(chunk.buf);\n                } else if (chunk.opcodenum === (0, $92c0719d4ab9ac45$export$393941f88fd16991).OP_PUSHDATA2) {\n                    bw.writeUInt16LE(chunk.len);\n                    bw.write(chunk.buf);\n                } else if (chunk.opcodenum === (0, $92c0719d4ab9ac45$export$393941f88fd16991).OP_PUSHDATA4) {\n                    bw.writeUInt32LE(chunk.len);\n                    bw.write(chunk.buf);\n                }\n            }\n        });\n        return bw.concat();\n    }\n    static fromHex(str) {\n        return new $90f45db77a786f2b$export$2e2bcd8739ae039(Buffer.from(str, 'hex'));\n    }\n    static fromString(str) {\n        if ((0, $c337f7a9455509cf$export$2e2bcd8739ae039).isHexa(str) || str.length === 0) return this.fromHex(str);\n        let script = new $90f45db77a786f2b$export$2e2bcd8739ae039();\n        script.chunks = [];\n        let tokens = str.split(' ');\n        let i = 0;\n        while(i < tokens.length){\n            let token = tokens[i];\n            let opcode = new (0, $92c0719d4ab9ac45$export$2e2bcd8739ae039)(token);\n            let opcodenum = opcode.toNumber();\n            if ((0, $hgUW1$isUndefined)(opcodenum)) {\n                opcodenum = parseInt(token);\n                if (opcodenum > 0 && opcodenum < (0, $92c0719d4ab9ac45$export$393941f88fd16991).OP_PUSHDATA1) {\n                    script.chunks.push({\n                        buf: Buffer.from(tokens[i + 1].slice(2), 'hex'),\n                        len: opcodenum,\n                        opcodenum: opcodenum\n                    });\n                    i = i + 2;\n                } else throw new Error('Invalid script: ' + JSON.stringify(str));\n            } else if (opcodenum === (0, $92c0719d4ab9ac45$export$393941f88fd16991).OP_PUSHDATA1 || opcodenum === (0, $92c0719d4ab9ac45$export$393941f88fd16991).OP_PUSHDATA2 || opcodenum === (0, $92c0719d4ab9ac45$export$393941f88fd16991).OP_PUSHDATA4) {\n                if (tokens[i + 2].slice(0, 2) !== '0x') throw new Error('Pushdata data must start with 0x');\n                script.chunks.push({\n                    buf: Buffer.from(tokens[i + 2].slice(2), 'hex'),\n                    len: parseInt(tokens[i + 1]),\n                    opcodenum: opcodenum\n                });\n                i = i + 3;\n            } else {\n                script.chunks.push({\n                    opcodenum: opcodenum\n                });\n                i = i + 1;\n            }\n        }\n        return script;\n    }\n    static fromASM(str) {\n        let script = new $90f45db77a786f2b$export$2e2bcd8739ae039();\n        script.chunks = [];\n        let tokens = str.split(' ');\n        let i = 0;\n        while(i < tokens.length){\n            let token = tokens[i];\n            let opcode = new (0, $92c0719d4ab9ac45$export$2e2bcd8739ae039)(token);\n            let opcodenum = opcode.toNumber();\n            if ((0, $hgUW1$isUndefined)(opcodenum)) {\n                let buf = Buffer.from(tokens[i], 'hex');\n                let len = buf.length;\n                if (len >= 0 && len < (0, $92c0719d4ab9ac45$export$393941f88fd16991).OP_PUSHDATA1) opcodenum = len;\n                else if (len < Math.pow(2, 8)) opcodenum = (0, $92c0719d4ab9ac45$export$393941f88fd16991).OP_PUSHDATA1;\n                else if (len < Math.pow(2, 16)) opcodenum = (0, $92c0719d4ab9ac45$export$393941f88fd16991).OP_PUSHDATA2;\n                else if (len < Math.pow(2, 32)) opcodenum = (0, $92c0719d4ab9ac45$export$393941f88fd16991).OP_PUSHDATA4;\n                script.chunks.push({\n                    buf: buf,\n                    len: buf.length,\n                    opcodenum: opcodenum\n                });\n                i = i + 1;\n            } else {\n                script.chunks.push({\n                    opcodenum: opcodenum\n                });\n                i = i + 1;\n            }\n        }\n        return script;\n    }\n    static _chunkToString(chunk, toASM = false) {\n        let opcodenum = chunk.opcodenum;\n        let str = '';\n        if (!chunk.buf) {\n            // no data chunk\n            if (typeof (0, $92c0719d4ab9ac45$export$393941f88fd16991)[opcodenum] !== 'undefined') {\n                if (toASM) {\n                    // A few cases where the opcode name differs from reverseMap\n                    // aside from 1 to 16 data pushes.\n                    if (opcodenum === 0) // OP_0 -> 0\n                    str = str + ' 0';\n                    else if (opcodenum === 79) // OP_1NEGATE -> 1\n                    str = str + ' -1';\n                    else str = str + ' ' + new (0, $92c0719d4ab9ac45$export$2e2bcd8739ae039)(opcodenum).toString();\n                } else str = str + ' ' + new (0, $92c0719d4ab9ac45$export$2e2bcd8739ae039)(opcodenum).toString();\n            } else {\n                let numstr = opcodenum.toString(16);\n                if (numstr.length % 2 !== 0) numstr = '0' + numstr;\n                if (toASM) str = str + ' ' + numstr;\n                else str = str + ' ' + '0x' + numstr;\n            }\n        } else {\n            // data chunk\n            if (!toASM && (opcodenum === (0, $92c0719d4ab9ac45$export$393941f88fd16991).OP_PUSHDATA1 || opcodenum === (0, $92c0719d4ab9ac45$export$393941f88fd16991).OP_PUSHDATA2 || opcodenum === (0, $92c0719d4ab9ac45$export$393941f88fd16991).OP_PUSHDATA4)) str = str + ' ' + new (0, $92c0719d4ab9ac45$export$2e2bcd8739ae039)(opcodenum).toString();\n            if (chunk.len > 0) {\n                if (toASM) str = str + ' ' + chunk.buf.toString('hex');\n                else str = str + ' ' + chunk.len + ' ' + '0x' + chunk.buf.toString('hex');\n            }\n        }\n        return str;\n    }\n    toASM() {\n        return this.chunks.map((chunk)=>$90f45db77a786f2b$export$2e2bcd8739ae039._chunkToString(chunk, true)).join('').substring(1);\n    }\n    toString() {\n        return this.chunks.map((chunk)=>$90f45db77a786f2b$export$2e2bcd8739ae039._chunkToString(chunk)).join('').substring(1);\n    }\n    toHex() {\n        return this.toBuffer().toString('hex');\n    }\n    inspect() {\n        return `<Script: ${this}>`;\n    }\n    /**\n   * Adds a script element to the end of the script.\n   *\n   * @param param a script element to add\n   * @returns this script instance\n   *\n   */ add(param) {\n        this._addByType(param, false);\n        return this;\n    }\n    /**\n   * Adds a script element at the start of the script.\n   * @param param a script element to add\n   * @returns this script instance\n   */ prepend(param) {\n        this._addByType(param, true);\n        return this;\n    }\n    _addByType(obj, prepend) {\n        if (typeof obj === 'string') this._addOpcode(obj, prepend);\n        else if (typeof obj === 'number') this._addOpcode(obj, prepend);\n        else if (obj instanceof (0, $92c0719d4ab9ac45$export$2e2bcd8739ae039)) this._addOpcode(obj, prepend);\n        else if (typeof obj === 'bigint') {\n            if (obj <= 16n) this._addOpcode((0, $92c0719d4ab9ac45$export$2e2bcd8739ae039).smallInt(Number(obj)), prepend);\n            else if (obj === 0x81n) this._addOpcode((0, $92c0719d4ab9ac45$export$393941f88fd16991).OP_1NEGATE, prepend);\n            else this._addBuffer(new (0, $5aa97aebe18a7924$export$2e2bcd8739ae039)(obj.toString()).toScriptNumBuffer(), prepend);\n        } else if (typeof obj === 'boolean') this._addOpcode(obj ? (0, $92c0719d4ab9ac45$export$393941f88fd16991).OP_TRUE : (0, $92c0719d4ab9ac45$export$393941f88fd16991).OP_FALSE, prepend);\n        else if ((0, $9f918c10ad4fef51$export$2e2bcd8739ae039).isBuffer(obj)) this._addBuffer(obj, prepend);\n        else if (obj instanceof $90f45db77a786f2b$export$2e2bcd8739ae039) this.chunks = this.chunks.concat(obj.chunks);\n        else if ($90f45db77a786f2b$export$2e2bcd8739ae039._isScriptChunk(obj)) this._insertAtPosition(obj, prepend);\n        else throw new Error('Invalid script chunk');\n    }\n    _insertAtPosition(chunk, prepend) {\n        if (prepend) this.chunks.unshift(chunk);\n        else this.chunks.push(chunk);\n    }\n    _addOpcode(opcode, prepend) {\n        let op;\n        if (typeof opcode === 'number') op = opcode;\n        else if (opcode instanceof (0, $92c0719d4ab9ac45$export$2e2bcd8739ae039)) op = opcode.toNumber();\n        else op = new (0, $92c0719d4ab9ac45$export$2e2bcd8739ae039)(opcode).toNumber();\n        this._insertAtPosition({\n            opcodenum: op\n        }, prepend);\n        return this;\n    }\n    _addBuffer(buf, prepend) {\n        let opcodenum;\n        let len = buf.length;\n        if (len >= 0 && len < (0, $92c0719d4ab9ac45$export$393941f88fd16991).OP_PUSHDATA1) opcodenum = len;\n        else if (len < Math.pow(2, 8)) opcodenum = (0, $92c0719d4ab9ac45$export$393941f88fd16991).OP_PUSHDATA1;\n        else if (len < Math.pow(2, 16)) opcodenum = (0, $92c0719d4ab9ac45$export$393941f88fd16991).OP_PUSHDATA2;\n        else if (len < Math.pow(2, 32)) opcodenum = (0, $92c0719d4ab9ac45$export$393941f88fd16991).OP_PUSHDATA4;\n        else throw new Error(\"You can't push that much data\");\n        this._insertAtPosition({\n            buf: buf,\n            len: len,\n            opcodenum: opcodenum\n        }, prepend);\n        return this;\n    }\n    /**\n   * Compares a script with another script\n   */ equals(script) {\n        (0, $e44f707fde477092$export$2e2bcd8739ae039).validateState(script instanceof $90f45db77a786f2b$export$2e2bcd8739ae039, 'Must provide another script');\n        if (this.chunks.length !== script.chunks.length) return false;\n        for(let i = 0; i < this.chunks.length; i++){\n            if ((0, $9f918c10ad4fef51$export$2e2bcd8739ae039).isBuffer(this.chunks[i].buf) && !(0, $9f918c10ad4fef51$export$2e2bcd8739ae039).isBuffer(script.chunks[i].buf)) return false;\n            if ((0, $9f918c10ad4fef51$export$2e2bcd8739ae039).isBuffer(this.chunks[i].buf) && !this.chunks[i].buf.equals(script.chunks[i].buf)) return false;\n            else if (this.chunks[i].opcodenum !== script.chunks[i].opcodenum) return false;\n        }\n        return true;\n    }\n    /**\n   * Analogous to nexad's FindAndDelete. Find and delete equivalent chunks,\n   * typically used with push data chunks. Note that this will find and delete\n   * not just the same data, but the same data with the same push data op as\n   * produced by default. i.e., if a pushdata in a tx does not use the minimal\n   * pushdata op, then when you try to remove the data it is pushing, it will not\n   * be removed, because they do not use the same pushdata op.\n   */ findAndDelete(script) {\n        let buf = script.toBuffer();\n        let hex = buf.toString('hex');\n        for(let i = 0; i < this.chunks.length; i++){\n            let script2 = new $90f45db77a786f2b$export$2e2bcd8739ae039({\n                chunks: [\n                    this.chunks[i]\n                ]\n            });\n            let buf2 = script2.toBuffer();\n            let hex2 = buf2.toString('hex');\n            if (hex === hex2) this.chunks.splice(i, 1);\n        }\n        return this;\n    }\n    /**\n   * Comes from nexad's script interpreter CheckMinimalPush function\n   * @returns true if the chunk {i} is the smallest way to push that particular data.\n   */ checkMinimalPush(i) {\n        let chunk = this.chunks[i];\n        let buf = chunk.buf;\n        let opcodenum = chunk.opcodenum;\n        if (!buf) return true;\n        if (buf.length === 0) // Could have used OP_0.\n        return opcodenum === (0, $92c0719d4ab9ac45$export$393941f88fd16991).OP_0;\n        else if (buf.length === 1 && buf[0] >= 1 && buf[0] <= 16) // Could have used OP_1 .. OP_16.\n        // return opcodenum === Opcode.OP_1 + (buf[0] - 1);\n        return false;\n        else if (buf.length === 1 && buf[0] === 0x81) // Could have used OP_1NEGATE\n        return false;\n        else if (buf.length <= 75) // Could have used a direct push (opcode indicating number of bytes pushed + those bytes).\n        return opcodenum === buf.length;\n        else if (buf.length <= 255) // Could have used OP_PUSHDATA.\n        return opcodenum === (0, $92c0719d4ab9ac45$export$393941f88fd16991).OP_PUSHDATA1;\n        else if (buf.length <= 65535) // Could have used OP_PUSHDATA2.\n        return opcodenum === (0, $92c0719d4ab9ac45$export$393941f88fd16991).OP_PUSHDATA2;\n        return true;\n    }\n    /**\n   * Comes from bitcoind's script GetSigOpCount(boolean) function\n   * @param accurate default true\n   * @returns number of signature operations required by this script\n   */ getSignatureOperationsCount(accurate = true) {\n        let n = 0;\n        let lastOpcode = (0, $92c0719d4ab9ac45$export$393941f88fd16991).OP_INVALIDOPCODE;\n        this.chunks.forEach((chunk)=>{\n            let opcode = chunk.opcodenum;\n            if (opcode == (0, $92c0719d4ab9ac45$export$393941f88fd16991).OP_CHECKSIG || opcode == (0, $92c0719d4ab9ac45$export$393941f88fd16991).OP_CHECKSIGVERIFY) n++;\n            else if (opcode == (0, $92c0719d4ab9ac45$export$393941f88fd16991).OP_CHECKMULTISIG || opcode == (0, $92c0719d4ab9ac45$export$393941f88fd16991).OP_CHECKMULTISIGVERIFY) {\n                if (accurate && lastOpcode >= (0, $92c0719d4ab9ac45$export$393941f88fd16991).OP_1 && lastOpcode <= (0, $92c0719d4ab9ac45$export$393941f88fd16991).OP_16) n += (0, $92c0719d4ab9ac45$export$2e2bcd8739ae039).decodeOP_N(lastOpcode);\n                else n += 20;\n            }\n            lastOpcode = opcode;\n        });\n        return n;\n    }\n    /**\n   * @returns true if the script is only composed of data pushing\n   * opcodes or small int opcodes (OP_0, OP_1, ..., OP_16)\n   */ isPushOnly() {\n        return this.chunks.every((chunk)=>chunk.opcodenum <= (0, $92c0719d4ab9ac45$export$393941f88fd16991).OP_16 || chunk.opcodenum === (0, $92c0719d4ab9ac45$export$393941f88fd16991).OP_PUSHDATA1 || chunk.opcodenum === (0, $92c0719d4ab9ac45$export$393941f88fd16991).OP_PUSHDATA2 || chunk.opcodenum === (0, $92c0719d4ab9ac45$export$393941f88fd16991).OP_PUSHDATA4);\n    }\n    /**\n   * @returns true if this is a pay to script template output script\n   * @remarks for well-known-1 template use {@link isPublicKeyTemplateOut}\n   */ isScriptTemplateOut() {\n        if (this.chunks.length < 3) return false;\n        let hasGroup = this.chunks[0].opcodenum !== (0, $92c0719d4ab9ac45$export$393941f88fd16991).OP_0;\n        let minLength = hasGroup ? 4 : 3;\n        let templateIndex = hasGroup ? 2 : 1;\n        let constraintIndex = hasGroup ? 3 : 2;\n        let isTemplate = this.chunks.length >= minLength && (0, $9f918c10ad4fef51$export$2e2bcd8739ae039).isHashBuffer(this.chunks[templateIndex].buf) && ((0, $9f918c10ad4fef51$export$2e2bcd8739ae039).isHashBuffer(this.chunks[constraintIndex].buf) || this.chunks[constraintIndex].opcodenum === (0, $92c0719d4ab9ac45$export$393941f88fd16991).OP_FALSE);\n        if (hasGroup) isTemplate &&= !!(this.chunks[0].buf && this.chunks[0].buf.length >= 32 && // group id\n        this.chunks[1].buf && this.chunks[1].buf.length >= 2 && this.chunks[1].buf.length <= 8 // group amount\n        );\n        if (isTemplate && this.chunks.length > minLength) {\n            let visibleArgs = new $90f45db77a786f2b$export$2e2bcd8739ae039({\n                chunks: this.chunks.slice(minLength)\n            });\n            isTemplate = visibleArgs.isPushOnly();\n        }\n        return isTemplate;\n    }\n    /**\n   * Checks if this script is a valid pay to script template input script\n   * \n   * @returns true if this is a pay to script template form input script\n   * @remarks for well-known-1 template use {@link isPublicKeyTemplateIn}\n   */ isScriptTemplateIn() {\n        // we do not know the length or content of satisfier / template / costraint scripts,\n        // only that must be push-only and template must exist\n        return this.chunks.length > 1 && (0, $9f918c10ad4fef51$export$2e2bcd8739ae039).isBuffer(this.chunks[0].buf) && this.isPushOnly();\n    }\n    /**\n   * @returns true if this is a pay to pubkey template output script (well-known-1, p2pkt)\n   */ isPublicKeyTemplateOut() {\n        if (this.chunks.length < 3) return false;\n        let hasGroup = this.chunks[0].opcodenum !== (0, $92c0719d4ab9ac45$export$393941f88fd16991).OP_0;\n        let minLength = hasGroup ? 4 : 3;\n        let templateIndex = hasGroup ? 2 : 1;\n        let constraintIndex = hasGroup ? 3 : 2;\n        let isTemplate = this.chunks.length === minLength && this.chunks[templateIndex].opcodenum === (0, $92c0719d4ab9ac45$export$393941f88fd16991).OP_1 && (0, $9f918c10ad4fef51$export$2e2bcd8739ae039).isHashBuffer(this.chunks[constraintIndex].buf);\n        if (hasGroup) isTemplate &&= !!(this.chunks[0].buf && this.chunks[0].buf.length >= 32 && // group id\n        this.chunks[1].buf && this.chunks[1].buf.length >= 2 && this.chunks[1].buf.length <= 8 // group amount\n        );\n        return isTemplate;\n    }\n    /**\n   * @returns true if this is a pay to public key template input script\n   */ isPublicKeyTemplateIn() {\n        if (this.chunks.length != 2) return false;\n        let pubkeyPushBuf = this.chunks[0].buf;\n        let signatureBuf = this.chunks[1].buf;\n        if (signatureBuf && signatureBuf.length >= 64 && signatureBuf.length <= 68 && pubkeyPushBuf?.length === 34) {\n            let pubkeyBuf = $90f45db77a786f2b$export$2e2bcd8739ae039.fromBuffer(pubkeyPushBuf).chunks[0].buf;\n            return pubkeyBuf?.length === 33 && (pubkeyBuf[0] === 0x03 || pubkeyBuf[0] === 0x02);\n        }\n        return false;\n    }\n    /**\n   * @returns true if this is a pay to pubkey hash output script\n   */ isPublicKeyHashOut() {\n        return !!(this.chunks.length === 5 && this.chunks[0].opcodenum === (0, $92c0719d4ab9ac45$export$393941f88fd16991).OP_DUP && this.chunks[1].opcodenum === (0, $92c0719d4ab9ac45$export$393941f88fd16991).OP_HASH160 && this.chunks[2].buf && this.chunks[2].buf.length === 20 && this.chunks[3].opcodenum === (0, $92c0719d4ab9ac45$export$393941f88fd16991).OP_EQUALVERIFY && this.chunks[4].opcodenum === (0, $92c0719d4ab9ac45$export$393941f88fd16991).OP_CHECKSIG);\n    }\n    /**\n   * @returns {boolean} if this is a pay to public key hash input script\n   */ isPublicKeyHashIn() {\n        if (this.chunks.length != 2) return false;\n        let signatureBuf = this.chunks[0].buf;\n        let pubkeyBuf = this.chunks[1].buf;\n        if (signatureBuf && signatureBuf.length && pubkeyBuf && pubkeyBuf.length) {\n            let version = pubkeyBuf[0];\n            if ((version === 0x04 || version === 0x06 || version === 0x07) && pubkeyBuf.length === 65) return true;\n            else if ((version === 0x03 || version === 0x02) && pubkeyBuf.length === 33) return true;\n        }\n        return false;\n    }\n    /**\n   * @returns true if this is a valid standard OP_RETURN output\n   */ isDataOut() {\n        let step1 = this.chunks.length >= 1 && this.chunks[0].opcodenum === (0, $92c0719d4ab9ac45$export$393941f88fd16991).OP_RETURN && this.toBuffer().length <= 223; // 223 instead of 220 because (+1 for OP_RETURN, +2 for the pushdata opcodes)\n        if (!step1) return false;\n        let chunks = this.chunks.slice(1);\n        let script2 = new $90f45db77a786f2b$export$2e2bcd8739ae039({\n            chunks: chunks\n        });\n        return script2.isPushOnly();\n    }\n    /**\n   * @returns true if this is a valid Token Description OP_RETURN output\n   */ isTokenDescriptionOut() {\n        let step1 = (0, $hgUW1$inRange)(this.chunks.length, 2, 8) && this.chunks[0].opcodenum === (0, $92c0719d4ab9ac45$export$393941f88fd16991).OP_RETURN && this.chunks[1].len === 4;\n        return step1 && new $90f45db77a786f2b$export$2e2bcd8739ae039({\n            chunks: this.chunks.slice(1)\n        }).isPushOnly();\n    }\n    /**\n   * Will retrieve the Public Key buffer from p2pkt/p2pkh input scriptSig\n   */ getPublicKey() {\n        (0, $e44f707fde477092$export$2e2bcd8739ae039).validateState(this.isPublicKeyHashIn() || this.isPublicKeyTemplateIn(), \"Can't retrieve PublicKey from a non-PKT or non-PKH input\");\n        return this.isPublicKeyHashIn() ? this.chunks[1].buf : $90f45db77a786f2b$export$2e2bcd8739ae039.fromBuffer(this.chunks[0].buf).chunks[0].buf;\n    }\n    /**\n   * Will retrieve the Public Key Hash buffer from p2pkh output scriptPubKey\n   */ getPublicKeyHash() {\n        (0, $e44f707fde477092$export$2e2bcd8739ae039).validateState(this.isPublicKeyHashOut(), \"Can't retrieve PublicKeyHash from a non-PKH output\");\n        return this.chunks[2].buf;\n    }\n    /**\n   * Will retrieve the Template Hash from p2pkt/p2st output scriptPubKey\n   * \n   * @returns OP_1 if its p2pkt, otherwise the template hash buffer\n   */ getTemplateHash() {\n        (0, $e44f707fde477092$export$2e2bcd8739ae039).validateState(this.isPublicKeyTemplateOut() || this.isScriptTemplateOut(), \"Can't retrieve TemplateHash from a non-PST output\");\n        if (this.isPublicKeyTemplateOut()) return (0, $92c0719d4ab9ac45$export$393941f88fd16991).OP_1;\n        let hasGroup = this.chunks[0].opcodenum !== (0, $92c0719d4ab9ac45$export$393941f88fd16991).OP_0;\n        return hasGroup ? this.chunks[2].buf : this.chunks[1].buf;\n    }\n    /**\n   * Will retrieve the Constraint Hash from p2pkt/p2st output scriptPubKey\n   * \n   * @returns The constraint hash buffer, or OP_FALSE if not included\n   */ getConstraintHash() {\n        (0, $e44f707fde477092$export$2e2bcd8739ae039).validateState(this.isPublicKeyTemplateOut() || this.isScriptTemplateOut(), \"Can't retrieve ConstraintHash from a non-PST output\");\n        let hasGroup = this.chunks[0].opcodenum !== (0, $92c0719d4ab9ac45$export$393941f88fd16991).OP_0;\n        let constraintIndex = hasGroup ? 3 : 2;\n        if (this.isPublicKeyTemplateOut()) return this.chunks[constraintIndex].buf;\n        return this.chunks[constraintIndex].opcodenum === (0, $92c0719d4ab9ac45$export$393941f88fd16991).OP_FALSE ? (0, $92c0719d4ab9ac45$export$393941f88fd16991).OP_FALSE : this.chunks[constraintIndex].buf;\n    }\n    /**\n   * Will retrieve the Group Identifier number from Token Description OP_RETURN output\n   * \n   * @remarks This method doesn't check if the group id number is fit to NRC1/NRC2 etc. \n   */ getGroupIdType() {\n        (0, $e44f707fde477092$export$2e2bcd8739ae039).validateState(this.isTokenDescriptionOut(), \"Can't retrieve GroupIdType from a non Token Description output\");\n        return (0, $5aa97aebe18a7924$export$2e2bcd8739ae039).fromScriptNumBuffer(this.chunks[1].buf).toNumber();\n    }\n}\n\n\n\n\n\nclass $92cd415860c918d9$export$2e2bcd8739ae039 {\n    /* c8 ignore start */ /** @deprecated use data */ get hashBuffer() {\n        return this.data;\n    }\n    /* c8 ignore stop */ /**\n   * Instantiate an address from an address String or Buffer, a public key or script hash Buffer,\n   * or an instance of {@link PublicKey} or {@link Script}.\n   *\n   * This is an immutable class, and if the first parameter provided to this constructor is an\n   * `Address` instance, the same argument will be returned.\n   *\n   * An address has two key properties: `network` and `type`. The type is either\n   * `AddressType.PayToPublicKeyHash` (value is the `'P2PKH'` string)\n   * or `AddressType.PayToScriptTemplate` (the string `'P2ST'`). The network is an instance of {@link Network} or network name.\n   * You can quickly check whether an address is of a given kind by using the methods\n   * `isPayToPublicKeyHash` and `isPayToScriptTemplate`\n   *\n   * @example\n   * ```javascript\n   * // validate that an input field is valid\n   * let error = Address.getValidationError(input, 'testnet');\n   * if (!error) {\n   *   let address = new Address(input, 'testnet');\n   * } else {\n   *   // invalid network or checksum (typo?)\n   *   let message = error.messsage;\n   * }\n   *\n   * // get an address from a public key\n   * let address = Address.fromPublicKey(publicKey, 'testnet').toString();\n   * ```\n   *\n   * @param data The encoded data in various formats\n   * @param network The network: 'mainnet' (default) or 'testnet'\n   * @param type The type of address: 'P2ST' (default) or 'P2PKH' or 'GROUP'\n   * @returns A new valid and frozen instance of an Address\n   */ constructor(data, network, type){\n        /** @deprecated use toString */ this.toNexaAddress = this.toString;\n        this.toObject = this.toJSON;\n        (0, $e44f707fde477092$export$2e2bcd8739ae039).validateArgument(!(0, $hgUW1$isNil)(data), 'First argument is required, please include address data.');\n        if (data instanceof $92cd415860c918d9$export$2e2bcd8739ae039) return data; // Immutable instance\n        if ((0, $hgUW1$isString)(data)) return $92cd415860c918d9$export$2e2bcd8739ae039.fromString(data);\n        (0, $e44f707fde477092$export$2e2bcd8739ae039).validateArgument((0, $9f918c10ad4fef51$export$2e2bcd8739ae039).isBuffer(data), \"data must be Address, string or Buffer\");\n        $92cd415860c918d9$export$2e2bcd8739ae039.validateParams(network, type);\n        this.data = data;\n        this.network = (0, $a89918d61ea4dca0$export$f09b1917886389c3).get(network) || (0, $a89918d61ea4dca0$export$f09b1917886389c3).defaultNetwork;\n        this.type = type || (0, $c889a5b1bdeeb100$export$189c6ba3eaa96ac2).PayToScriptTemplate;\n    }\n    static validateParams(network, type) {\n        if (network && !(0, $a89918d61ea4dca0$export$f09b1917886389c3).get(network)) throw new TypeError('Second argument must be \"mainnet\" or \"testnet\".');\n        if (type && type !== (0, $c889a5b1bdeeb100$export$189c6ba3eaa96ac2).PayToScriptTemplate && type !== (0, $c889a5b1bdeeb100$export$189c6ba3eaa96ac2).GroupIdAddress && type !== (0, $c889a5b1bdeeb100$export$189c6ba3eaa96ac2).PayToPublicKeyHash) throw new TypeError('Third argument must be \"P2ST\", \"P2PKH\" or \"GROUP\"');\n    }\n    /**\n   * @param address string\n   * \n   * @returns A new valid and frozen instance of an Address\n   */ static fromString(address) {\n        (0, $e44f707fde477092$export$2e2bcd8739ae039).validateArgument((0, $hgUW1$isString)(address), 'parameter supplied is not a string.');\n        (0, $e44f707fde477092$export$2e2bcd8739ae039).validateArgument(address.length > 34, 'Invalid Address string provided');\n        let parts = (0, $c889a5b1bdeeb100$export$2e2bcd8739ae039).decode(address);\n        let network = (0, $a89918d61ea4dca0$export$f09b1917886389c3).get(parts.prefix, 'prefix');\n        return new $92cd415860c918d9$export$2e2bcd8739ae039(parts.data, network, parts.type);\n    }\n    static{\n        /** @deprecated use fromString */ this.decodeNexaAddress = this.fromString;\n    }\n    /**\n   * Will return a cashaddr representation of the address. Always return lower case\n   * Can be converted by the caller to uppercase is needed (still valid).\n   *\n   * @returns Nexa address\n   */ toString() {\n        return (0, $c889a5b1bdeeb100$export$2e2bcd8739ae039).encode(this.network.prefix, this.type, this.data);\n    }\n    /**\n   * Will return a string formatted for the console\n   *\n   * @returns {string} Bitcoin address\n   */ inspect() {\n        return `<Address: ${this}, type: ${this.type}, network: ${this.network}>`;\n    }\n    /**\n   * Instantiate an address from an Object\n   *\n   * @param obj - A JSON object with keys: data, network and type\n   * @returns A new valid instance of an Address\n   */ static fromObject(obj) {\n        (0, $e44f707fde477092$export$2e2bcd8739ae039).validateArgument((0, $hgUW1$isString)(obj?.data), 'Must provide a `data` property');\n        (0, $e44f707fde477092$export$2e2bcd8739ae039).validateArgument((0, $hgUW1$isString)(obj?.type), 'Must provide a `type` property');\n        (0, $e44f707fde477092$export$2e2bcd8739ae039).validateState((0, $c337f7a9455509cf$export$2e2bcd8739ae039).isHexa(obj.data), `Unexpected data property, expected to be hex.`);\n        let hashBuffer = Buffer.from(obj.data, 'hex');\n        return new $92cd415860c918d9$export$2e2bcd8739ae039(hashBuffer, obj.network, obj.type);\n    }\n    /**\n   * @returns A plain object with the address information\n   */ toJSON() {\n        return {\n            data: this.data.toString('hex'),\n            type: this.type,\n            network: this.network.toString()\n        };\n    }\n    /**\n   * @return true if an address is of pay to public key hash type\n   */ isPayToPublicKeyHash() {\n        return this.type === (0, $c889a5b1bdeeb100$export$189c6ba3eaa96ac2).PayToPublicKeyHash;\n    }\n    /**\n   * @return true if an address is of pay to script template type\n   */ isPayToScriptTemplate() {\n        return this.type === (0, $c889a5b1bdeeb100$export$189c6ba3eaa96ac2).PayToScriptTemplate;\n    }\n    /**\n   * @return true if an address is a group token address\n   */ isGroupIdentifierAddress() {\n        return this.type === (0, $c889a5b1bdeeb100$export$189c6ba3eaa96ac2).GroupIdAddress;\n    }\n    /**\n   * Will return a validation error if exists\n   *\n   * @example\n   * ```javascript\n   * // a network mismatch error\n   * let error = Address.getValidationError('nexatest:nqtsq5g567x44x5g54t2wsxz60zwqmyks63rkrddl4stwnzu', 'testnet');\n   * ```\n   *\n   * @param data The encoded data\n   * @param network either a Network instance, 'mainnet', or 'testnet'\n   * @param type The type of address: 'P2ST' or 'GROUP' or 'P2PKH'\n   * @returns The corresponding error message\n   */ static getValidationError(data, network, type) {\n        try {\n            if ((0, $hgUW1$isString)(data)) {\n                let addr = $92cd415860c918d9$export$2e2bcd8739ae039.fromString(data);\n                data = addr.data;\n                if (network && (0, $a89918d61ea4dca0$export$f09b1917886389c3).get(network)?.prefix !== addr.network.prefix) throw new Error('Address has mismatched network type.');\n                network = addr.network;\n                if (type && type !== addr.type) throw new Error('Address has mismatched type.');\n                type = addr.type;\n            }\n            this.validateParams(network, type);\n            (0, $c889a5b1bdeeb100$export$2e2bcd8739ae039).encode((0, $a89918d61ea4dca0$export$f09b1917886389c3).get(network)?.prefix || (0, $a89918d61ea4dca0$export$f09b1917886389c3).defaultNetwork.prefix, type || (0, $c889a5b1bdeeb100$export$189c6ba3eaa96ac2).PayToScriptTemplate, data);\n        } catch (e) {\n            return e;\n        }\n    }\n    /**\n   * Will return a boolean if an address is valid\n   *\n   * @example\n   * ```javascript\n   * assert(Address.isValid('nexa:nqtsq5g567x44x5g54t2wsxz60zwqmyks63rkrddsfq94pd2', 'mainned'));\n   * ```\n   *\n   * @param data The encoded data\n   * @param network either a Network instance, 'mainnet', or 'testnet'\n   * @param type The type of address: 'P2ST' or 'GROUP' or 'P2PKH'\n   * @returns true if valid\n   */ static isValid(data, network, type) {\n        return !$92cd415860c918d9$export$2e2bcd8739ae039.getValidationError(data, network, type);\n    }\n    /**\n   * Instantiate an address from a PublicKey instance\n   *\n   * @param pubkey the public key instance\n   * @param network either a Network instance, 'mainnet' or 'testnet'\n   * @param type address encoding type\n   * @returns A new valid and frozen instance of an Address\n   */ static fromPublicKey(pubkey, network, type) {\n        let data = this._transformPublicKey(pubkey, type);\n        return new $92cd415860c918d9$export$2e2bcd8739ae039(data, network, type);\n    }\n    /**\n   * Instantiate an address from a non grouped script template\n   *\n   * @param templateHash An instance of a template hash Buffer\n   * @param constraintHash An instance of a constraint hash Buffer\n   * @param visibleArgs An array of push-only args, or hex string represent script buffer, or Script with push args\n   * @param network either a Network instance, 'mainnet' or 'testnet'\n   * @returns A new valid and frozen instance of an Address\n   */ static fromScriptTemplate(templateHash, constraintHash, visibleArgs, network) {\n        let data = $92cd415860c918d9$export$2e2bcd8739ae039._transformScriptTemplate(templateHash, constraintHash, visibleArgs);\n        return new $92cd415860c918d9$export$2e2bcd8739ae039(data, network, (0, $c889a5b1bdeeb100$export$189c6ba3eaa96ac2).PayToScriptTemplate);\n    }\n    /**\n   * Internal function to transform a {@link PublicKey}\n   */ static _transformPublicKey(pubkey, type = (0, $c889a5b1bdeeb100$export$189c6ba3eaa96ac2).PayToScriptTemplate) {\n        (0, $e44f707fde477092$export$2e2bcd8739ae039).validateArgument(pubkey instanceof (0, $246eb589bb078d6d$export$2e2bcd8739ae039), 'Address must be an instance of PublicKey.');\n        if (type === (0, $c889a5b1bdeeb100$export$189c6ba3eaa96ac2).PayToPublicKeyHash) return (0, $62ca61b6ba036e1b$export$2e2bcd8739ae039).sha256ripemd160(pubkey.toBuffer());\n        else if (type === (0, $c889a5b1bdeeb100$export$189c6ba3eaa96ac2).PayToScriptTemplate) {\n            let constraint = (0, $90f45db77a786f2b$export$2e2bcd8739ae039).empty().add(pubkey.toBuffer());\n            let constraintHash = (0, $62ca61b6ba036e1b$export$2e2bcd8739ae039).sha256ripemd160(constraint.toBuffer());\n            return $92cd415860c918d9$export$2e2bcd8739ae039._transformScriptTemplate((0, $92c0719d4ab9ac45$export$393941f88fd16991).OP_1, constraintHash);\n        } else throw new Error(\"type must be P2ST or P2PKH\");\n    }\n    /**\n   * Internal function to transform a Script Template params\n   */ static _transformScriptTemplate(templateHash, constraintHash, visibleArgs) {\n        if (templateHash != (0, $92c0719d4ab9ac45$export$393941f88fd16991).OP_1 && !(0, $9f918c10ad4fef51$export$2e2bcd8739ae039).isHashBuffer(templateHash)) throw new TypeError('templateHash supplied is not a hash buffer or well-known OP_1.');\n        if (constraintHash != (0, $92c0719d4ab9ac45$export$393941f88fd16991).OP_FALSE && !(0, $9f918c10ad4fef51$export$2e2bcd8739ae039).isHashBuffer(constraintHash)) throw new TypeError('constraintHash supplied is not a hash buffer or OP_FALSE.');\n        let scriptTemplate = (0, $90f45db77a786f2b$export$2e2bcd8739ae039).empty().add((0, $92c0719d4ab9ac45$export$393941f88fd16991).OP_FALSE).add(templateHash).add(constraintHash);\n        if (visibleArgs) {\n            if ((0, $hgUW1$isArray)(visibleArgs)) visibleArgs.forEach((arg)=>scriptTemplate.add(arg));\n            else if (visibleArgs instanceof (0, $90f45db77a786f2b$export$2e2bcd8739ae039)) scriptTemplate.add(visibleArgs);\n            else if ((0, $c337f7a9455509cf$export$2e2bcd8739ae039).isHexa(visibleArgs)) scriptTemplate.add((0, $90f45db77a786f2b$export$2e2bcd8739ae039).fromHex(visibleArgs));\n        }\n        return new (0, $35852622c8c617e8$export$2e2bcd8739ae039)().writeVarLengthBuf(scriptTemplate.toBuffer()).toBuffer();\n    }\n    /**\n   * Will return the transaction output type by the address type\n   * \n   * @param address as string\n   * @returns 1 - Template, 0 - otherwise\n   */ static getOutputType(address) {\n        return this.fromString(address).getOutputType();\n    }\n    /**\n   * Will return the transaction output type by the address type\n   * \n   * @returns 1 - Template, 0 - otherwise\n   */ getOutputType() {\n        return this.isPayToScriptTemplate() ? 1 : 0;\n    }\n}\n\n\n\nclass $9e7155c0d97105d3$export$2e2bcd8739ae039 {\n    /**\n   * Instantiate a PrivateKey.\n   * \n   * @param data The private key data\n   * \n   * @remarks Better to use {@linkcode PrivateKey.from} method to init private key from various formats if the formart unknown.\n   *\n   * @example\n   * ```ts\n   * // generate a new random key\n   * let key = new PrivateKey();\n   *\n   * // encode into wallet import format\n   * let exported = key.toWIF();\n   *\n   * // instantiate from the exported (and saved) private key\n   * let imported = PrivateKey.fromWIF(exported);\n   * ```\n   */ constructor(data){\n        this.toObject = this.toJSON;\n        if (data instanceof $9e7155c0d97105d3$export$2e2bcd8739ae039) return data;\n        if ((0, $hgUW1$isNil)(data)) data = {\n            bn: $9e7155c0d97105d3$export$2e2bcd8739ae039._getRandomBN(),\n            compressed: true,\n            network: (0, $a89918d61ea4dca0$export$f09b1917886389c3).defaultNetwork\n        };\n        if (!$9e7155c0d97105d3$export$2e2bcd8739ae039._isPrivateKeyParams(data)) throw new TypeError('First argument is an unrecognized data type.');\n        // validation\n        if (!data.bn || data.bn.cmp(new (0, $5aa97aebe18a7924$export$2e2bcd8739ae039)(0)) === 0) throw new TypeError('Number can not be equal to zero, undefined, null or false');\n        if (!data.bn.lt((0, $ba7e1a38972b2d09$export$2e2bcd8739ae039).getN())) throw new TypeError('Number must be less than N');\n        this.bn = data.bn;\n        this.compressed = (0, $hgUW1$isUndefined)(data.compressed) ? true : data.compressed;\n        this.network = data.network || (0, $a89918d61ea4dca0$export$f09b1917886389c3).defaultNetwork;\n    }\n    get publicKey() {\n        return this.toPublicKey();\n    }\n    /**\n   * Will return an address for the private key with its defined network\n   * \n   * @param type - optional parameter specifying the desired type of the address.\n   *  default {@link AddressType.PayToScriptTemplate}\n   * \n   * @returns An address generated from the private key\n   */ toAddress(type = (0, $c889a5b1bdeeb100$export$189c6ba3eaa96ac2).PayToScriptTemplate) {\n        return (0, $92cd415860c918d9$export$2e2bcd8739ae039).fromPublicKey(this.publicKey, this.network, type);\n    }\n    /**\n   * Will output the PrivateKey encoded as hex string\n   */ toString() {\n        return this.toBuffer().toString('hex');\n    }\n    /**\n   * Will encode the PrivateKey to a WIF string\n   *\n   * @returns A WIF representation of the private key\n   */ toWIF() {\n        let buf;\n        if (this.compressed) buf = Buffer.concat([\n            Buffer.from([\n                this.network.privatekey\n            ]),\n            this.bn.toBuffer({\n                size: 32\n            }),\n            Buffer.from([\n                0x01\n            ])\n        ]);\n        else buf = Buffer.concat([\n            Buffer.from([\n                this.network.privatekey\n            ]),\n            this.bn.toBuffer({\n                size: 32\n            })\n        ]);\n        return (0, $7daa49d6586b1e1a$export$2e2bcd8739ae039).encode(buf);\n    }\n    /**\n   * Will return the private key as a BN instance\n   *\n   * @returns A BN instance of the private key\n   */ toBigNumber() {\n        return this.bn;\n    }\n    /**\n   * Will return the private key as a BN buffer\n   *\n   * @returns A buffer of the private key\n   */ toBuffer() {\n        return this.bn.toBuffer({\n            size: 32\n        });\n    }\n    /**\n   * Will return the private key as a BN buffer without leading zero padding\n   *\n   * @returns A buffer of the private key\n   */ toBufferNoPadding() {\n        return this.bn.toBuffer();\n    }\n    /**\n   * Will return the corresponding public key\n   *\n   * @returns A public key generated from the private key\n   */ toPublicKey() {\n        if (!this._pubkey) this._pubkey = (0, $246eb589bb078d6d$export$2e2bcd8739ae039).fromPrivateKey(this);\n        return this._pubkey;\n    }\n    /**\n   * @returns A plain object representation\n   */ toJSON() {\n        return {\n            bn: this.bn.toString('hex'),\n            compressed: this.compressed,\n            network: this.network.toString()\n        };\n    }\n    /**\n   * Will return a string formatted for the console\n   *\n   * @returns Private key details\n   */ inspect() {\n        let uncompressed = !this.compressed ? ', uncompressed' : '';\n        return `<PrivateKey: ${this.toString()}, network: ${this.network}${uncompressed}>`;\n    }\n    /**\n   * Instantiate a PrivateKey from a Buffer with the DER or WIF representation\n   */ static fromBuffer(buf, network) {\n        (0, $e44f707fde477092$export$2e2bcd8739ae039).validateArgument((0, $9f918c10ad4fef51$export$2e2bcd8739ae039).isBuffer(buf), 'First argument is expected to be a buffer.');\n        let data = this._transformBuffer(buf, network);\n        return new $9e7155c0d97105d3$export$2e2bcd8739ae039(data);\n    }\n    static{\n        this.fromString = this.fromWIF;\n    }\n    /**\n   * Instantiate a PrivateKey from a WIF string\n   *\n   * @param str - The WIF encoded private key string\n   * @returns A new valid instance of PrivateKey\n   */ static fromWIF(str, network) {\n        (0, $e44f707fde477092$export$2e2bcd8739ae039).validateArgument((0, $hgUW1$isString)(str), 'First argument is expected to be a string.');\n        let data;\n        if ((0, $c337f7a9455509cf$export$2e2bcd8739ae039).isHexa(str)) data = {\n            bn: new (0, $5aa97aebe18a7924$export$2e2bcd8739ae039)(Buffer.from(str, 'hex')),\n            compressed: true,\n            network: (0, $a89918d61ea4dca0$export$f09b1917886389c3).get(network) || (0, $a89918d61ea4dca0$export$f09b1917886389c3).defaultNetwork\n        };\n        else data = $9e7155c0d97105d3$export$2e2bcd8739ae039._transformWIF(str, network);\n        return new $9e7155c0d97105d3$export$2e2bcd8739ae039(data);\n    }\n    static{\n        this.fromObject = this.fromJSON;\n    }\n    /**\n   * Instantiate a PrivateKey from a plain JavaScript object\n   *\n   * @param obj - The output from privateKey.toObject()\n   */ static fromJSON(obj) {\n        (0, $e44f707fde477092$export$2e2bcd8739ae039).validateArgument((0, $hgUW1$isObject)(obj), 'First argument is expected to be an object.');\n        let data = this._transformObject(obj);\n        return new $9e7155c0d97105d3$export$2e2bcd8739ae039(data);\n    }\n    /**\n   * Instantiate a PrivateKey from random bytes\n   *\n   * @param network - Either \"mainnet\" or \"testnet\"\n   * @returns A new valid instance of PrivateKey\n   */ static fromRandom(network) {\n        let data = {\n            bn: $9e7155c0d97105d3$export$2e2bcd8739ae039._getRandomBN(),\n            compressed: true,\n            network: (0, $a89918d61ea4dca0$export$f09b1917886389c3).get(network) || (0, $a89918d61ea4dca0$export$f09b1917886389c3).defaultNetwork\n        };\n        return new $9e7155c0d97105d3$export$2e2bcd8739ae039(data);\n    }\n    /**\n   * Check if there would be any errors when initializing a PrivateKey\n   *\n   * @param data - The encoded data in various formats\n   * @param network - Either \"mainnet\" or \"testnet\"\n   * @returns An error if exists\n   */ static getValidationError(data, network) {\n        try {\n            this.from(data, network);\n        } catch (e) {\n            return e;\n        }\n        return undefined;\n    }\n    /**\n   * Check if the parameters are valid\n   *\n   * @param data - The encoded data in various formats\n   * @param network - Either \"mainnet\" or \"testnet\"\n   * @returns true If the private key would be valid\n   */ static isValid(data, network) {\n        if (!data) return false;\n        return !this.getValidationError(data, network);\n    }\n    /**\n   * Helper to instantiate PrivateKey from different kinds of arguments.\n   */ static from(data, network) {\n        // detect type of data\n        if ((0, $hgUW1$isNil)(data)) return this.fromRandom(network);\n        else if (data instanceof $9e7155c0d97105d3$export$2e2bcd8739ae039) return data;\n        else if (data instanceof (0, $5aa97aebe18a7924$export$2e2bcd8739ae039)) {\n            let info = {\n                bn: data,\n                compressed: true,\n                network: (0, $a89918d61ea4dca0$export$f09b1917886389c3).get(network) || (0, $a89918d61ea4dca0$export$f09b1917886389c3).defaultNetwork\n            };\n            return new $9e7155c0d97105d3$export$2e2bcd8739ae039(info);\n        } else if ((0, $9f918c10ad4fef51$export$2e2bcd8739ae039).isBuffer(data)) return this.fromBuffer(data, network);\n        else if (this._isPrivateKeyParams(data) && data.bn && data.network) return this.fromObject(data);\n        else if ((0, $hgUW1$isString)(data)) return this.fromString(data, network);\n        else throw new TypeError('First argument is an unrecognized data type.');\n    }\n    static _isPrivateKeyParams(data) {\n        return (0, $hgUW1$isObject)(data) && 'bn' in data && 'network' in data;\n    }\n    static _getRandomBN() {\n        let bn;\n        do {\n            let privbuf = (0, $9f918c10ad4fef51$export$2e2bcd8739ae039).getRandomBuffer(32);\n            bn = (0, $5aa97aebe18a7924$export$2e2bcd8739ae039).fromBuffer(privbuf);\n        }while (!bn.lt((0, $ba7e1a38972b2d09$export$2e2bcd8739ae039).getN()));\n        return bn;\n    }\n    /**\n   * Internal function to transform a WIF Buffer into a private key\n   */ static _transformBuffer(buf, network) {\n        if (buf.length === 32) return {\n            network: (0, $a89918d61ea4dca0$export$f09b1917886389c3).get(network) || (0, $a89918d61ea4dca0$export$f09b1917886389c3).defaultNetwork,\n            bn: (0, $5aa97aebe18a7924$export$2e2bcd8739ae039).fromBuffer(buf),\n            compressed: false\n        };\n        let info = {};\n        info.network = (0, $a89918d61ea4dca0$export$f09b1917886389c3).get(buf[0], 'privatekey');\n        if (!info.network) throw new Error(`Invalid network`);\n        if (network && info.network !== (0, $a89918d61ea4dca0$export$f09b1917886389c3).get(network)) throw new TypeError('Private key network mismatch');\n        if (buf.length === 34 && buf[33] === 1) info.compressed = true;\n        else if (buf.length === 33) info.compressed = false;\n        else throw new Error('Length of buffer must be 33 (uncompressed) or 34 (compressed)');\n        info.bn = (0, $5aa97aebe18a7924$export$2e2bcd8739ae039).fromBuffer(buf.subarray(1, 33));\n        return info;\n    }\n    /**\n   * Internal function to transform a JSON object into a private key\n   */ static _transformObject(data) {\n        return {\n            bn: new (0, $5aa97aebe18a7924$export$2e2bcd8739ae039)(data.bn, 'hex'),\n            network: (0, $a89918d61ea4dca0$export$f09b1917886389c3).get(data.network) || (0, $a89918d61ea4dca0$export$f09b1917886389c3).defaultNetwork,\n            compressed: data.compressed\n        };\n    }\n    /**\n   * Internal function to transform a WIF string into a private key\n   */ static _transformWIF(str, network) {\n        return this._transformBuffer((0, $7daa49d6586b1e1a$export$2e2bcd8739ae039).decode(str), network);\n    }\n}\n\n\n\n\n\n\n\n\n\nclass $824be92afb10ca74$export$b9181e523c619f72 extends Error {\n    constructor(arg){\n        super(`Invalid derivation argument: got ${arg}`);\n    }\n}\nclass $824be92afb10ca74$export$b59b0d37c3755b05 extends Error {\n    constructor(arg){\n        super(`Invalid derivation path, it should look like: \"m/1/100\", got \"${arg}\"`);\n    }\n}\nclass $824be92afb10ca74$export$f3983d7477e5f2f4 extends Error {\n    constructor(char, data){\n        super(`Invalid Base58 character: ${char} in ${data}`);\n    }\n}\nclass $824be92afb10ca74$export$11fc854522c14d8d extends Error {\n    constructor(arg){\n        super(`Invalid Base58 checksum for ${arg}`);\n    }\n}\nclass $824be92afb10ca74$export$e84f5e0e00fb0c4b extends Error {\n    constructor(arg){\n        super(`Invalid length for xprivkey string in ${arg}`);\n    }\n}\nclass $824be92afb10ca74$export$a1d2727a53328ff extends Error {\n    constructor(arg){\n        super(`Invalid version for network: got ${arg}`);\n    }\n}\nclass $824be92afb10ca74$export$7f451ba410ad3fb extends Error {\n    constructor(arg){\n        super(`Invalid network: must be \"mainnet\" or \"testnet\", got ${arg}`);\n    }\n}\nclass $824be92afb10ca74$export$c8ad90567a3adc29 extends Error {\n    constructor(arg){\n        super(`Invalid entropy: must be an hexa string or binary buffer, got ${arg}`);\n    }\n}\nclass $824be92afb10ca74$export$136e7f0d62b8ef6f extends Error {\n    constructor(arg){\n        super(`Invalid entropy: more than 512 bits is non standard, got ${arg}`);\n    }\n}\nclass $824be92afb10ca74$export$18f1c215e936cdfa extends Error {\n    constructor(arg){\n        super(`Invalid entropy: at least 128 bits needed, got ${arg}`);\n    }\n}\nclass $824be92afb10ca74$export$f1e27c60caf56b0a extends Error {\n    constructor(){\n        super(`Argument is an extended private key`);\n    }\n}\nclass $824be92afb10ca74$export$1efb2ac49bec6b75 extends Error {\n    constructor(){\n        super(`Invalid argument: creating a hardened path requires an HDPrivateKey`);\n    }\n}\n\n\n\n\nclass $850698057fd6f95c$export$2e2bcd8739ae039 {\n    static{\n        this.Hardened = 0x80000000;\n    }\n    static{\n        this.MaxIndex = 2 * $850698057fd6f95c$export$2e2bcd8739ae039.Hardened;\n    }\n    static{\n        this.RootElementAlias = [\n            'm',\n            'M',\n            'm\\'',\n            'M\\''\n        ];\n    }\n    static{\n        this.VersionSize = 4;\n    }\n    static{\n        this.DepthSize = 1;\n    }\n    static{\n        this.ParentFingerPrintSize = 4;\n    }\n    static{\n        this.ChildIndexSize = 4;\n    }\n    static{\n        this.ChainCodeSize = 32;\n    }\n    static{\n        this.CheckSumSize = 4;\n    }\n    static{\n        this.DataSize = 78;\n    }\n    static{\n        this.SerializedByteSize = 82;\n    }\n    static{\n        this.VersionStart = 0;\n    }\n    static{\n        this.VersionEnd = $850698057fd6f95c$export$2e2bcd8739ae039.VersionStart + $850698057fd6f95c$export$2e2bcd8739ae039.VersionSize;\n    }\n    static{\n        this.DepthStart = $850698057fd6f95c$export$2e2bcd8739ae039.VersionEnd;\n    }\n    static{\n        this.DepthEnd = $850698057fd6f95c$export$2e2bcd8739ae039.DepthStart + $850698057fd6f95c$export$2e2bcd8739ae039.DepthSize;\n    }\n    static{\n        this.ParentFingerPrintStart = $850698057fd6f95c$export$2e2bcd8739ae039.DepthEnd;\n    }\n    static{\n        this.ParentFingerPrintEnd = $850698057fd6f95c$export$2e2bcd8739ae039.ParentFingerPrintStart + $850698057fd6f95c$export$2e2bcd8739ae039.ParentFingerPrintSize;\n    }\n    static{\n        this.ChildIndexStart = $850698057fd6f95c$export$2e2bcd8739ae039.ParentFingerPrintEnd;\n    }\n    static{\n        this.ChildIndexEnd = $850698057fd6f95c$export$2e2bcd8739ae039.ChildIndexStart + $850698057fd6f95c$export$2e2bcd8739ae039.ChildIndexSize;\n    }\n    static{\n        this.ChainCodeStart = $850698057fd6f95c$export$2e2bcd8739ae039.ChildIndexEnd;\n    }\n    static{\n        this.ChainCodeEnd = $850698057fd6f95c$export$2e2bcd8739ae039.ChainCodeStart + $850698057fd6f95c$export$2e2bcd8739ae039.ChainCodeSize;\n    }\n    /**\n  * Util function that splits a string path into a derivation index array.\n  * It will return null if the string path is malformed.\n  * It does not validate if indexes are in bounds.\n  *\n  * @param path\n  */ static getDerivationIndexes(path) {\n        // Special cases:\n        if (this.RootElementAlias.includes(path)) return [];\n        let steps = path.split('/');\n        if (!this.RootElementAlias.includes(steps[0])) return null;\n        let indexes = steps.slice(1).map((step)=>{\n            let isHardened = step.slice(-1) === \"'\";\n            if (isHardened) step = step.slice(0, -1);\n            if (!step || step[0] === '-') return NaN;\n            let index = +step; // cast to number\n            if (isHardened) index += this.Hardened;\n            return index;\n        });\n        return indexes.some(isNaN) ? null : indexes;\n    }\n    static _validateNetwork(data, networkArg, isPrivate = false) {\n        let network = (0, $a89918d61ea4dca0$export$f09b1917886389c3).get(networkArg);\n        if (!network) return new (0, $824be92afb10ca74$export$7f451ba410ad3fb)(networkArg);\n        let version = data.subarray(this.VersionStart, this.VersionEnd);\n        if ((0, $9f918c10ad4fef51$export$2e2bcd8739ae039).integerFromBuffer(version) !== (isPrivate ? network.xprivkey : network.xpubkey)) return new (0, $824be92afb10ca74$export$a1d2727a53328ff)(version);\n        return null;\n    }\n    /**\n   * Verifies that a given serialized hd key in base58 with checksum format\n   * is valid.\n   *\n   * @param data - the serialized hd key\n   * @param network - optional, if present, checks that the network provided matches the network serialized.\n   */ static isValidSerialized(data, network, isPrivate = false) {\n        return (0, $hgUW1$isNull)(this.getSerializedError(data, network, isPrivate));\n    }\n    /**\n   * Checks what's the error that causes the validation of a serialized public key\n   * in base58 with checksum to fail.\n   *\n   * @param data - the serialized hd key\n   * @param network - optional, if present, checks that the network provided matches the network serialized.\n   */ static getSerializedError(data, network, isPrivate = false) {\n        if (!((0, $hgUW1$isString)(data) || (0, $9f918c10ad4fef51$export$2e2bcd8739ae039).isBuffer(data))) return new TypeError('Expected string or buffer');\n        if (!(0, $5d1fb851ba849ee0$export$2e2bcd8739ae039).validCharacters(data)) return new (0, $824be92afb10ca74$export$f3983d7477e5f2f4)('(unknown)', data);\n        try {\n            data = (0, $7daa49d6586b1e1a$export$2e2bcd8739ae039).decode(data);\n        } catch  {\n            return new (0, $824be92afb10ca74$export$11fc854522c14d8d)(data);\n        }\n        if (data.length !== $850698057fd6f95c$export$2e2bcd8739ae039.DataSize) return new (0, $824be92afb10ca74$export$e84f5e0e00fb0c4b)(data);\n        if (!(0, $hgUW1$isUndefined)(network)) {\n            let error = this._validateNetwork(data, network, isPrivate);\n            if (error) return error;\n        }\n        if (!isPrivate) {\n            let version = (0, $9f918c10ad4fef51$export$2e2bcd8739ae039).integerFromBuffer(data.subarray(0, 4));\n            if (version === (0, $a89918d61ea4dca0$export$f09b1917886389c3).mainnet.xprivkey || version === (0, $a89918d61ea4dca0$export$f09b1917886389c3).testnet.xprivkey) return new (0, $824be92afb10ca74$export$f1e27c60caf56b0a)();\n        }\n        return null;\n    }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nclass $ef69ee312dbfbba6$export$2e2bcd8739ae039 {\n    static{\n        this.PublicKeySize = 33;\n    }\n    static{\n        this.PublicKeyStart = (0, $850698057fd6f95c$export$2e2bcd8739ae039).ChainCodeEnd;\n    }\n    static{\n        this.PublicKeyEnd = this.PublicKeyStart + this.PublicKeySize;\n    }\n    static{\n        this.ChecksumStart = this.PublicKeyEnd;\n    }\n    static{\n        this.ChecksumEnd = this.ChecksumStart + (0, $850698057fd6f95c$export$2e2bcd8739ae039).CheckSumSize;\n    }\n    /**\n   * The representation of an hierarchically derived public key.\n   *\n   * See https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki\n   *\n   * @param arg\n   */ constructor(arg){\n        this.toJSON = this.toObject;\n        if ((0, $hgUW1$isNil)(arg)) throw new TypeError(\"Must supply an argument to create a HDPublicKey\");\n        if (arg instanceof $ef69ee312dbfbba6$export$2e2bcd8739ae039) return arg;\n        let params = $ef69ee312dbfbba6$export$2e2bcd8739ae039._classifyArgument(arg);\n        this.publicKey = params.publicKey;\n        this.network = params.network;\n        this.depth = params.depth;\n        this.parentFingerPrint = params.parentFingerPrint;\n        this.fingerPrint = params.fingerPrint;\n        this.chainCode = params.chainCode;\n        this.childIndex = params.childIndex;\n        this.xpubkey = params.xpubkey;\n        this.checksum = params.checksum;\n    }\n    static _classifyArgument(arg) {\n        if ((0, $hgUW1$isString)(arg) || (0, $9f918c10ad4fef51$export$2e2bcd8739ae039).isBuffer(arg)) {\n            let xpubkey = arg.toString();\n            if ((0, $850698057fd6f95c$export$2e2bcd8739ae039).isValidSerialized(xpubkey)) return this._buildFromSerialized(xpubkey);\n            throw (0, $850698057fd6f95c$export$2e2bcd8739ae039).getSerializedError(arg);\n        }\n        if (this._isIHDPubKey(arg)) return arg;\n        if (this._isMinimalDtoObject(arg)) return this._buildFromMinimalObject(arg);\n        if (this._isDtoObject(arg)) return this._buildFromObject(arg);\n        if (this._isIHDPrivKey(arg)) return this._buildFromHDPrivateKey(arg);\n        throw new TypeError('Invalid argument type for creation, must be string, json, buffer, or object');\n    }\n    static _isDtoObject(data) {\n        return (0, $hgUW1$isObject)(data) && 'xpubkey' in data && !('privateKey' in data) && 'publicKey' in data && (0, $hgUW1$isString)(data.publicKey);\n    }\n    static _isMinimalDtoObject(data) {\n        return (0, $hgUW1$isObject)(data) && !('xpubkey' in data) && !('privateKey' in data) && 'publicKey' in data && (0, $hgUW1$isString)(data.publicKey);\n    }\n    static _isIHDPubKey(data) {\n        return (0, $hgUW1$isObject)(data) && 'xpubkey' in data && !('privateKey' in data) && 'publicKey' in data && data.publicKey instanceof (0, $246eb589bb078d6d$export$2e2bcd8739ae039);\n    }\n    static _isIHDPrivKey(data) {\n        return (0, $hgUW1$isObject)(data) && 'privateKey' in data && (0, $hgUW1$isObject)(data.privateKey) && 'bn' in data.privateKey;\n    }\n    /**\n   * Verifies that a given path is valid.\n   *\n   * @param arg\n   * @return {boolean}\n   */ static isValidPath(arg) {\n        if ((0, $hgUW1$isString)(arg)) {\n            let indexes = (0, $850698057fd6f95c$export$2e2bcd8739ae039).getDerivationIndexes(arg);\n            return indexes !== null && indexes.every($ef69ee312dbfbba6$export$2e2bcd8739ae039.isValidPath);\n        }\n        if ((0, $hgUW1$isNumber)(arg)) return arg >= 0 && arg < (0, $850698057fd6f95c$export$2e2bcd8739ae039).Hardened;\n        return false;\n    }\n    /**\n   * Create a HDPublicKey from a buffer argument\n   *\n   * @param buf\n   */ static fromBuffer(buf) {\n        (0, $e44f707fde477092$export$2e2bcd8739ae039).validateArgument((0, $9f918c10ad4fef51$export$2e2bcd8739ae039).isBuffer(buf), 'No valid Buffer was provided');\n        return new $ef69ee312dbfbba6$export$2e2bcd8739ae039(buf);\n    }\n    /**\n   * Return a buffer representation of the xpubkey\n   */ toBuffer() {\n        return Buffer.from(this.xpubkey);\n    }\n    static fromString(xpubkey) {\n        (0, $e44f707fde477092$export$2e2bcd8739ae039).validateArgument((0, $hgUW1$isString)(xpubkey), 'No valid string was provided');\n        return new $ef69ee312dbfbba6$export$2e2bcd8739ae039(xpubkey);\n    }\n    /**\n   * Returns the base58 checked representation of the public key\n   * @return a string starting with \"xpub...\" in livenet\n   */ toString() {\n        return this.xpubkey;\n    }\n    /**\n   * Returns the console representation of this extended public key.\n   */ inspect() {\n        return `<HDPublicKey: ${this}>`;\n    }\n    static fromObject(arg) {\n        (0, $e44f707fde477092$export$2e2bcd8739ae039).validateArgument((0, $hgUW1$isObject)(arg), 'No valid argument was provided');\n        return new $ef69ee312dbfbba6$export$2e2bcd8739ae039(arg);\n    }\n    static fromMinimalObject(arg) {\n        (0, $e44f707fde477092$export$2e2bcd8739ae039).validateArgument((0, $hgUW1$isObject)(arg), 'No valid argument was provided');\n        let params = this._buildFromMinimalObject(arg);\n        return new $ef69ee312dbfbba6$export$2e2bcd8739ae039(params);\n    }\n    /**\n   * Returns a plain JavaScript object with information to reconstruct a key.\n   */ toObject() {\n        return {\n            network: this.network.name,\n            depth: this.depth,\n            fingerPrint: (0, $9f918c10ad4fef51$export$2e2bcd8739ae039).integerFromBuffer(this.fingerPrint),\n            parentFingerPrint: (0, $9f918c10ad4fef51$export$2e2bcd8739ae039).integerFromBuffer(this.parentFingerPrint),\n            childIndex: this.childIndex,\n            chainCode: this.chainCode.toString('hex'),\n            publicKey: this.publicKey.toString(),\n            checksum: (0, $9f918c10ad4fef51$export$2e2bcd8739ae039).integerFromBuffer(this.checksum),\n            xpubkey: this.xpubkey\n        };\n    }\n    /**\n   * Will return an address for the hdpubkey with its defined network\n   * \n   * @param type - optional parameter specifying the desired type of the address.\n   *  default {@link AddressType.PayToScriptTemplate}\n   * \n   * @returns An address generated from the hd public key\n   */ toAddress(type = (0, $c889a5b1bdeeb100$export$189c6ba3eaa96ac2).PayToScriptTemplate) {\n        return (0, $92cd415860c918d9$export$2e2bcd8739ae039).fromPublicKey(this.publicKey, this.network, type);\n    }\n    /**\n   * Get a derivated child based on a string or number.\n   *\n   * If the first argument is a string, it's parsed as the full path of\n   * derivation. Valid values for this argument include \"m\" (which returns the\n   * same public key), \"m/0/1/40/2/1000\".\n   *\n   * Note that hardened keys can't be derived from a public extended key.\n   *\n   * If the first argument is a number, the child with that index will be\n   * derived. See the example usage for clarification.\n   *\n   * @example\n   * ```javascript\n   * let parent = new HDPublicKey('xpub...');\n   * let child_0_1_2 = parent.deriveChild(0).deriveChild(1).deriveChild(2);\n   * let copy_of_child_0_1_2 = parent.deriveChild(\"m/0/1/2\");\n   * assert(child_0_1_2.xpubkey === copy_of_child_0_1_2.xpubkey);\n   * ```\n   *\n   * @param {string|number} arg\n   */ deriveChild(arg, hardened) {\n        if ((0, $hgUW1$isNumber)(arg)) return this._deriveWithNumber(arg, hardened);\n        if ((0, $hgUW1$isString)(arg)) return this._deriveFromString(arg);\n        throw new (0, $824be92afb10ca74$export$b9181e523c619f72)(arg);\n    }\n    _deriveWithNumber(index, hardened) {\n        if (index >= (0, $850698057fd6f95c$export$2e2bcd8739ae039).Hardened || hardened) throw new (0, $824be92afb10ca74$export$1efb2ac49bec6b75)();\n        if (index < 0) throw new (0, $824be92afb10ca74$export$b59b0d37c3755b05)(index);\n        let indexBuffer = (0, $9f918c10ad4fef51$export$2e2bcd8739ae039).integerAsBuffer(index);\n        let data = Buffer.concat([\n            this.publicKey.toBuffer(),\n            indexBuffer\n        ]);\n        let hash = (0, $62ca61b6ba036e1b$export$2e2bcd8739ae039).sha512hmac(data, this.chainCode);\n        let leftPart = (0, $5aa97aebe18a7924$export$2e2bcd8739ae039).fromBuffer(hash.subarray(0, 32), {\n            size: 32\n        });\n        let chainCode = hash.subarray(32, 64);\n        let publicKey;\n        try {\n            publicKey = (0, $246eb589bb078d6d$export$2e2bcd8739ae039).fromPoint((0, $ba7e1a38972b2d09$export$2e2bcd8739ae039).getG().mul(leftPart).add(this.publicKey.point));\n        } catch  {\n            return this._deriveWithNumber(index + 1);\n        }\n        let buffers = {\n            version: (0, $9f918c10ad4fef51$export$2e2bcd8739ae039).integerAsBuffer(this.network.xpubkey),\n            depth: (0, $9f918c10ad4fef51$export$2e2bcd8739ae039).integerAsSingleByteBuffer(this.depth + 1),\n            parentFingerPrint: this.fingerPrint,\n            childIndex: (0, $9f918c10ad4fef51$export$2e2bcd8739ae039).integerAsBuffer(index),\n            publicKey: publicKey.toBuffer(),\n            chainCode: chainCode\n        };\n        let derived = $ef69ee312dbfbba6$export$2e2bcd8739ae039._buildFromBuffers(buffers);\n        return new $ef69ee312dbfbba6$export$2e2bcd8739ae039(derived);\n    }\n    _deriveFromString(path) {\n        if (path.includes(\"'\")) throw new (0, $824be92afb10ca74$export$1efb2ac49bec6b75)();\n        if (!$ef69ee312dbfbba6$export$2e2bcd8739ae039.isValidPath(path)) throw new (0, $824be92afb10ca74$export$b59b0d37c3755b05)(path);\n        const deriveKeys = (baseKey, indexes)=>{\n            return indexes.reduce((prev, idx)=>prev._deriveWithNumber(idx), baseKey);\n        };\n        let indexes = (0, $850698057fd6f95c$export$2e2bcd8739ae039).getDerivationIndexes(path);\n        return deriveKeys(this, indexes);\n    }\n    static _buildFromObject(arg) {\n        return {\n            network: (0, $a89918d61ea4dca0$export$f09b1917886389c3).get(arg.network),\n            depth: arg.depth,\n            fingerPrint: (0, $9f918c10ad4fef51$export$2e2bcd8739ae039).integerAsBuffer(arg.fingerPrint),\n            parentFingerPrint: (0, $9f918c10ad4fef51$export$2e2bcd8739ae039).integerAsBuffer(arg.parentFingerPrint),\n            childIndex: arg.childIndex,\n            chainCode: Buffer.from(arg.chainCode, 'hex'),\n            xpubkey: arg.xpubkey,\n            checksum: (0, $9f918c10ad4fef51$export$2e2bcd8739ae039).integerAsBuffer(arg.checksum),\n            publicKey: (0, $246eb589bb078d6d$export$2e2bcd8739ae039).fromString(arg.publicKey, undefined, (0, $a89918d61ea4dca0$export$f09b1917886389c3).get(arg.network))\n        };\n    }\n    static _buildFromMinimalObject(arg) {\n        let buffers = {\n            version: (0, $9f918c10ad4fef51$export$2e2bcd8739ae039).integerAsBuffer((0, $a89918d61ea4dca0$export$f09b1917886389c3).get(arg.network).xpubkey),\n            depth: (0, $9f918c10ad4fef51$export$2e2bcd8739ae039).integerAsSingleByteBuffer(arg.depth),\n            parentFingerPrint: (0, $9f918c10ad4fef51$export$2e2bcd8739ae039).integerAsBuffer(arg.parentFingerPrint),\n            childIndex: (0, $9f918c10ad4fef51$export$2e2bcd8739ae039).integerAsBuffer(arg.childIndex),\n            chainCode: Buffer.from(arg.chainCode, 'hex'),\n            publicKey: Buffer.from(arg.publicKey, 'hex')\n        };\n        return this._buildFromBuffers(buffers);\n    }\n    static _buildFromHDPrivateKey(hdPrivateKey) {\n        let point = (0, $ba7e1a38972b2d09$export$2e2bcd8739ae039).getG().mul(hdPrivateKey.privateKey.bn);\n        let buffers = {\n            version: (0, $9f918c10ad4fef51$export$2e2bcd8739ae039).integerAsBuffer(hdPrivateKey.network.xpubkey),\n            depth: (0, $9f918c10ad4fef51$export$2e2bcd8739ae039).integerAsSingleByteBuffer(hdPrivateKey.depth),\n            parentFingerPrint: hdPrivateKey.parentFingerPrint,\n            childIndex: (0, $9f918c10ad4fef51$export$2e2bcd8739ae039).integerAsBuffer(hdPrivateKey.childIndex),\n            chainCode: hdPrivateKey.chainCode,\n            publicKey: (0, $ba7e1a38972b2d09$export$2e2bcd8739ae039).pointToCompressed(point)\n        };\n        return this._buildFromBuffers(buffers);\n    }\n    static _buildFromSerialized(xpubkey) {\n        let decoded = (0, $7daa49d6586b1e1a$export$2e2bcd8739ae039).decode(xpubkey);\n        let buffers = {\n            version: decoded.subarray((0, $850698057fd6f95c$export$2e2bcd8739ae039).VersionStart, (0, $850698057fd6f95c$export$2e2bcd8739ae039).VersionEnd),\n            depth: decoded.subarray((0, $850698057fd6f95c$export$2e2bcd8739ae039).DepthStart, (0, $850698057fd6f95c$export$2e2bcd8739ae039).DepthEnd),\n            parentFingerPrint: decoded.subarray((0, $850698057fd6f95c$export$2e2bcd8739ae039).ParentFingerPrintStart, (0, $850698057fd6f95c$export$2e2bcd8739ae039).ParentFingerPrintEnd),\n            childIndex: decoded.subarray((0, $850698057fd6f95c$export$2e2bcd8739ae039).ChildIndexStart, (0, $850698057fd6f95c$export$2e2bcd8739ae039).ChildIndexEnd),\n            chainCode: decoded.subarray((0, $850698057fd6f95c$export$2e2bcd8739ae039).ChainCodeStart, (0, $850698057fd6f95c$export$2e2bcd8739ae039).ChainCodeEnd),\n            publicKey: decoded.subarray(this.PublicKeyStart, this.PublicKeyEnd),\n            checksum: decoded.subarray(this.ChecksumStart, this.ChecksumEnd)\n        };\n        return this._buildFromBuffers(buffers);\n    }\n    /**\n   * Receives a object with buffers in all the properties and populates the\n   * internal structure\n   *\n   * @param arg\n   */ static _buildFromBuffers(arg) {\n        $ef69ee312dbfbba6$export$2e2bcd8739ae039._validateBufferArguments(arg);\n        let sequence = [\n            arg.version,\n            arg.depth,\n            arg.parentFingerPrint,\n            arg.childIndex,\n            arg.chainCode,\n            arg.publicKey\n        ];\n        let concat = Buffer.concat(sequence);\n        let checksum = (0, $7daa49d6586b1e1a$export$2e2bcd8739ae039).checksum(concat);\n        if (!arg.checksum || !arg.checksum.length) arg.checksum = checksum;\n        else if (arg.checksum.toString('hex') !== checksum.toString('hex')) throw new (0, $824be92afb10ca74$export$11fc854522c14d8d)(concat);\n        let network = (0, $a89918d61ea4dca0$export$f09b1917886389c3).get((0, $9f918c10ad4fef51$export$2e2bcd8739ae039).integerFromBuffer(arg.version));\n        let publicKey = (0, $246eb589bb078d6d$export$2e2bcd8739ae039).fromBuffer(arg.publicKey, true, network);\n        return {\n            xpubkey: (0, $7daa49d6586b1e1a$export$2e2bcd8739ae039).encode(concat),\n            network: network,\n            depth: (0, $9f918c10ad4fef51$export$2e2bcd8739ae039).integerFromSingleByteBuffer(arg.depth),\n            publicKey: publicKey,\n            fingerPrint: (0, $62ca61b6ba036e1b$export$2e2bcd8739ae039).sha256ripemd160(publicKey.toBuffer()).subarray(0, (0, $850698057fd6f95c$export$2e2bcd8739ae039).ParentFingerPrintSize),\n            chainCode: arg.chainCode,\n            childIndex: (0, $9f918c10ad4fef51$export$2e2bcd8739ae039).integerFromBuffer(arg.childIndex),\n            parentFingerPrint: arg.parentFingerPrint,\n            checksum: arg.checksum\n        };\n    }\n    static _validateBufferArguments(arg) {\n        const checkBuffer = (name, size)=>{\n            let buff = arg[name];\n            (0, $e44f707fde477092$export$2e2bcd8739ae039).validateArgument((0, $9f918c10ad4fef51$export$2e2bcd8739ae039).isBuffer(buff), name + ` argument is not a buffer, it\\'s ${typeof buff}`);\n            (0, $e44f707fde477092$export$2e2bcd8739ae039).validateArgument(buff.length === size, name + ' has not the expected size: found ' + buff.length + ', expected ' + size);\n        };\n        checkBuffer('version', (0, $850698057fd6f95c$export$2e2bcd8739ae039).VersionSize);\n        checkBuffer('depth', (0, $850698057fd6f95c$export$2e2bcd8739ae039).DepthSize);\n        checkBuffer('parentFingerPrint', (0, $850698057fd6f95c$export$2e2bcd8739ae039).ParentFingerPrintSize);\n        checkBuffer('childIndex', (0, $850698057fd6f95c$export$2e2bcd8739ae039).ChildIndexSize);\n        checkBuffer('chainCode', (0, $850698057fd6f95c$export$2e2bcd8739ae039).ChainCodeSize);\n        checkBuffer('publicKey', $ef69ee312dbfbba6$export$2e2bcd8739ae039.PublicKeySize);\n        if (arg.checksum?.length) checkBuffer('checksum', (0, $850698057fd6f95c$export$2e2bcd8739ae039).CheckSumSize);\n    }\n}\n\n\nclass $8fc74ca0a6995b3b$export$2e2bcd8739ae039 {\n    static{\n        this.MINIMUM_ENTROPY_BITS = 128;\n    }\n    static{\n        this.BITS_TO_BYTES = 1 / 8;\n    }\n    static{\n        this.MAXIMUM_ENTROPY_BITS = 512;\n    }\n    static{\n        this.PrivateKeySize = 32;\n    }\n    static{\n        this.PrivateKeyStart = (0, $850698057fd6f95c$export$2e2bcd8739ae039).ChainCodeEnd + 1;\n    }\n    static{\n        this.PrivateKeyEnd = this.PrivateKeyStart + this.PrivateKeySize;\n    }\n    static{\n        this.ChecksumStart = this.PrivateKeyEnd;\n    }\n    static{\n        this.ChecksumEnd = this.ChecksumStart + (0, $850698057fd6f95c$export$2e2bcd8739ae039).CheckSumSize;\n    }\n    /**\n   * Represents an instance of an hierarchically derived private key.\n   *\n   * More info on https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki\n   */ constructor(arg){\n        this.toJSON = this.toObject;\n        if (arg instanceof $8fc74ca0a6995b3b$export$2e2bcd8739ae039) return arg;\n        let params = $8fc74ca0a6995b3b$export$2e2bcd8739ae039._classifyArgument(arg);\n        this.privateKey = params.privateKey;\n        this.publicKey = params.publicKey ?? params.privateKey.toPublicKey();\n        this.network = params.network;\n        this.depth = params.depth;\n        this.parentFingerPrint = params.parentFingerPrint;\n        this.fingerPrint = params.fingerPrint;\n        this.chainCode = params.chainCode;\n        this.childIndex = params.childIndex;\n        this.xprivkey = params.xprivkey;\n        this.checksum = params.checksum;\n    }\n    static _classifyArgument(arg) {\n        if (!arg) return this._generateRandomly();\n        if ((0, $a89918d61ea4dca0$export$f09b1917886389c3).get(arg)) return this._generateRandomly(arg);\n        if ((0, $hgUW1$isString)(arg) || (0, $9f918c10ad4fef51$export$2e2bcd8739ae039).isBuffer(arg)) {\n            let xprivkey = arg.toString();\n            if ((0, $850698057fd6f95c$export$2e2bcd8739ae039).isValidSerialized(xprivkey, undefined, true)) return this._buildFromSerialized(xprivkey);\n            if ((0, $c337f7a9455509cf$export$2e2bcd8739ae039).isValidJSON(arg)) return this._buildFromObject(JSON.parse(arg));\n            throw (0, $850698057fd6f95c$export$2e2bcd8739ae039).getSerializedError(arg, undefined, true);\n        }\n        if (this._isIHDPrivKey(arg)) return arg;\n        if (this._isMinimalDtoObject(arg)) return this._buildFromMinimalObject(arg);\n        if (this._isDtoObject(arg)) return this._buildFromObject(arg);\n        throw new TypeError('Invalid argument type for creation, must be string, json, buffer, or object');\n    }\n    get hdPublicKey() {\n        return this.getHDPublicKey();\n    }\n    get xpubkey() {\n        return this.getHDPublicKey().xpubkey;\n    }\n    static _isDtoObject(data) {\n        return (0, $hgUW1$isObject)(data) && 'xprivkey' in data && 'privateKey' in data && (0, $hgUW1$isString)(data.privateKey);\n    }\n    static _isMinimalDtoObject(data) {\n        return (0, $hgUW1$isObject)(data) && !('xprivkey' in data) && 'privateKey' in data && (0, $hgUW1$isString)(data.privateKey);\n    }\n    static _isIHDPrivKey(data) {\n        return (0, $hgUW1$isObject)(data) && 'xprivkey' in data && 'privateKey' in data && data.privateKey instanceof (0, $9e7155c0d97105d3$export$2e2bcd8739ae039);\n    }\n    /**\n   * Verifies that a given path is valid.\n   *\n   * @param arg\n   * @param hardened\n   */ static isValidPath(arg, hardened) {\n        if ((0, $hgUW1$isString)(arg)) {\n            let indexes = (0, $850698057fd6f95c$export$2e2bcd8739ae039).getDerivationIndexes(arg);\n            return indexes !== null && indexes.every((i)=>this.isValidPath(i));\n        }\n        if ((0, $hgUW1$isNumber)(arg)) {\n            if (arg < (0, $850698057fd6f95c$export$2e2bcd8739ae039).Hardened && hardened === true) arg += (0, $850698057fd6f95c$export$2e2bcd8739ae039).Hardened;\n            return arg >= 0 && arg < (0, $850698057fd6f95c$export$2e2bcd8739ae039).MaxIndex;\n        }\n        return false;\n    }\n    static fromString(xprivkey) {\n        (0, $e44f707fde477092$export$2e2bcd8739ae039).validateArgument((0, $hgUW1$isString)(xprivkey), 'No valid string was provided');\n        return new $8fc74ca0a6995b3b$export$2e2bcd8739ae039(xprivkey);\n    }\n    /**\n   * Returns the string representation of this private key (ext privkey).\n   */ toString() {\n        return this.xprivkey;\n    }\n    /**\n   * Build a HDPrivateKey from a buffer\n   *\n   * @param {Buffer} buf\n   */ static fromBuffer(buf) {\n        (0, $e44f707fde477092$export$2e2bcd8739ae039).validateArgument((0, $9f918c10ad4fef51$export$2e2bcd8739ae039).isBuffer(buf), 'No valid Buffer was provided');\n        return new $8fc74ca0a6995b3b$export$2e2bcd8739ae039(buf);\n    }\n    /**\n   * Returns a buffer representation of the HDPrivateKey\n   */ toBuffer() {\n        return Buffer.from(this.xprivkey);\n    }\n    /**\n   * Returns a plain object with a representation of this private key.\n   */ toObject() {\n        return {\n            network: this.network.name,\n            depth: this.depth,\n            fingerPrint: (0, $9f918c10ad4fef51$export$2e2bcd8739ae039).integerFromBuffer(this.fingerPrint),\n            parentFingerPrint: (0, $9f918c10ad4fef51$export$2e2bcd8739ae039).integerFromBuffer(this.parentFingerPrint),\n            childIndex: this.childIndex,\n            chainCode: this.chainCode.toString('hex'),\n            privateKey: this.privateKey.toString(),\n            checksum: (0, $9f918c10ad4fef51$export$2e2bcd8739ae039).integerFromBuffer(this.checksum),\n            xprivkey: this.xprivkey\n        };\n    }\n    static fromObject(arg) {\n        (0, $e44f707fde477092$export$2e2bcd8739ae039).validateArgument((0, $hgUW1$isObject)(arg), 'No valid argument was provided');\n        return new $8fc74ca0a6995b3b$export$2e2bcd8739ae039(arg);\n    }\n    static fromMinimalObject(arg) {\n        (0, $e44f707fde477092$export$2e2bcd8739ae039).validateArgument((0, $hgUW1$isObject)(arg), 'No valid argument was provided');\n        let params = this._buildFromMinimalObject(arg);\n        return new $8fc74ca0a6995b3b$export$2e2bcd8739ae039(params);\n    }\n    /**\n   * Generate a private key from a seed, as described in BIP32\n   *\n   * @param seed\n   * @param network\n   * @return HDPrivateKey\n   */ static fromSeed(seed, network = (0, $a89918d61ea4dca0$export$f09b1917886389c3).defaultNetwork) {\n        let params = this._buildFromSeed(seed, network);\n        return new $8fc74ca0a6995b3b$export$2e2bcd8739ae039(params);\n    }\n    /**\n   * Get a derived child based on a string or number.\n   *\n   * If the first argument is a string, it's parsed as the full path of\n   * derivation. Valid values for this argument include \"m\" (which returns the\n   * same private key), \"m/0/1/40/2'/1000\", where the ' quote means a hardened\n   * derivation.\n   *\n   * If the first argument is a number, the child with that index will be\n   * derived. If the second argument is truthy, the hardened version will be\n   * derived. See the example usage for clarification.\n   *\n   * @example\n   * ```javascript\n   * let parent = new HDPrivateKey('xprv...');\n   * let child_0_1_2h = parent.deriveChild(0).deriveChild(1).deriveChild(2, true);\n   * let copy_of_child_0_1_2h = parent.deriveChild(\"m/0/1/2'\");\n   * assert(child_0_1_2h.xprivkey === copy_of_child_0_1_2h.xprivkey);\n   * ```\n   *\n   * @param arg\n   * @param hardened\n   * @return HDPrivateKey\n   */ deriveChild(arg, hardened) {\n        if ((0, $hgUW1$isNumber)(arg)) return this._deriveWithNumber(arg, hardened);\n        if ((0, $hgUW1$isString)(arg)) return this._deriveFromString(arg);\n        throw new (0, $824be92afb10ca74$export$b9181e523c619f72)(arg);\n    }\n    _deriveWithNumber(index, hardened) {\n        if (!$8fc74ca0a6995b3b$export$2e2bcd8739ae039.isValidPath(index, hardened)) throw new (0, $824be92afb10ca74$export$b59b0d37c3755b05)(index);\n        hardened = index >= (0, $850698057fd6f95c$export$2e2bcd8739ae039).Hardened ? true : hardened;\n        if (index < (0, $850698057fd6f95c$export$2e2bcd8739ae039).Hardened && hardened === true) index += (0, $850698057fd6f95c$export$2e2bcd8739ae039).Hardened;\n        let indexBuffer = (0, $9f918c10ad4fef51$export$2e2bcd8739ae039).integerAsBuffer(index);\n        let data;\n        if (hardened) {\n            // This will use a 32 byte zero padded serialization of the private key\n            let privateKeyBuffer = this.privateKey.toBuffer();\n            (0, $e44f707fde477092$export$2e2bcd8739ae039).validateState(privateKeyBuffer.length === 32, 'length of private key buffer is expected to be 32 bytes');\n            data = Buffer.concat([\n                Buffer.from([\n                    0\n                ]),\n                privateKeyBuffer,\n                indexBuffer\n            ]);\n        } else data = Buffer.concat([\n            this.publicKey.toBuffer(),\n            indexBuffer\n        ]);\n        let hash = (0, $62ca61b6ba036e1b$export$2e2bcd8739ae039).sha512hmac(data, this.chainCode);\n        let leftPart = (0, $5aa97aebe18a7924$export$2e2bcd8739ae039).fromBuffer(hash.subarray(0, 32), {\n            size: 32\n        });\n        let chainCode = hash.subarray(32, 64);\n        let privateKey = leftPart.add(this.privateKey.toBigNumber()).umod((0, $ba7e1a38972b2d09$export$2e2bcd8739ae039).getN()).toBuffer({\n            size: 32\n        });\n        if (!(0, $9e7155c0d97105d3$export$2e2bcd8739ae039).isValid(privateKey)) // Index at this point is already hardened, we can pass null as the hardened arg\n        return this._deriveWithNumber(index + 1);\n        let buffers = {\n            version: (0, $9f918c10ad4fef51$export$2e2bcd8739ae039).integerAsBuffer(this.network.xprivkey),\n            depth: (0, $9f918c10ad4fef51$export$2e2bcd8739ae039).integerAsSingleByteBuffer(this.depth + 1),\n            parentFingerPrint: this.fingerPrint,\n            childIndex: (0, $9f918c10ad4fef51$export$2e2bcd8739ae039).integerAsBuffer(index),\n            privateKey: privateKey,\n            chainCode: chainCode\n        };\n        let derived = $8fc74ca0a6995b3b$export$2e2bcd8739ae039._buildFromBuffers(buffers);\n        return new $8fc74ca0a6995b3b$export$2e2bcd8739ae039(derived);\n    }\n    _deriveFromString(path) {\n        if (!$8fc74ca0a6995b3b$export$2e2bcd8739ae039.isValidPath(path)) throw new (0, $824be92afb10ca74$export$b59b0d37c3755b05)(path);\n        const deriveKeys = (baseKey, indexes)=>{\n            return indexes.reduce((prev, idx)=>prev._deriveWithNumber(idx), baseKey);\n        };\n        let indexes = (0, $850698057fd6f95c$export$2e2bcd8739ae039).getDerivationIndexes(path);\n        return deriveKeys(this, indexes);\n    }\n    static _buildFromSeed(seed, network = (0, $a89918d61ea4dca0$export$f09b1917886389c3).defaultNetwork) {\n        if ((0, $c337f7a9455509cf$export$2e2bcd8739ae039).isHexa(seed)) seed = Buffer.from(seed, 'hex');\n        if (!Buffer.isBuffer(seed)) throw new (0, $824be92afb10ca74$export$c8ad90567a3adc29)(seed);\n        if (seed.length < this.MINIMUM_ENTROPY_BITS * this.BITS_TO_BYTES) throw new (0, $824be92afb10ca74$export$18f1c215e936cdfa)(seed);\n        if (seed.length > this.MAXIMUM_ENTROPY_BITS * this.BITS_TO_BYTES) throw new (0, $824be92afb10ca74$export$136e7f0d62b8ef6f)(seed);\n        let hash = (0, $62ca61b6ba036e1b$export$2e2bcd8739ae039).sha512hmac(seed, Buffer.from('Bitcoin seed'));\n        let buffers = {\n            version: (0, $9f918c10ad4fef51$export$2e2bcd8739ae039).integerAsBuffer(((0, $a89918d61ea4dca0$export$f09b1917886389c3).get(network) || (0, $a89918d61ea4dca0$export$f09b1917886389c3).defaultNetwork).xprivkey),\n            depth: (0, $9f918c10ad4fef51$export$2e2bcd8739ae039).integerAsSingleByteBuffer(0),\n            parentFingerPrint: (0, $9f918c10ad4fef51$export$2e2bcd8739ae039).integerAsBuffer(0),\n            childIndex: (0, $9f918c10ad4fef51$export$2e2bcd8739ae039).integerAsBuffer(0),\n            privateKey: hash.subarray(0, 32),\n            chainCode: hash.subarray(32, 64)\n        };\n        return this._buildFromBuffers(buffers);\n    }\n    static _buildFromObject(arg) {\n        return {\n            network: (0, $a89918d61ea4dca0$export$f09b1917886389c3).get(arg.network),\n            depth: arg.depth,\n            fingerPrint: (0, $9f918c10ad4fef51$export$2e2bcd8739ae039).integerAsBuffer(arg.fingerPrint),\n            parentFingerPrint: (0, $9f918c10ad4fef51$export$2e2bcd8739ae039).integerAsBuffer(arg.parentFingerPrint),\n            childIndex: arg.childIndex,\n            chainCode: Buffer.from(arg.chainCode, 'hex'),\n            xprivkey: arg.xprivkey,\n            checksum: (0, $9f918c10ad4fef51$export$2e2bcd8739ae039).integerAsBuffer(arg.checksum),\n            privateKey: (0, $9e7155c0d97105d3$export$2e2bcd8739ae039).fromString(arg.privateKey, arg.network)\n        };\n    }\n    static _buildFromMinimalObject(arg) {\n        let buffers = {\n            version: (0, $9f918c10ad4fef51$export$2e2bcd8739ae039).integerAsBuffer((0, $a89918d61ea4dca0$export$f09b1917886389c3).get(arg.network).xprivkey),\n            depth: (0, $9f918c10ad4fef51$export$2e2bcd8739ae039).integerAsSingleByteBuffer(arg.depth),\n            parentFingerPrint: (0, $9f918c10ad4fef51$export$2e2bcd8739ae039).integerAsBuffer(arg.parentFingerPrint),\n            childIndex: (0, $9f918c10ad4fef51$export$2e2bcd8739ae039).integerAsBuffer(arg.childIndex),\n            chainCode: Buffer.from(arg.chainCode, 'hex'),\n            privateKey: Buffer.from(arg.privateKey, 'hex')\n        };\n        return this._buildFromBuffers(buffers);\n    }\n    static _buildFromSerialized(xprivkey) {\n        let decoded = (0, $7daa49d6586b1e1a$export$2e2bcd8739ae039).decode(xprivkey);\n        let buffers = {\n            version: decoded.subarray((0, $850698057fd6f95c$export$2e2bcd8739ae039).VersionStart, (0, $850698057fd6f95c$export$2e2bcd8739ae039).VersionEnd),\n            depth: decoded.subarray((0, $850698057fd6f95c$export$2e2bcd8739ae039).DepthStart, (0, $850698057fd6f95c$export$2e2bcd8739ae039).DepthEnd),\n            parentFingerPrint: decoded.subarray((0, $850698057fd6f95c$export$2e2bcd8739ae039).ParentFingerPrintStart, (0, $850698057fd6f95c$export$2e2bcd8739ae039).ParentFingerPrintEnd),\n            childIndex: decoded.subarray((0, $850698057fd6f95c$export$2e2bcd8739ae039).ChildIndexStart, (0, $850698057fd6f95c$export$2e2bcd8739ae039).ChildIndexEnd),\n            chainCode: decoded.subarray((0, $850698057fd6f95c$export$2e2bcd8739ae039).ChainCodeStart, (0, $850698057fd6f95c$export$2e2bcd8739ae039).ChainCodeEnd),\n            privateKey: decoded.subarray(this.PrivateKeyStart, this.PrivateKeyEnd),\n            checksum: decoded.subarray(this.ChecksumStart, this.ChecksumEnd)\n        };\n        return this._buildFromBuffers(buffers);\n    }\n    /**\n   * Receives a object with buffers in all the properties and populates the\n   * internal structure\n   */ static _buildFromBuffers(arg) {\n        $8fc74ca0a6995b3b$export$2e2bcd8739ae039._validateBufferArguments(arg);\n        let sequence = [\n            arg.version,\n            arg.depth,\n            arg.parentFingerPrint,\n            arg.childIndex,\n            arg.chainCode,\n            Buffer.alloc(1),\n            arg.privateKey\n        ];\n        let concat = Buffer.concat(sequence);\n        if (!arg.checksum?.length) arg.checksum = (0, $7daa49d6586b1e1a$export$2e2bcd8739ae039).checksum(concat);\n        else if (arg.checksum.toString() !== (0, $7daa49d6586b1e1a$export$2e2bcd8739ae039).checksum(concat).toString()) throw new (0, $824be92afb10ca74$export$11fc854522c14d8d)(concat);\n        let network = (0, $a89918d61ea4dca0$export$f09b1917886389c3).get((0, $9f918c10ad4fef51$export$2e2bcd8739ae039).integerFromBuffer(arg.version));\n        let privateKey = (0, $9e7155c0d97105d3$export$2e2bcd8739ae039).from((0, $5aa97aebe18a7924$export$2e2bcd8739ae039).fromBuffer(arg.privateKey), network);\n        let publicKey = privateKey.toPublicKey();\n        return {\n            xprivkey: (0, $7daa49d6586b1e1a$export$2e2bcd8739ae039).encode(concat),\n            network: network,\n            depth: (0, $9f918c10ad4fef51$export$2e2bcd8739ae039).integerFromSingleByteBuffer(arg.depth),\n            privateKey: privateKey,\n            publicKey: publicKey,\n            fingerPrint: (0, $62ca61b6ba036e1b$export$2e2bcd8739ae039).sha256ripemd160(publicKey.toBuffer()).subarray(0, (0, $850698057fd6f95c$export$2e2bcd8739ae039).ParentFingerPrintSize),\n            chainCode: arg.chainCode,\n            childIndex: (0, $9f918c10ad4fef51$export$2e2bcd8739ae039).integerFromBuffer(arg.childIndex),\n            parentFingerPrint: arg.parentFingerPrint,\n            checksum: arg.checksum\n        };\n    }\n    static _validateBufferArguments(arg) {\n        const checkBuffer = (name, size)=>{\n            let buff = arg[name];\n            (0, $e44f707fde477092$export$2e2bcd8739ae039).validateArgument((0, $9f918c10ad4fef51$export$2e2bcd8739ae039).isBuffer(buff), name + ' argument is not a buffer');\n            (0, $e44f707fde477092$export$2e2bcd8739ae039).validateArgument(buff.length === size, name + ' has not the expected size: found ' + buff.length + ', expected ' + size);\n        };\n        checkBuffer('version', (0, $850698057fd6f95c$export$2e2bcd8739ae039).VersionSize);\n        checkBuffer('depth', (0, $850698057fd6f95c$export$2e2bcd8739ae039).DepthSize);\n        checkBuffer('parentFingerPrint', (0, $850698057fd6f95c$export$2e2bcd8739ae039).ParentFingerPrintSize);\n        checkBuffer('childIndex', (0, $850698057fd6f95c$export$2e2bcd8739ae039).ChildIndexSize);\n        checkBuffer('chainCode', (0, $850698057fd6f95c$export$2e2bcd8739ae039).ChainCodeSize);\n        checkBuffer('privateKey', this.PrivateKeySize);\n        if (arg.checksum?.length) checkBuffer('checksum', (0, $850698057fd6f95c$export$2e2bcd8739ae039).CheckSumSize);\n    }\n    static _generateRandomly(network) {\n        return this._buildFromSeed((0, $9f918c10ad4fef51$export$2e2bcd8739ae039).getRandomBuffer(64), network);\n    }\n    /**\n   * Will return the corresponding hd public key\n   *\n   * @returns An extended public key generated from the hd private key\n   */ getHDPublicKey() {\n        if (!this._hdPublicKey) this._hdPublicKey = new (0, $ef69ee312dbfbba6$export$2e2bcd8739ae039)(this);\n        return this._hdPublicKey;\n    }\n    /**\n   * Returns the console representation of this extended private key.\n   */ inspect() {\n        return `<HDPrivateKey: ${this}>`;\n    }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nclass $62ed62398e988143$export$2e2bcd8739ae039 {\n    static{\n        this.MAGIC_BYTES = Buffer.from('Bitcoin Signed Message:\\n');\n    }\n    constructor(message){\n        (0, $e44f707fde477092$export$2e2bcd8739ae039).validateArgument((0, $hgUW1$isString)(message), 'First argument should be a string');\n        this.message = message;\n    }\n    /**\n   * Will sign a message with a given private key.\n   *\n   * @param privateKey An instance of PrivateKey\n   * @returns A base64 encoded compact signature\n   */ sign(privateKey) {\n        let signature = this._sign(privateKey);\n        return signature.toCompact().toString('base64');\n    }\n    /**\n   * Will return a boolean of the signature is valid for a given nexa address.\n   * If it isn't valid, the specific reason is accessible via the \"error\" member.\n   *\n   * @param nexaAddress A nexa address\n   * @param signatureString A base64 encoded compact signature\n   */ verify(nexaAddress, signatureString) {\n        (0, $e44f707fde477092$export$2e2bcd8739ae039).validateArgument(!(0, $hgUW1$isNil)(nexaAddress), 'nexaAddress');\n        (0, $e44f707fde477092$export$2e2bcd8739ae039).validateArgument((0, $hgUW1$isString)(signatureString) && signatureString.length > 0, 'signatureString');\n        if ((0, $hgUW1$isString)(nexaAddress)) nexaAddress = (0, $92cd415860c918d9$export$2e2bcd8739ae039).fromString(nexaAddress);\n        let signature = (0, $369a157b63fbc3fd$export$2e2bcd8739ae039).fromCompact(Buffer.from(signatureString, 'base64'));\n        // recover the public key\n        let ecdsa = new (0, $1ef65db4b26d2b16$export$2e2bcd8739ae039)();\n        ecdsa.hashbuf = this._magicHash();\n        ecdsa.sig = signature;\n        let publicKey = ecdsa.toPublicKey();\n        let signatureAddress = (0, $92cd415860c918d9$export$2e2bcd8739ae039).fromPublicKey(publicKey, nexaAddress.network, nexaAddress.type);\n        // check that the recovered address and specified address match\n        if (nexaAddress.toString() !== signatureAddress.toString()) {\n            this.error = 'The signature did not match the message digest';\n            return false;\n        }\n        return this._verify(publicKey, signature);\n    }\n    _sign(privateKey) {\n        (0, $e44f707fde477092$export$2e2bcd8739ae039).validateArgument(privateKey instanceof (0, $9e7155c0d97105d3$export$2e2bcd8739ae039), 'First argument should be an instance of PrivateKey');\n        let hash = this._magicHash();\n        let ecdsa = new (0, $1ef65db4b26d2b16$export$2e2bcd8739ae039)();\n        ecdsa.hashbuf = hash;\n        ecdsa.privkey = privateKey;\n        ecdsa.pubkey = privateKey.toPublicKey();\n        ecdsa.signRandomK();\n        ecdsa.calcI();\n        return ecdsa.sig;\n    }\n    _magicHash() {\n        let prefix1 = (0, $35852622c8c617e8$export$2e2bcd8739ae039).varintBufNum($62ed62398e988143$export$2e2bcd8739ae039.MAGIC_BYTES.length);\n        let messageBuffer = Buffer.from(this.message);\n        let prefix2 = (0, $35852622c8c617e8$export$2e2bcd8739ae039).varintBufNum(messageBuffer.length);\n        let buf = Buffer.concat([\n            prefix1,\n            $62ed62398e988143$export$2e2bcd8739ae039.MAGIC_BYTES,\n            prefix2,\n            messageBuffer\n        ]);\n        let hash = (0, $62ca61b6ba036e1b$export$2e2bcd8739ae039).sha256sha256(buf);\n        return hash;\n    }\n    _verify(publicKey, signature) {\n        (0, $e44f707fde477092$export$2e2bcd8739ae039).validateArgument(publicKey instanceof (0, $246eb589bb078d6d$export$2e2bcd8739ae039), 'First argument should be an instance of PublicKey');\n        (0, $e44f707fde477092$export$2e2bcd8739ae039).validateArgument(signature instanceof (0, $369a157b63fbc3fd$export$2e2bcd8739ae039), 'Second argument should be an instance of Signature');\n        let hash = this._magicHash();\n        let verified = (0, $1ef65db4b26d2b16$export$2e2bcd8739ae039).verify(hash, signature, publicKey);\n        if (!verified) this.error = 'The signature was invalid';\n        return verified;\n    }\n    /**\n   * Instantiate a message from a message string\n   *\n   * @param str A string of the message\n   * @returns A new instance of a Message\n   */ static fromString(str) {\n        return new $62ed62398e988143$export$2e2bcd8739ae039(str);\n    }\n    /**\n   * Instantiate a message from JSON\n   *\n   * @param json An JSON string or Object with keys: message\n   * @returns A new instance of a Message\n   */ static fromJSON(json) {\n        if ((0, $c337f7a9455509cf$export$2e2bcd8739ae039).isValidJSON(json)) json = JSON.parse(json);\n        return new $62ed62398e988143$export$2e2bcd8739ae039(json.message);\n    }\n    /**\n   * @returns A plain object with the message information\n   */ toObject() {\n        return {\n            message: this.message\n        };\n    }\n    /**\n   * @returns A JSON representation as string of the message information\n   */ toJSON() {\n        return JSON.stringify(this.toObject());\n    }\n    /**\n   * Will return a the string representation of the message\n   */ toString() {\n        return this.message;\n    }\n    /**\n   * Will return a string formatted for the console\n   */ inspect() {\n        return `<Message: ${this}>`;\n    }\n}\n\n\nvar $a0743653d736276e$export$7b9ebdcfe3200497 = /*#__PURE__*/ function(GroupIdFlag) {\n    GroupIdFlag[GroupIdFlag[\"NONE\"] = 0] = \"NONE\";\n    GroupIdFlag[GroupIdFlag[\"COVENANT\"] = 1] = \"COVENANT\";\n    GroupIdFlag[GroupIdFlag[\"HOLDS_NEX\"] = 2] = \"HOLDS_NEX\";\n    GroupIdFlag[GroupIdFlag[\"GROUP_RESERVED_BITS\"] = 65532] = \"GROUP_RESERVED_BITS\";\n    GroupIdFlag[GroupIdFlag[\"DEFAULT\"] = 0] = \"DEFAULT\";\n    return GroupIdFlag;\n}({});\nvar $a0743653d736276e$export$8da1cb8322810fc2 = /*#__PURE__*/ function(GroupIdType) {\n    /** Legacy token */ GroupIdType[GroupIdType[\"LEGACY\"] = 88888888] = \"LEGACY\";\n    /** Token */ GroupIdType[GroupIdType[\"NRC1\"] = 88888890] = \"NRC1\";\n    /** NFT Collection */ GroupIdType[GroupIdType[\"NRC2\"] = 88888891] = \"NRC2\";\n    /** NFT that belongs to a collection */ GroupIdType[GroupIdType[\"NRC3\"] = 88888892] = \"NRC3\";\n    return GroupIdType;\n}({});\n// ts/js does not support enums with bigint, so we use const object for now\nconst $a0743653d736276e$var$AUTH_FLAGS = {\n    /** Is this a controller utxo (forces negative number in amount) */ AUTHORITY: 1n << 63n,\n    /** Can mint tokens */ MINT: 1n << 62n,\n    /** Can melt tokens */ MELT: 1n << 61n,\n    /** Can create authorities */ BATON: 1n << 60n,\n    /** Can change the redeem script */ RESCRIPT: 1n << 59n,\n    /** Can create subgroups */ SUBGROUP: 1n << 58n,\n    NONE: 0n,\n    ALL_FLAG_BITS: 0xffffn << 64n - 16n\n};\nconst $a0743653d736276e$var$ACTIVE_FLAG_BITS = $a0743653d736276e$var$AUTH_FLAGS.AUTHORITY | $a0743653d736276e$var$AUTH_FLAGS.MINT | $a0743653d736276e$var$AUTH_FLAGS.MELT | $a0743653d736276e$var$AUTH_FLAGS.BATON | $a0743653d736276e$var$AUTH_FLAGS.RESCRIPT | $a0743653d736276e$var$AUTH_FLAGS.SUBGROUP;\nclass $a0743653d736276e$export$2e2bcd8739ae039 {\n    static{\n        this.PARENT_GROUP_ID_SIZE = 32;\n    }\n    static{\n        this.authFlags = {\n            ...$a0743653d736276e$var$AUTH_FLAGS,\n            ACTIVE_FLAG_BITS: /** Has all permissions */ $a0743653d736276e$var$ACTIVE_FLAG_BITS,\n            RESERVED_FLAG_BITS: $a0743653d736276e$var$ACTIVE_FLAG_BITS & ~$a0743653d736276e$var$AUTH_FLAGS.ALL_FLAG_BITS\n        };\n    }\n    /**\n   * Calculate a group ID based on the provided inputs. Pass 'null' to opReturnScript if there is not\n   * going to be an OP_RETURN output in the transaction.\n   *\n   * @param outpoint The input outpoint hash hex or buffer\n   * @param opReturnScript opReturn output script\n   * @param authFlag group authority flag (use {@link GroupToken.authFlags})\n   * @param idFlag group id flag\n   * \n   * @returns Object with group id hash buffer and the nonce bigint\n   */ static findGroupId(outpoint, opReturnScript, authFlag, idFlag = 0) {\n        let hash;\n        let groupFlags = 0;\n        let nonce = 0n;\n        if ((0, $hgUW1$isString)(outpoint)) outpoint = Buffer.from(outpoint, 'hex').reverse();\n        if (opReturnScript instanceof (0, $90f45db77a786f2b$export$2e2bcd8739ae039)) opReturnScript = opReturnScript.toBuffer();\n        do {\n            let writer = new (0, $35852622c8c617e8$export$2e2bcd8739ae039)();\n            nonce += 1n;\n            nonce = nonce & ~this.authFlags.ALL_FLAG_BITS | authFlag;\n            writer.write(outpoint);\n            if (opReturnScript != null) writer.writeVarLengthBuf(opReturnScript);\n            writer.writeUInt64LEBN((0, $5aa97aebe18a7924$export$2e2bcd8739ae039).fromBigInt(nonce));\n            hash = (0, $62ca61b6ba036e1b$export$2e2bcd8739ae039).sha256sha256(writer.toBuffer());\n            groupFlags = hash[30] << 8 | hash[31];\n        }while (groupFlags != idFlag);\n        return {\n            hashBuffer: hash,\n            nonce: nonce\n        };\n    }\n    static _getGroupAddressBuffer(group) {\n        if ((0, $9f918c10ad4fef51$export$2e2bcd8739ae039).isBuffer(group)) return group;\n        if ((0, $c337f7a9455509cf$export$2e2bcd8739ae039).isHexa(group)) return Buffer.from(group, 'hex');\n        let groupAddress = new (0, $92cd415860c918d9$export$2e2bcd8739ae039)(group);\n        (0, $e44f707fde477092$export$2e2bcd8739ae039).validateArgument(groupAddress.isGroupIdentifierAddress(), 'Invalid group address');\n        return groupAddress.data;\n    }\n    /**\n   * Translates a group and additional data into a subgroup identifier\n   *\n   * @param group the group/token address or data buffer\n   * @param data the additional data\n   * \n   * @returns the subgroup id buffer\n   */ static generateSubgroupId(group, data) {\n        (0, $e44f707fde477092$export$2e2bcd8739ae039).validateArgument(!(0, $hgUW1$isUndefined)(group), 'group is missing');\n        (0, $e44f707fde477092$export$2e2bcd8739ae039).validateArgument(!(0, $hgUW1$isUndefined)(data), 'data is missing');\n        group = this._getGroupAddressBuffer(group);\n        if ((0, $9f918c10ad4fef51$export$2e2bcd8739ae039).isBuffer(data)) return Buffer.concat([\n            group,\n            data\n        ]);\n        if ((0, $hgUW1$isNumber)(data)) {\n            let bn = (0, $5aa97aebe18a7924$export$2e2bcd8739ae039).fromNumber(data).toBuffer({\n                size: 8,\n                endian: \"little\"\n            });\n            return Buffer.concat([\n                group,\n                bn\n            ]);\n        }\n        if ((0, $c337f7a9455509cf$export$2e2bcd8739ae039).isHexa(data)) return Buffer.concat([\n            group,\n            Buffer.from(data, 'hex')\n        ]);\n        return Buffer.concat([\n            group,\n            Buffer.from(data)\n        ]);\n    }\n    /**\n   * Extract the parent group from the provided subgroup.\n   * \n   * @remarks\n   * If the input is a group but not subgroup, the group itself return.\n   * \n   * @param subgroup the subgroup address or data buffer\n   * @returns the GroupId buffer\n   */ static getParentGroupId(subgroup) {\n        let buf = this._getGroupAddressBuffer(subgroup);\n        if (buf.length < this.PARENT_GROUP_ID_SIZE) throw new Error(\"Invalid subgroup\");\n        return Buffer.from(buf.subarray(0, 32));\n    }\n    /**\n   * Get group amount buffer from BigInt to include in output script\n   *\n   * @param amount\n   */ static getAmountBuffer(amount) {\n        let bw = new (0, $35852622c8c617e8$export$2e2bcd8739ae039)();\n        if (amount < 0n) {\n            let bn = (0, $5aa97aebe18a7924$export$2e2bcd8739ae039).fromBigInt(BigInt.asUintN(64, amount));\n            bw.writeUInt64LEBN(bn);\n        } else if (amount < 0x10000n) bw.writeUInt16LE(Number(amount));\n        else if (amount < 0x100000000n) bw.writeUInt32LE(Number(amount));\n        else {\n            let bn = (0, $5aa97aebe18a7924$export$2e2bcd8739ae039).fromBigInt(amount);\n            bw.writeUInt64LEBN(bn);\n        }\n        return bw.toBuffer();\n    }\n    /**\n   * Get group amount value from Buffer\n   *\n   * @param amountBuf the amount buffer\n   * @param unsigned return value as unsigned bigint, default to false\n   */ static getAmountValue(amountBuf, unsigned = false) {\n        let amount = (0, $5aa97aebe18a7924$export$2e2bcd8739ae039).fromBuffer(amountBuf, {\n            endian: 'little'\n        }).toBigInt();\n        return unsigned ? amount : BigInt.asIntN(64, amount);\n    }\n    /**\n   * @param authFlag the utxo group quantity/authority\n   * @returns the nonce\n   */ static getNonce(authFlag) {\n        authFlag = BigInt.asUintN(64, authFlag);\n        return authFlag & ~this.authFlags.ALL_FLAG_BITS;\n    }\n    /**\n   * Check if the group id has the flag\n   * \n   * @param groupId the group id address or data buffer\n   * @param groupIdFlag the group id flag\n   * @returns true if this group id has the flag\n   */ static hasIdFlag(groupId, groupIdFlag) {\n        groupId = this._getGroupAddressBuffer(groupId);\n        return groupId.length >= this.PARENT_GROUP_ID_SIZE ? ((groupId[30] << 8 | groupId[31]) & groupIdFlag) == groupIdFlag : false;\n    }\n    /**\n   * Check if this authority and flag fit to this group creation\n   * \n   * @param groupId the group id address or data buffer\n   * @param authFlag the output group quantity/authority\n   * @param groupIdFlag optional. the group id flag\n   * @returns true if this is group creation data\n   */ static isGroupCreation(groupId, authFlag, groupIdFlag = 0) {\n        groupId = this._getGroupAddressBuffer(groupId);\n        authFlag = BigInt.asUintN(64, authFlag);\n        let hasNonce = this.getNonce(authFlag) != 0n;\n        let isAuth = this.isAuthority(authFlag);\n        let hasFlag = this.hasIdFlag(groupId, groupIdFlag);\n        return isAuth && hasNonce && hasFlag;\n    }\n    /**\n   * Check if this group is is subgroup\n   * \n   * @param groupId the group id address or data buffer\n   * @returns true if this group id is subgroup\n   */ static isSubgroup(groupId) {\n        groupId = this._getGroupAddressBuffer(groupId);\n        return groupId.length > this.PARENT_GROUP_ID_SIZE;\n    }\n    /**\n   * Check if the group quantity/authority is Authority flag\n   * \n   * @param authFlag the output group quantity/authority\n   * @returns true if this is authority flag\n   */ static isAuthority(authFlag) {\n        return (authFlag & this.authFlags.AUTHORITY) == this.authFlags.AUTHORITY;\n    }\n    /**\n   * Check if the group quantity/authority allows minting\n   * \n   * @param authFlag the output group quantity/authority\n   * @returns true if this flag allows minting.\n   */ static allowsMint(authFlag) {\n        return (authFlag & ($a0743653d736276e$export$2e2bcd8739ae039.authFlags.AUTHORITY | $a0743653d736276e$export$2e2bcd8739ae039.authFlags.MINT)) == ($a0743653d736276e$export$2e2bcd8739ae039.authFlags.AUTHORITY | $a0743653d736276e$export$2e2bcd8739ae039.authFlags.MINT);\n    }\n    /**\n   * Check if the group quantity/authority allows melting\n   * \n   * @param authFlag the output group quantity/authority\n   * @returns true if this flag allows melting.\n   */ static allowsMelt(authFlag) {\n        return (authFlag & ($a0743653d736276e$export$2e2bcd8739ae039.authFlags.AUTHORITY | $a0743653d736276e$export$2e2bcd8739ae039.authFlags.MELT)) == ($a0743653d736276e$export$2e2bcd8739ae039.authFlags.AUTHORITY | $a0743653d736276e$export$2e2bcd8739ae039.authFlags.MELT);\n    }\n    /**\n   * Check if the group quantity/authority allows creation of new authorities\n   * \n   * @param authFlag the output group quantity/authority\n   * @returns true if this flag allows creation of authorities.\n   */ static allowsRenew(authFlag) {\n        return (authFlag & ($a0743653d736276e$export$2e2bcd8739ae039.authFlags.AUTHORITY | $a0743653d736276e$export$2e2bcd8739ae039.authFlags.BATON)) == ($a0743653d736276e$export$2e2bcd8739ae039.authFlags.AUTHORITY | $a0743653d736276e$export$2e2bcd8739ae039.authFlags.BATON);\n    }\n    /**\n   * Check if the group quantity/authority allows rescript\n   * \n   * @param authFlag the output group quantity/authority\n   * @returns true if this flag allows rescripting.\n   */ static allowsRescript(authFlag) {\n        return (authFlag & ($a0743653d736276e$export$2e2bcd8739ae039.authFlags.AUTHORITY | $a0743653d736276e$export$2e2bcd8739ae039.authFlags.RESCRIPT)) == ($a0743653d736276e$export$2e2bcd8739ae039.authFlags.AUTHORITY | $a0743653d736276e$export$2e2bcd8739ae039.authFlags.RESCRIPT);\n    }\n    /**\n   * Check if the group quantity/authority allows creation of subgroups\n   * \n   * @param authFlag the output group quantity/authority\n   * @returns true if this flag allows subgroups\n   */ static allowsSubgroup(authFlag) {\n        return (authFlag & ($a0743653d736276e$export$2e2bcd8739ae039.authFlags.AUTHORITY | $a0743653d736276e$export$2e2bcd8739ae039.authFlags.SUBGROUP)) == ($a0743653d736276e$export$2e2bcd8739ae039.authFlags.AUTHORITY | $a0743653d736276e$export$2e2bcd8739ae039.authFlags.SUBGROUP);\n    }\n    /**\n  * Verify token description document json signature\n  *\n  * @param jsonDoc the json TDD as string\n  * @param address nexa address that signed the doc\n  * @param signature the signature string. optional - if empty, extract from jsonDoc\n  * \n  * @returns true if signature match\n  */ static verifyJsonDoc(jsonDoc, address, signature) {\n        (0, $e44f707fde477092$export$2e2bcd8739ae039).validateArgument(!(0, $hgUW1$isEmpty)(jsonDoc), 'jsonDoc is missing');\n        (0, $e44f707fde477092$export$2e2bcd8739ae039).validateArgument(!(0, $hgUW1$isEmpty)(address), 'group is missing');\n        let json = jsonDoc.substring(jsonDoc.indexOf('{'), jsonDoc.lastIndexOf('}') + 1);\n        if ((0, $hgUW1$isUndefined)(signature) || (0, $hgUW1$isEmpty)(signature)) signature = JSON.parse(jsonDoc)[1];\n        let msg = new (0, $62ed62398e988143$export$2e2bcd8739ae039)(json);\n        return msg.verify(address, signature);\n    }\n    /**\n   * Sign token description document json\n   *\n   * @param jsonDoc the json TDD as string\n   * @param privKey private key to sign on the doc\n   * \n   * @returns the signature string\n   */ static signJsonDoc(jsonDoc, privKey) {\n        (0, $e44f707fde477092$export$2e2bcd8739ae039).validateArgument(!(0, $hgUW1$isEmpty)(jsonDoc), 'jsonDoc is missing');\n        let json = jsonDoc.substring(jsonDoc.indexOf('{'), jsonDoc.lastIndexOf('}') + 1); // trimming\n        let msg = new (0, $62ed62398e988143$export$2e2bcd8739ae039)(json);\n        return msg.sign(privKey);\n    }\n}\n\n\nclass $fea109eb8128bf4c$export$2e2bcd8739ae039 {\n    /**\n   * @param to destination address or public key\n   * @param groupId group id buffer or group address or hex id - only if its token output script\n   * @param groupAmount optional. quantity amount buffer or bigint - only if its token output script\n   * \n   * @returns a new pay to public key / script template output for the given address or public key\n   */ static buildScriptTemplateOut(to, groupId, groupAmount) {\n        (0, $e44f707fde477092$export$2e2bcd8739ae039).validateArgument(!(0, $hgUW1$isUndefined)(to), \"to\", \"must provide an argument\");\n        (0, $e44f707fde477092$export$2e2bcd8739ae039).validateArgument(to instanceof (0, $246eb589bb078d6d$export$2e2bcd8739ae039) || to instanceof (0, $92cd415860c918d9$export$2e2bcd8739ae039) || (0, $hgUW1$isString)(to), \"to\", \"must be address or pubkey\");\n        (0, $e44f707fde477092$export$2e2bcd8739ae039).validateArgument((0, $hgUW1$isNil)(groupId) && (0, $hgUW1$isNil)(groupAmount) || !(0, $hgUW1$isNil)(groupId) && !(0, $hgUW1$isNil)(groupAmount), \"group data\", \"both must present or both not present\");\n        to = this.parseAddress(to);\n        (0, $e44f707fde477092$export$2e2bcd8739ae039).validateArgument(to.isPayToScriptTemplate(), 'Invalid destination address (not a script template)');\n        if ((0, $hgUW1$isString)(groupId)) {\n            if ((0, $c337f7a9455509cf$export$2e2bcd8739ae039).isHexa(groupId)) groupId = Buffer.from(groupId, 'hex');\n            else {\n                let groupIdAddr = (0, $92cd415860c918d9$export$2e2bcd8739ae039).fromString(groupId);\n                (0, $e44f707fde477092$export$2e2bcd8739ae039).validateArgument(groupIdAddr.isGroupIdentifierAddress(), 'Invalid group id address (not a group)');\n                groupId = groupIdAddr.data;\n            }\n        } else if (groupId instanceof (0, $92cd415860c918d9$export$2e2bcd8739ae039)) {\n            (0, $e44f707fde477092$export$2e2bcd8739ae039).validateArgument(groupId.isGroupIdentifierAddress(), 'Invalid group id address (not a group)');\n            groupId = groupId.data;\n        }\n        if (typeof groupAmount === 'bigint') groupAmount = (0, $a0743653d736276e$export$2e2bcd8739ae039).getAmountBuffer(groupAmount);\n        let bfr = new (0, $12fea2c2eb591556$export$2e2bcd8739ae039)(to.data).readVarLengthBuffer();\n        let s = (0, $90f45db77a786f2b$export$2e2bcd8739ae039).fromBuffer(bfr);\n        if (!(0, $hgUW1$isNil)(groupId) && !(0, $hgUW1$isNil)(groupAmount)) {\n            (0, $e44f707fde477092$export$2e2bcd8739ae039).validateArgument((0, $9f918c10ad4fef51$export$2e2bcd8739ae039).isBuffer(groupId), 'groupId');\n            (0, $e44f707fde477092$export$2e2bcd8739ae039).validateArgument((0, $9f918c10ad4fef51$export$2e2bcd8739ae039).isBuffer(groupAmount), 'groupAmount');\n            // replace OP_0 with group data\n            s.chunks = s.chunks.slice(1);\n            s.prepend(groupAmount).prepend(groupId);\n        }\n        return s;\n    }\n    /**\n   * @param data the data to embed in the output\n   * @param encoding the type of encoding of the string\n   * \n   * @returns a new OP_RETURN script with data\n   */ static buildDataOut(data, encoding) {\n        (0, $e44f707fde477092$export$2e2bcd8739ae039).validateArgument((0, $hgUW1$isUndefined)(data) || (0, $hgUW1$isString)(data) || (0, $9f918c10ad4fef51$export$2e2bcd8739ae039).isBuffer(data) || data instanceof (0, $90f45db77a786f2b$export$2e2bcd8739ae039), \"data\");\n        if ((0, $hgUW1$isString)(data)) data = Buffer.from(data, encoding);\n        let s = (0, $90f45db77a786f2b$export$2e2bcd8739ae039).empty().add((0, $92c0719d4ab9ac45$export$393941f88fd16991).OP_RETURN);\n        if (!(0, $hgUW1$isUndefined)(data)) s.add(data);\n        return s;\n    }\n    /**\n   * @param address the pay to address\n   * @param groupId optional. only for p2st addresses\n   * @param groupAmount optional. only for p2st addresses\n   * \n   * @return an output script built from the address\n   */ static buildOutFromAddress(address, groupId, groupAmount) {\n        if ((0, $hgUW1$isString)(address)) address = (0, $92cd415860c918d9$export$2e2bcd8739ae039).fromString(address);\n        if (address.isPayToPublicKeyHash()) return this.buildPublicKeyHashOut(address);\n        else if (address.isPayToScriptTemplate()) return this.buildScriptTemplateOut(address, groupId, groupAmount);\n        throw new Error(`Invalid address type: ${address.type}`);\n    }\n    /**\n   * Builds a scriptSig (a script for an input) that signs a script template\n   * output script.\n   *\n   * @param template the template script or OP_1 for well-known\n   * @param constraint the constraint script or OP_FALSE\n   * @param satisfier the satisfier script or buffer\n   */ static buildScriptTemplateIn(template, constraint, satisfier) {\n        (0, $e44f707fde477092$export$2e2bcd8739ae039).validateArgument(template instanceof (0, $90f45db77a786f2b$export$2e2bcd8739ae039) || template === (0, $92c0719d4ab9ac45$export$393941f88fd16991).OP_1, \"template\");\n        (0, $e44f707fde477092$export$2e2bcd8739ae039).validateArgument(constraint instanceof (0, $90f45db77a786f2b$export$2e2bcd8739ae039) || constraint === (0, $92c0719d4ab9ac45$export$393941f88fd16991).OP_FALSE, \"constraint\");\n        (0, $e44f707fde477092$export$2e2bcd8739ae039).validateArgument(satisfier instanceof (0, $90f45db77a786f2b$export$2e2bcd8739ae039) || (0, $9f918c10ad4fef51$export$2e2bcd8739ae039).isBuffer(satisfier), \"satisfier\");\n        let script = (0, $90f45db77a786f2b$export$2e2bcd8739ae039).empty();\n        if (template instanceof (0, $90f45db77a786f2b$export$2e2bcd8739ae039)) script.add(template.toBuffer());\n        if (constraint instanceof (0, $90f45db77a786f2b$export$2e2bcd8739ae039)) script.add(constraint.toBuffer());\n        if ((0, $9f918c10ad4fef51$export$2e2bcd8739ae039).isBuffer(satisfier)) satisfier = (0, $90f45db77a786f2b$export$2e2bcd8739ae039).fromBuffer(satisfier);\n        script.add(satisfier);\n        return script;\n    }\n    static parseAddress(address, type) {\n        if ((0, $hgUW1$isString)(address)) return (0, $92cd415860c918d9$export$2e2bcd8739ae039).fromString(address);\n        else if (address instanceof (0, $246eb589bb078d6d$export$2e2bcd8739ae039)) return (0, $92cd415860c918d9$export$2e2bcd8739ae039).fromPublicKey(address, address.network, type);\n        return address;\n    }\n    /**\n   * @param to - destination address or public key\n   * \n   * @returns a new pay to public key hash output for the given\n   * address or public key\n   */ static buildPublicKeyHashOut(to) {\n        (0, $e44f707fde477092$export$2e2bcd8739ae039).validateArgument(!(0, $hgUW1$isUndefined)(to), \"to\", \"must provide an argument\");\n        (0, $e44f707fde477092$export$2e2bcd8739ae039).validateArgument(to instanceof (0, $246eb589bb078d6d$export$2e2bcd8739ae039) || to instanceof (0, $92cd415860c918d9$export$2e2bcd8739ae039) || (0, $hgUW1$isString)(to), \"to\", \"must be address or pubkey\");\n        to = this.parseAddress(to, (0, $c889a5b1bdeeb100$export$189c6ba3eaa96ac2).PayToPublicKeyHash);\n        return (0, $90f45db77a786f2b$export$2e2bcd8739ae039).empty().add((0, $92c0719d4ab9ac45$export$393941f88fd16991).OP_DUP).add((0, $92c0719d4ab9ac45$export$393941f88fd16991).OP_HASH160).add(to.data).add((0, $92c0719d4ab9ac45$export$393941f88fd16991).OP_EQUALVERIFY).add((0, $92c0719d4ab9ac45$export$393941f88fd16991).OP_CHECKSIG);\n    }\n    /**\n   * Builds a scriptSig (a script for an input) that signs a public key hash\n   * output script. (SIGHASH_ALL only)\n   *\n   * @param publicKey\n   * @param signature a Signature object, or the signature in DER canonical encoding\n   */ static buildPublicKeyHashIn(publicKey, signature) {\n        (0, $e44f707fde477092$export$2e2bcd8739ae039).validateArgument(publicKey instanceof (0, $246eb589bb078d6d$export$2e2bcd8739ae039), \"publicKey\");\n        (0, $e44f707fde477092$export$2e2bcd8739ae039).validateArgument(signature instanceof (0, $369a157b63fbc3fd$export$2e2bcd8739ae039) || (0, $9f918c10ad4fef51$export$2e2bcd8739ae039).isBuffer(signature), \"signature\");\n        if (signature instanceof (0, $369a157b63fbc3fd$export$2e2bcd8739ae039)) signature = signature.toBuffer();\n        let script = (0, $90f45db77a786f2b$export$2e2bcd8739ae039).empty().add(signature).add(publicKey.toBuffer());\n        return script;\n    }\n    /**\n   * Build OP_RETURN output script for Legacy Token Description\n   *\n   * @param ticker the ticker as utf8.\n   * @param name the ticker as utf8.\n   * @param docUrl optional. the description document url\n   * @param docHash optional. the document hash hex.\n   * @param decimals optional. the decimals for the token amount.\n   * \n   * @throws Error if docUrl provided and is invalid\n   * \n   * @returns the output OP_RETURN script\n   */ static buildTokenDescriptionLegacy(ticker, name, docUrl, docHash, decimals) {\n        (0, $e44f707fde477092$export$2e2bcd8739ae039).validateArgument((0, $hgUW1$isString)(ticker) && (0, $hgUW1$inRange)(ticker.length, 1, 9), 'Ticker must be between 1-8 chars');\n        (0, $e44f707fde477092$export$2e2bcd8739ae039).validateArgument((0, $hgUW1$isString)(name) && !(0, $hgUW1$isEmpty)(name), 'Name is missing');\n        let s = (0, $90f45db77a786f2b$export$2e2bcd8739ae039).empty().add((0, $92c0719d4ab9ac45$export$393941f88fd16991).OP_RETURN).add((0, $5aa97aebe18a7924$export$2e2bcd8739ae039).fromNumber((0, $a0743653d736276e$export$8da1cb8322810fc2).LEGACY).toScriptNumBuffer()).add(Buffer.from(ticker)).add(Buffer.from(name));\n        if (docUrl && docUrl.length > 0) {\n            new URL(docUrl); // exception thrown if not valide\n            (0, $e44f707fde477092$export$2e2bcd8739ae039).validateArgument((0, $hgUW1$isString)(docHash) && !(0, $hgUW1$isEmpty)(docHash), 'You must include document hash if you set document url');\n            s.add(Buffer.from(docUrl)).add(Buffer.from(docHash, 'hex').reverse());\n        } else s.add((0, $92c0719d4ab9ac45$export$393941f88fd16991).OP_FALSE).add((0, $92c0719d4ab9ac45$export$393941f88fd16991).OP_FALSE);\n        if ((0, $hgUW1$isNumber)(decimals)) {\n            (0, $e44f707fde477092$export$2e2bcd8739ae039).validateArgument((0, $hgUW1$inRange)(decimals, 0, 19), 'decimals must be between 0 and 18');\n            s.add(decimals <= 16 ? (0, $92c0719d4ab9ac45$export$2e2bcd8739ae039).smallInt(decimals) : (0, $5aa97aebe18a7924$export$2e2bcd8739ae039).fromNumber(decimals).toScriptNumBuffer());\n        }\n        return s;\n    }\n    /**\n   * Build OP_RETURN output script for NRC1 Token Description\n   *\n   * @param ticker the ticker as utf8.\n   * @param name the ticker as utf8.\n   * @param zipURL the zip file url.\n   * @param zipHash the zip file hash hex.\n   * @param decimals the decimals for the token amount.\n   * \n   * @throws Error if zipURL invalid\n   * \n   * @returns the output OP_RETURN script\n   */ static buildTokenDescription(ticker, name, zipURL, zipHash, decimals) {\n        (0, $e44f707fde477092$export$2e2bcd8739ae039).validateArgument((0, $hgUW1$isString)(ticker) && (0, $hgUW1$inRange)(ticker.length, 2, 9), 'Ticker must be 2-8 chars');\n        (0, $e44f707fde477092$export$2e2bcd8739ae039).validateArgument((0, $hgUW1$isString)(name) && (0, $hgUW1$inRange)(name.length, 2, 26), 'Name must be 2-25 chars');\n        (0, $e44f707fde477092$export$2e2bcd8739ae039).validateArgument((0, $hgUW1$isString)(zipURL) && !(0, $hgUW1$isEmpty)(zipURL), 'Zip URL is missing');\n        (0, $e44f707fde477092$export$2e2bcd8739ae039).validateArgument((0, $hgUW1$isString)(zipHash) && !(0, $hgUW1$isEmpty)(zipHash), 'Zip hash is missing');\n        (0, $e44f707fde477092$export$2e2bcd8739ae039).validateArgument((0, $hgUW1$isNumber)(decimals) && (0, $hgUW1$inRange)(decimals, 0, 19), 'Decimals must be a number 0-18');\n        new URL(zipURL); // exception thrown if not valid\n        return (0, $90f45db77a786f2b$export$2e2bcd8739ae039).empty().add((0, $92c0719d4ab9ac45$export$393941f88fd16991).OP_RETURN).add((0, $5aa97aebe18a7924$export$2e2bcd8739ae039).fromNumber((0, $a0743653d736276e$export$8da1cb8322810fc2).NRC1).toScriptNumBuffer()).add(Buffer.from(ticker)).add(Buffer.from(name)).add(Buffer.from(zipURL)).add(Buffer.from(zipHash, 'hex').reverse()).add(decimals <= 16 ? (0, $92c0719d4ab9ac45$export$2e2bcd8739ae039).smallInt(decimals) : (0, $5aa97aebe18a7924$export$2e2bcd8739ae039).fromNumber(decimals).toScriptNumBuffer());\n    }\n    /**\n   * Build OP_RETURN output script for an NFT Collection Description (NRC2)\n   *\n   * @param ticker the ticker as utf8.\n   * @param name the ticker as utf8.\n   * @param zipURL the zip file url.\n   * @param zipHash the zip file hash hex.\n   * \n   * @throws Error if zipURL invalid \n   * \n   * @returns the output OP_RETURN script\n   */ static buildNFTCollectionDescription(ticker, name, zipURL, zipHash) {\n        (0, $e44f707fde477092$export$2e2bcd8739ae039).validateArgument((0, $hgUW1$isString)(ticker) && (0, $hgUW1$inRange)(ticker.length, 2, 9), 'Ticker must be 2-8 chars');\n        (0, $e44f707fde477092$export$2e2bcd8739ae039).validateArgument((0, $hgUW1$isString)(name) && (0, $hgUW1$inRange)(name.length, 2, 26), 'Name must be 2-25 chars');\n        (0, $e44f707fde477092$export$2e2bcd8739ae039).validateArgument((0, $hgUW1$isString)(zipURL) && !(0, $hgUW1$isEmpty)(zipURL), 'Zip URL is missing');\n        (0, $e44f707fde477092$export$2e2bcd8739ae039).validateArgument((0, $hgUW1$isString)(zipHash) && !(0, $hgUW1$isEmpty)(zipHash), 'Zip hash is missing');\n        new URL(zipURL); // exception thrown if not valid\n        return (0, $90f45db77a786f2b$export$2e2bcd8739ae039).empty().add((0, $92c0719d4ab9ac45$export$393941f88fd16991).OP_RETURN).add((0, $5aa97aebe18a7924$export$2e2bcd8739ae039).fromNumber((0, $a0743653d736276e$export$8da1cb8322810fc2).NRC2).toScriptNumBuffer()).add(Buffer.from(ticker)).add(Buffer.from(name)).add(Buffer.from(zipURL)).add(Buffer.from(zipHash, 'hex').reverse()).add((0, $92c0719d4ab9ac45$export$2e2bcd8739ae039).smallInt(0));\n    }\n    /**\n   * Build OP_RETURN output script for an NFT that belongs to an NFT Collection (NRC3)\n   *\n   * @param zipURL the zip file url.\n   * @param zipHash the zip file hash hex.\n   * \n   * @throws Error if zipURL invalid \n   * \n   * @returns the output OP_RETURN script\n   */ static buildNFTDescription(zipURL, zipHash) {\n        (0, $e44f707fde477092$export$2e2bcd8739ae039).validateArgument((0, $hgUW1$isString)(zipURL) && !(0, $hgUW1$isEmpty)(zipURL), 'Zip URL is missing');\n        (0, $e44f707fde477092$export$2e2bcd8739ae039).validateArgument((0, $hgUW1$isString)(zipHash) && !(0, $hgUW1$isEmpty)(zipHash), 'Zip hash is missing');\n        new URL(zipURL); // exception thrown if not valid\n        return (0, $90f45db77a786f2b$export$2e2bcd8739ae039).empty().add((0, $92c0719d4ab9ac45$export$393941f88fd16991).OP_RETURN).add((0, $5aa97aebe18a7924$export$2e2bcd8739ae039).fromNumber((0, $a0743653d736276e$export$8da1cb8322810fc2).NRC3).toScriptNumBuffer()).add(Buffer.from(zipURL)).add(Buffer.from(zipHash, 'hex').reverse());\n    }\n}\n\n\n\n\n\n\n\n\n\nvar $e50a883097cd2090$export$ae38be9ef660d12e = /*#__PURE__*/ function(InputSighashType) {\n    InputSighashType[InputSighashType[\"ALL\"] = 0] = \"ALL\";\n    InputSighashType[InputSighashType[\"FIRSTN\"] = 1] = \"FIRSTN\";\n    InputSighashType[InputSighashType[\"THISIN\"] = 2] = \"THISIN\";\n    InputSighashType[InputSighashType[\"LAST_VALID\"] = 2] = \"LAST_VALID\";\n    return InputSighashType;\n}({});\nvar $e50a883097cd2090$export$cc0d5ed6c4786851 = /*#__PURE__*/ function(OutputSighashType) {\n    OutputSighashType[OutputSighashType[\"ALL\"] = 0] = \"ALL\";\n    OutputSighashType[OutputSighashType[\"FIRSTN\"] = 1] = \"FIRSTN\";\n    OutputSighashType[OutputSighashType[\"TWO\"] = 2] = \"TWO\";\n    OutputSighashType[OutputSighashType[\"LAST_VALID\"] = 2] = \"LAST_VALID\";\n    return OutputSighashType;\n}({});\nclass $e50a883097cd2090$export$2e2bcd8739ae039 {\n    static{\n        /**\n   * the longest sighashtype in bytes \n   * (for use in calculating tx fees by tx length estimation) \n   */ this.MAX_SIZE = 4;\n    }\n    constructor(){\n        this.inType = 0;\n        this.outType = 0;\n        this.inData = [];\n        this.outData = [];\n    }\n    /**\n   * creates a sighash that is the most restrictive -- it signs all inputs and outputs\n   */ static get ALL() {\n        return new $e50a883097cd2090$export$2e2bcd8739ae039();\n    }\n    hasAll() {\n        return this.inType == 0 && this.outType == 0;\n    }\n    isInvalid() {\n        return this.inType > 2 || this.outType > 2;\n    }\n    /** \n   * Anyone can pay signs only the current input, so other entities can add addtl inputs to complete the partial tx\n   */ setAnyoneCanPay() {\n        this.inType = 2;\n        this.inData = [];\n        return this;\n    }\n    /**\n   * Include only the n first inputs in the preimage sighash\n   * \n   * @param n The first inputs to include\n   */ setFirstNIn(n) {\n        (0, $e44f707fde477092$export$2e2bcd8739ae039).validateArgument(n >= 0 && n < 256, \"n\", \"out of range (0-255).\");\n        this.inType = 1;\n        this.inData = [\n            n\n        ];\n        return this;\n    }\n    /**\n   * Include only the n first outputs in the preimage sighash\n   * \n   * @param n The first outputs to include\n   */ setFirstNOut(n) {\n        (0, $e44f707fde477092$export$2e2bcd8739ae039).validateArgument(n >= 0 && n < 256, \"n\", \"out of range (0-255).\");\n        this.outType = 1;\n        this.outData = [\n            n\n        ];\n        return this;\n    }\n    /**\n   * Include specific 2 outputs in the preimage sighash\n   * \n   * @param a The 1st output to include\n   * @param b The 2nd output to include\n   */ set2Out(a, b) {\n        (0, $e44f707fde477092$export$2e2bcd8739ae039).validateArgument(a >= 0 && a < 256, \"a\", \"out of range (0-255).\");\n        (0, $e44f707fde477092$export$2e2bcd8739ae039).validateArgument(b >= 0 && b < 256, \"b\", \"out of range (0-255).\");\n        this.outType = 2;\n        this.outData = [\n            a,\n            b\n        ];\n        return this;\n    }\n    toBuffer() {\n        if (this.hasAll()) return Buffer.alloc(0);\n        let bw = new (0, $35852622c8c617e8$export$2e2bcd8739ae039)();\n        let sigtype = this.inType << 4 | this.outType;\n        bw.writeUInt8(sigtype);\n        switch(this.inType){\n            case 1:\n                (0, $e44f707fde477092$export$2e2bcd8739ae039).validateState(this.inData.length > 0, \"Missing input data\");\n                bw.writeUInt8(this.inData[0]);\n                break;\n            case 2:\n            case 0:\n                break;\n            default:\n                throw new Error(\"Malformed sighash type\");\n        }\n        switch(this.outType){\n            case 2:\n                (0, $e44f707fde477092$export$2e2bcd8739ae039).validateState(this.outData.length > 1, \"Missing output data\");\n                bw.writeUInt8(this.outData[0]);\n                bw.writeUInt8(this.outData[1]);\n                break;\n            case 1:\n                (0, $e44f707fde477092$export$2e2bcd8739ae039).validateState(this.outData.length > 0, \"Missing output data\");\n                bw.writeUInt8(this.outData[0]);\n                break;\n            case 0:\n                break;\n            default:\n                throw new Error(\"Malformed sighash type\");\n        }\n        return bw.toBuffer();\n    }\n    static fromBuffer(buf) {\n        (0, $e44f707fde477092$export$2e2bcd8739ae039).validateArgument((0, $9f918c10ad4fef51$export$2e2bcd8739ae039).isBuffer(buf), \"buf\");\n        if (buf.length == 0) return this.ALL;\n        let sighash = new $e50a883097cd2090$export$2e2bcd8739ae039();\n        let br = new (0, $12fea2c2eb591556$export$2e2bcd8739ae039)(buf);\n        let type = br.readUInt8();\n        sighash.outType = type & 0x0f;\n        sighash.inType = type >> 4;\n        if (sighash.isInvalid()) throw new Error(\"Invalid sighash buffer\");\n        const safeRead = (br)=>{\n            if (br.finished()) throw new Error(\"Invalid sighash buffer\");\n            return br.readUInt8();\n        };\n        if (sighash.inType == 1) sighash.inData.push(safeRead(br));\n        if (sighash.outType == 1) sighash.outData.push(safeRead(br));\n        else if (sighash.outType == 2) {\n            sighash.outData.push(safeRead(br));\n            sighash.outData.push(safeRead(br));\n        }\n        if (!br.finished()) throw new Error(\"Invalid sighash buffer\");\n        return sighash;\n    }\n    /**\n   * Convert to a hex representation of the sighash\n   */ toHex() {\n        return this.toBuffer().toString('hex');\n    }\n    /**\n   * Create sighash for hex represantation\n   * @see toHex \n   */ static fromHex(hex) {\n        if (typeof hex === 'string' && hex.length === 0) return this.ALL;\n        (0, $e44f707fde477092$export$2e2bcd8739ae039).validateArgument((0, $c337f7a9455509cf$export$2e2bcd8739ae039).isHexa(hex), \"Not a hex string\");\n        return this.fromBuffer(Buffer.from(hex, 'hex'));\n    }\n    /** \n   * Convert to a human readable representation of the sighash\n   */ toString() {\n        if (this.hasAll()) return \"ALL\";\n        let ret = \"\";\n        switch(this.inType){\n            case 0:\n                ret += \"ALL_IN\";\n                break;\n            case 2:\n                ret += \"THIS_IN\";\n                break;\n            case 1:\n                ret += `FIRST_${this.inData[0]}_IN`;\n                break;\n            default:\n                return \"INVALID\";\n        }\n        ret += \"|\";\n        switch(this.outType){\n            case 0:\n                ret += \"ALL_OUT\";\n                break;\n            case 2:\n                ret += `${this.outData[0]}_${this.outData[1]}_OUT`;\n                break;\n            case 1:\n                ret += `FIRST_${this.outData[0]}_OUT`;\n                break;\n            default:\n                return \"INVALID\";\n        }\n        return ret;\n    }\n    /**\n   * Create sighash from human readable represantation\n   * @see toString \n   */ static fromString(str) {\n        (0, $e44f707fde477092$export$2e2bcd8739ae039).validateArgument((0, $hgUW1$isString)(str), \"Not a string\");\n        if (str == \"ALL\") return this.ALL;\n        (0, $e44f707fde477092$export$2e2bcd8739ae039).validateArgument(str.includes(\"|\"), \"Not a sighash string\");\n        let sighash = new $e50a883097cd2090$export$2e2bcd8739ae039();\n        let [inStr, outStr] = str.split(\"|\");\n        if (inStr == \"THIS_IN\") sighash.inType = 2;\n        else if (inStr != \"ALL_IN\") {\n            let match = inStr.match(/^FIRST_(\\d+)_IN$/);\n            (0, $e44f707fde477092$export$2e2bcd8739ae039).validateState(!(0, $hgUW1$isNil)(match), \"Not a sighash string\");\n            sighash.setFirstNIn(parseInt(match[1]));\n        }\n        if (outStr != \"ALL_OUT\") {\n            let fnMatch = outStr.match(/^FIRST_(\\d+)_OUT$/);\n            let twMatch = outStr.match(/^(\\d+)_(\\d+)_OUT$/);\n            if (fnMatch) sighash.setFirstNOut(parseInt(fnMatch[1]));\n            else if (twMatch) sighash.set2Out(parseInt(twMatch[1]), parseInt(twMatch[2]));\n            else throw new Error(\"Not a sighash string\");\n        }\n        return sighash;\n    }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar $98955c312257c252$export$be94d7b677b041dd = /*#__PURE__*/ function(OutputType) {\n    OutputType[OutputType[\"SATOSCRIPT\"] = 0] = \"SATOSCRIPT\";\n    OutputType[OutputType[\"TEMPLATE\"] = 1] = \"TEMPLATE\";\n    OutputType[OutputType[\"INFER\"] = 32768] = \"INFER\"; // Not a real type: implies the type should be infered from the script at construction time\n    return OutputType;\n}({});\nclass $98955c312257c252$export$2e2bcd8739ae039 {\n    constructor(value, scriptPubKey, type = 32768){\n        this.toJSON = this.toObject;\n        this.type = type;\n        this.value = value;\n        this.scriptPubKey = scriptPubKey;\n    }\n    get value() {\n        return this._value;\n    }\n    set value(sats) {\n        sats = BigInt(sats);\n        (0, $e44f707fde477092$export$2e2bcd8739ae039).validateArgument((0, $c337f7a9455509cf$export$2e2bcd8739ae039).isNaturalBigInt(sats), \"Output value is not a natural bigint\");\n        this._value = sats;\n    }\n    get scriptPubKey() {\n        return this._scriptPubKey;\n    }\n    set scriptPubKey(script) {\n        if (!(0, $hgUW1$isUndefined)(this._scriptPubKey)) this.type = 32768;\n        if (script instanceof (0, $90f45db77a786f2b$export$2e2bcd8739ae039)) this._scriptPubKey = script;\n        else if ((0, $hgUW1$isString)(script)) this._scriptPubKey = (0, $90f45db77a786f2b$export$2e2bcd8739ae039).fromString(script);\n        else throw new TypeError('Invalid argument type: script');\n        // in case we replace script or type wasn't passed in c'tor, we need to define the output type\n        if (this.type == 32768) this.type = this._scriptPubKey.isPublicKeyTemplateOut() || this._scriptPubKey.isScriptTemplateOut() ? 1 : 0;\n    }\n    invalidValue() {\n        if (this.value > BigInt(Number.MAX_SAFE_INTEGER)) return 'transaction txout value greater than max safe integer';\n        if (this.value < 0n) return 'transaction txout negative';\n        return false;\n    }\n    toObject() {\n        return {\n            type: this.type,\n            value: this.value.toString(),\n            scriptPubKey: this.scriptPubKey.toHex()\n        };\n    }\n    static fromObject(data) {\n        (0, $e44f707fde477092$export$2e2bcd8739ae039).validateArgument((0, $hgUW1$isObject)(data), \"data\", \"Unrecognized argument for Output\");\n        return new $98955c312257c252$export$2e2bcd8739ae039(data.value, data.scriptPubKey, data.type);\n    }\n    inspect() {\n        return `<Output (type: ${this.type}) (${this.value.toString()} sats) ${this.scriptPubKey.inspect()}>`;\n    }\n    static fromBufferReader(br) {\n        let type = br.readVarintNum();\n        let value = br.readUInt64LEBN();\n        let size = br.readVarintNum();\n        let scriptBuf = size !== 0 ? br.read(size) : Buffer.from([]);\n        return new $98955c312257c252$export$2e2bcd8739ae039(value.toBigInt(), (0, $90f45db77a786f2b$export$2e2bcd8739ae039).fromBuffer(scriptBuf), type);\n    }\n    toBufferWriter(writer) {\n        if (!writer) writer = new (0, $35852622c8c617e8$export$2e2bcd8739ae039)();\n        writer.writeUInt8(this.type);\n        writer.writeUInt64LEBN((0, $5aa97aebe18a7924$export$2e2bcd8739ae039).fromBigInt(this.value));\n        writer.writeVarLengthBuf(this.scriptPubKey.toBuffer());\n        return writer;\n    }\n}\n\n\n\n\n\n\nvar $9b92277fa5d35484$export$476dfc2401bc286b = /*#__PURE__*/ function(InputType) {\n    InputType[InputType[\"UTXO\"] = 0] = \"UTXO\";\n    InputType[InputType[\"READ_ONLY\"] = 1] = \"READ_ONLY\";\n    return InputType;\n}({});\nclass $9b92277fa5d35484$export$2e2bcd8739ae039 {\n    static{\n        this.SEQUENCE_FINAL = 0xffffffff;\n    }\n    constructor(params){\n        this.toJSON = this.toObject;\n        if (params) this._set(params);\n    }\n    get scriptSig() {\n        return this._scriptSig;\n    }\n    set scriptSig(script) {\n        if (script instanceof (0, $90f45db77a786f2b$export$2e2bcd8739ae039)) this._scriptSig = script;\n        else if ((0, $hgUW1$isString)(script)) this._scriptSig = (0, $90f45db77a786f2b$export$2e2bcd8739ae039).fromString(script);\n        else throw new TypeError('Invalid argument type: script');\n    }\n    _set(params) {\n        this.type = 0;\n        if ((0, $hgUW1$isNil)(params.scriptSig)) throw new TypeError('Need a script to create an input');\n        this.scriptSig = params.scriptSig;\n        this.outpoint = (0, $9f918c10ad4fef51$export$2e2bcd8739ae039).isBuffer(params.outpoint) ? params.outpoint : Buffer.from(params.outpoint, 'hex');\n        this.amount = BigInt(params.amount);\n        this.sequenceNumber = (0, $hgUW1$isUndefined)(params.sequenceNumber) ? $9b92277fa5d35484$export$2e2bcd8739ae039.SEQUENCE_FINAL : params.sequenceNumber;\n        if (params.output) this.output = params.output instanceof (0, $98955c312257c252$export$2e2bcd8739ae039) ? params.output : (0, $98955c312257c252$export$2e2bcd8739ae039).fromObject(params.output);\n    }\n    static fromObject(obj) {\n        (0, $e44f707fde477092$export$2e2bcd8739ae039).validateArgument((0, $hgUW1$isObject)(obj), \"obj\");\n        return new $9b92277fa5d35484$export$2e2bcd8739ae039(obj);\n    }\n    toObject() {\n        return {\n            type: this.type,\n            outpoint: this.outpoint.toString('hex'),\n            amount: this.amount.toString(),\n            sequenceNumber: this.sequenceNumber,\n            scriptSig: this.scriptSig.toHex(),\n            output: this.output?.toObject()\n        };\n    }\n    static fromBufferReader(br) {\n        let input = new $9b92277fa5d35484$export$2e2bcd8739ae039();\n        input.type = br.readUInt8();\n        input.outpoint = br.readReverse(32);\n        input.scriptSig = (0, $90f45db77a786f2b$export$2e2bcd8739ae039).fromBuffer(br.readVarLengthBuffer());\n        input.sequenceNumber = br.readUInt32LE();\n        input.amount = br.readUInt64LEBN().toBigInt();\n        return input;\n    }\n    toBufferWriter(writer, includeScript = true) {\n        if (!writer) writer = new (0, $35852622c8c617e8$export$2e2bcd8739ae039)();\n        writer.writeUInt8(this.type);\n        writer.writeReverse(this.outpoint);\n        if (includeScript) writer.writeVarLengthBuf(this.scriptSig.toBuffer());\n        writer.writeUInt32LE(this.sequenceNumber);\n        writer.writeUInt64LEBN((0, $5aa97aebe18a7924$export$2e2bcd8739ae039).fromBigInt(this.amount));\n        return writer;\n    }\n    estimateSize() {\n        return this.toBufferWriter().toBuffer().length;\n    }\n    isFinal() {\n        return this.sequenceNumber !== $9b92277fa5d35484$export$2e2bcd8739ae039.SEQUENCE_FINAL;\n    }\n    clearSignatures() {\n        this.scriptSig = (0, $90f45db77a786f2b$export$2e2bcd8739ae039).empty();\n        return this;\n    }\n    getSubscript() {\n        throw Error(`Abstract Method Invocation: Input#getSubscript`);\n    }\n    /**\n   * @returns true if the provided private key can sign this input\n   */ canSign(_privateKey) {\n        throw Error(`Abstract Method Invocation: Input#canSign`);\n    }\n    isFullySigned() {\n        throw Error(`Abstract Method Invocation: Input#isFullySigned`);\n    }\n    addSignature(_signature) {\n        throw Error(`Abstract Method Invocation: Input#addSignature`);\n    }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nclass $5cf2ce125ae8c2d7$export$2e2bcd8739ae039 extends (0, $9b92277fa5d35484$export$2e2bcd8739ae039) {\n    static{\n        this.SCRIPT_SIZE = 99 // pubkey (1 + 33) + sigsize (1 + 64)\n        ;\n    }\n    getSubscript() {\n        (0, $e44f707fde477092$export$2e2bcd8739ae039).validateState(this.output instanceof (0, $98955c312257c252$export$2e2bcd8739ae039), \"missing associated output\");\n        return this.output.scriptPubKey;\n    }\n    canSign(privateKey) {\n        if (!(this.output instanceof (0, $98955c312257c252$export$2e2bcd8739ae039))) return false;\n        let pkh = (0, $62ca61b6ba036e1b$export$2e2bcd8739ae039).sha256ripemd160(privateKey.publicKey.toBuffer());\n        return pkh.equals(this.output.scriptPubKey.getPublicKeyHash());\n    }\n    isFullySigned() {\n        return this.scriptSig.isPublicKeyHashIn();\n    }\n    addSignature(signature) {\n        this.scriptSig = (0, $fea109eb8128bf4c$export$2e2bcd8739ae039).buildPublicKeyHashIn(signature.publicKey, signature.signature);\n        return this;\n    }\n    estimateSize() {\n        if (this.isFullySigned()) return super.estimateSize();\n        // type + outpoint + scriptlen + script + sequence + amount\n        return 34 + $5cf2ce125ae8c2d7$export$2e2bcd8739ae039.SCRIPT_SIZE + 4 + 8;\n    }\n}\n\n\n\n\n\n\n\n\nclass $49712dfa37abdb5b$export$2e2bcd8739ae039 extends (0, $9b92277fa5d35484$export$2e2bcd8739ae039) {\n    static{\n        this.SCRIPT_SIZE = 100 // pubkey push script (1 + 34) + sigsize (1 + 64)\n        ;\n    }\n    getSubscript() {\n        return (0, $90f45db77a786f2b$export$2e2bcd8739ae039).empty().add((0, $92c0719d4ab9ac45$export$393941f88fd16991).OP_FROMALTSTACK).add((0, $92c0719d4ab9ac45$export$393941f88fd16991).OP_CHECKSIGVERIFY);\n    }\n    canSign(privateKey) {\n        if (!(this.output instanceof (0, $98955c312257c252$export$2e2bcd8739ae039))) return false;\n        let constraintHash = (0, $62ca61b6ba036e1b$export$2e2bcd8739ae039).sha256ripemd160((0, $90f45db77a786f2b$export$2e2bcd8739ae039).empty().add(privateKey.publicKey.toBuffer()).toBuffer());\n        return constraintHash.equals(this.output.scriptPubKey.getConstraintHash());\n    }\n    isFullySigned() {\n        return this.scriptSig.isPublicKeyTemplateIn();\n    }\n    addSignature(signature) {\n        let constraint = (0, $90f45db77a786f2b$export$2e2bcd8739ae039).empty().add(signature.publicKey.toBuffer());\n        let satisfier = (0, $90f45db77a786f2b$export$2e2bcd8739ae039).empty().add(signature.toTxSatisfier());\n        this.scriptSig = (0, $fea109eb8128bf4c$export$2e2bcd8739ae039).buildScriptTemplateIn((0, $92c0719d4ab9ac45$export$393941f88fd16991).OP_1, constraint, satisfier);\n        return this;\n    }\n    estimateSize() {\n        if (this.isFullySigned()) return super.estimateSize();\n        // type + outpoint + scriptlen + script + sequence + amount\n        return 34 + $49712dfa37abdb5b$export$2e2bcd8739ae039.SCRIPT_SIZE + 4 + 8;\n    }\n}\n\n\n\n\n\n\n\n\n\n\n\nclass $6995bc57838749e2$export$2e2bcd8739ae039 extends (0, $9b92277fa5d35484$export$2e2bcd8739ae039) {\n    /**\n   * Represents a special kind of input of generic ScriptTemplate kind.\n   * \n   * WARNING: this is a general case where the signature is similar to p2pkt and added to scriptSig as push signature data.\n   * If you have complex smart contract, consider extending this class (or Input class) and implement the necessary logic,\n   * or sign it manually.\n   */ constructor(arg){\n        (0, $e44f707fde477092$export$2e2bcd8739ae039).validateArgument((0, $hgUW1$isObject)(arg?.templateData), 'Missing template object');\n        (0, $e44f707fde477092$export$2e2bcd8739ae039).validateArgument((0, $hgUW1$isObject)(arg?.output), 'Missing associated utxo');\n        let td = arg.templateData;\n        (0, $e44f707fde477092$export$2e2bcd8739ae039).validateArgument(td.templateScript instanceof (0, $90f45db77a786f2b$export$2e2bcd8739ae039) || (0, $hgUW1$isString)(td.templateScript), 'Invalid template');\n        (0, $e44f707fde477092$export$2e2bcd8739ae039).validateArgument(td.constraintScript instanceof (0, $90f45db77a786f2b$export$2e2bcd8739ae039) || (0, $hgUW1$isString)(td.constraintScript) || td.constraintScript === (0, $92c0719d4ab9ac45$export$393941f88fd16991).OP_FALSE, 'Invalid constraint');\n        (0, $e44f707fde477092$export$2e2bcd8739ae039).validateArgument((0, $hgUW1$isUndefined)(td.publicKey) || td.publicKey instanceof (0, $246eb589bb078d6d$export$2e2bcd8739ae039) || (0, $hgUW1$isString)(td.publicKey), 'Invalid pubkey');\n        super(arg), this.toJSON = this.toObject;\n        this.templateScript = (0, $hgUW1$isString)(td.templateScript) ? (0, $90f45db77a786f2b$export$2e2bcd8739ae039).fromString(td.templateScript) : td.templateScript;\n        this.constraintScript = (0, $hgUW1$isString)(td.constraintScript) ? (0, $90f45db77a786f2b$export$2e2bcd8739ae039).fromString(td.constraintScript) : td.constraintScript;\n        this.publicKey = (0, $hgUW1$isString)(td.publicKey) ? (0, $246eb589bb078d6d$export$2e2bcd8739ae039).fromString(td.publicKey) : td.publicKey;\n        let templateHash = this.output.scriptPubKey.getTemplateHash();\n        (0, $e44f707fde477092$export$2e2bcd8739ae039).validateState((0, $9f918c10ad4fef51$export$2e2bcd8739ae039).isBuffer(templateHash) && templateHash.equals((0, $62ca61b6ba036e1b$export$2e2bcd8739ae039).sha256ripemd160(this.templateScript.toBuffer())), \"Provided template doesn't match to the provided output\");\n        let constraintHash = this.output.scriptPubKey.getConstraintHash();\n        let isScriptMatch = this.constraintScript instanceof (0, $90f45db77a786f2b$export$2e2bcd8739ae039) && (0, $9f918c10ad4fef51$export$2e2bcd8739ae039).isBuffer(constraintHash) && constraintHash.equals((0, $62ca61b6ba036e1b$export$2e2bcd8739ae039).sha256ripemd160(this.constraintScript.toBuffer()));\n        (0, $e44f707fde477092$export$2e2bcd8739ae039).validateState(constraintHash === this.constraintScript || isScriptMatch, \"Provided constraint doesn't match to the provided output\");\n    }\n    toObject() {\n        let input = super.toObject();\n        return {\n            ...input,\n            templateData: {\n                templateScript: this.templateScript.toHex(),\n                constraintScript: this.constraintScript === (0, $92c0719d4ab9ac45$export$393941f88fd16991).OP_FALSE ? (0, $92c0719d4ab9ac45$export$393941f88fd16991).OP_FALSE : this.constraintScript.toHex(),\n                publicKey: this.publicKey?.toString()\n            }\n        };\n    }\n    static fromObject(obj) {\n        (0, $e44f707fde477092$export$2e2bcd8739ae039).validateArgument((0, $hgUW1$isObject)(obj), \"obj\");\n        return new $6995bc57838749e2$export$2e2bcd8739ae039(obj);\n    }\n    getSubscript() {\n        return this.templateScript;\n    }\n    canSign(privateKey) {\n        return this.publicKey?.toString() === privateKey.publicKey.toString();\n    }\n    isFullySigned() {\n        return this.scriptSig.isScriptTemplateIn() && this.templateScript.equals((0, $90f45db77a786f2b$export$2e2bcd8739ae039).fromBuffer(this.scriptSig.chunks[0].buf)) && (!(this.constraintScript instanceof (0, $90f45db77a786f2b$export$2e2bcd8739ae039)) || this.constraintScript.equals((0, $90f45db77a786f2b$export$2e2bcd8739ae039).fromBuffer(this.scriptSig.chunks[1].buf)));\n    }\n    addSignature(signature) {\n        let satisfier = (0, $90f45db77a786f2b$export$2e2bcd8739ae039).empty().add(signature.toTxSatisfier());\n        this.scriptSig = (0, $fea109eb8128bf4c$export$2e2bcd8739ae039).buildScriptTemplateIn(this.templateScript, this.constraintScript, satisfier);\n        return this;\n    }\n    estimateSize() {\n        if (this.isFullySigned()) return super.estimateSize();\n        let scriptSize = this._estimateScriptSize();\n        // type + outpoint + scriptlen + script + sequence + amount\n        return 33 + (scriptSize < 253 ? 1 : 3) + scriptSize + 4 + 8;\n    }\n    _estimateScriptSize() {\n        // here we calculate by template size, constraint size if not op_false, and satisfier size as sigsize (1 + 64)\n        let s = (0, $90f45db77a786f2b$export$2e2bcd8739ae039).empty().add(this.templateScript.toBuffer());\n        if (this.constraintScript instanceof (0, $90f45db77a786f2b$export$2e2bcd8739ae039)) s.add(this.constraintScript.toBuffer());\n        return s.toBuffer().length + 1 + 64;\n    }\n}\n\n\nclass $926e193f4c554367$export$2e2bcd8739ae039 {\n    static{\n        this.CURRENT_VERSION = 0;\n    }\n    static{\n        this.FEE_PER_BYTE = 3;\n    }\n    static{\n        // Minimum amount for an output for it not to be considered a dust output\n        this.DUST_AMOUNT = 546;\n    }\n    static{\n        // Max amount of satoshis in circulation\n        this.MAX_MONEY = 21000000 * 1e8;\n    }\n    static{\n        // nlocktime limit to be considered block height rather than a timestamp\n        this.NLOCKTIME_BLOCKHEIGHT_LIMIT = 5e8;\n    }\n    static{\n        // Max value for an unsigned 32 bit value\n        this.NLOCKTIME_MAX_VALUE = 4294967295;\n    }\n    constructor(serializedTx){\n        this.uncheckedSerialize = this.toString;\n        this.toJSON = this.toObject;\n        this.version = $926e193f4c554367$export$2e2bcd8739ae039.CURRENT_VERSION;\n        this.inputs = [];\n        this.outputs = [];\n        this.nLockTime = 0;\n        if (serializedTx) {\n            if ((0, $9f918c10ad4fef51$export$2e2bcd8739ae039).isBuffer(serializedTx)) this.fromBuffer(serializedTx);\n            else if ((0, $c337f7a9455509cf$export$2e2bcd8739ae039).isHexa(serializedTx)) this.fromString(serializedTx);\n            else if ((0, $hgUW1$isObject)(serializedTx)) this.fromObject(serializedTx);\n            else throw new TypeError(\"Must provide an object or string to deserialize a transaction\");\n        }\n    }\n    get id() {\n        let buf = new (0, $35852622c8c617e8$export$2e2bcd8739ae039)().write(this._getTxIdem()).write(this._getTxSatisfier()).toBuffer();\n        return (0, $62ca61b6ba036e1b$export$2e2bcd8739ae039).sha256sha256(buf).reverse().toString('hex');\n    }\n    get idem() {\n        return this._getTxIdem().reverse().toString('hex');\n    }\n    get outputAmount() {\n        return this.outputs.reduce((total, output)=>total + output.value, 0n);\n    }\n    get inputAmount() {\n        return this.inputs.reduce((total, input)=>total + input.amount, 0n);\n    }\n    _getTxIdem() {\n        return (0, $62ca61b6ba036e1b$export$2e2bcd8739ae039).sha256sha256(this._toIdemBuffer());\n    }\n    _getTxSatisfier() {\n        return (0, $62ca61b6ba036e1b$export$2e2bcd8739ae039).sha256sha256(this._toSatisfierBuffer());\n    }\n    /**\n   * Create a 'shallow' copy of the transaction, by serializing and deserializing.\n   * it dropping any additional information that inputs and outputs may have hold\n   *\n   * @param transaction\n   */ static shallowCopy(transaction) {\n        return new $926e193f4c554367$export$2e2bcd8739ae039(transaction.toBuffer());\n    }\n    /**\n   * Analogous to nexad's IsCoinBase function in transaction.h\n   */ isCoinbase() {\n        return this.inputs.length === 0;\n    }\n    /**\n   * Retrieve a possible error that could appear when trying to serialize and\n   * broadcast this transaction.\n   *\n   * @param opts allows to skip certain tests.\n   */ getSerializationError(opts) {\n        if (this._invalidAmount()) return new Error('Output satoshis are invalid');\n        if (this.outputs.length > 256) return new Error('Too many outputs (> 256)');\n        if (this.inputs.length > 256) return new Error('Too many inputs (> 256)');\n        let unspent = this.getUnspentValue();\n        let unspentError;\n        if (unspent < 0) {\n            if (!opts?.disableMoreOutputThanInput) unspentError = new Error('Invalid outputs amount sum');\n        } else unspentError = this._hasFeeError(unspent);\n        return unspentError || this._hasDustOutputs(opts) || this._isMissingSignatures(opts);\n    }\n    _invalidAmount() {\n        return this.outputs.some((out)=>out.invalidValue());\n    }\n    _hasDustOutputs(opts) {\n        if (opts?.disableDustOutputs) return;\n        let hasDust = this.outputs.some((output)=>output.value < $926e193f4c554367$export$2e2bcd8739ae039.DUST_AMOUNT && !output.scriptPubKey.isDataOut());\n        return hasDust ? new Error('Dust amount detected in one output') : undefined;\n    }\n    _hasFeeError(unspent) {\n        if (!(0, $hgUW1$isUndefined)(this._fee) && BigInt(this._fee) !== unspent) return new Error(`Unspent value is ${unspent} but specified fee is ${this._fee}`);\n    }\n    _estimateFee() {\n        let estimatedSize = this._estimateSize();\n        let available = this.getUnspentValue();\n        let feeRate = this._feePerByte || $926e193f4c554367$export$2e2bcd8739ae039.FEE_PER_BYTE;\n        const calcFee = (size)=>{\n            return size * feeRate;\n        };\n        let feeWithChange = Math.ceil(calcFee(estimatedSize) + calcFee(this._estimateSizeOfChangeOutput()));\n        if (!this._changeScript || available <= feeWithChange || available - BigInt(feeWithChange) < $926e193f4c554367$export$2e2bcd8739ae039.DUST_AMOUNT) return Number(available);\n        return feeWithChange;\n    }\n    _estimateSizeOfChangeOutput() {\n        /* c8 ignore start */ if (!this._changeScript) return 0; // should not reach here\n        /* c8 ignore stop */ let scriptLen = this._changeScript.toBuffer().length;\n        // 1 byte for type + 8 bytes for amount + script size + actual script size\n        return 9 + (0, $35852622c8c617e8$export$2e2bcd8739ae039).varintBufNum(scriptLen).length + scriptLen;\n    }\n    _estimateSize() {\n        let result = 5; // locktime + version\n        result += this.inputs.length < 253 ? 1 : 3;\n        this.inputs.forEach((input)=>{\n            result += input.estimateSize();\n        });\n        result += this.outputs.length < 253 ? 1 : 3;\n        this.outputs.forEach((output)=>{\n            result += output.toBufferWriter().toBuffer().length;\n        });\n        return result;\n    }\n    _isMissingSignatures(opts) {\n        if (opts?.disableIsFullySigned) return;\n        if (!this.isFullySigned()) return new Error('Some inputs have not been fully signed');\n    }\n    isFullySigned() {\n        if (this.inputs.some((input)=>input.isFullySigned === (0, $9b92277fa5d35484$export$2e2bcd8739ae039).prototype.isFullySigned)) throw new Error(\"Unable to verify signature: Unrecognized script kind, or not enough information to execute script. This usually happens when creating a transaction from a serialized transaction\");\n        return this.inputs.every((input)=>input.isFullySigned());\n    }\n    /**\n   * @returns true if the transaction has enough info on all inputs to be correctly validated\n   */ hasAllUtxoInfo() {\n        return this.inputs.every((input)=>!(0, $hgUW1$isUndefined)(input.output));\n    }\n    getUnspentValue() {\n        return this.inputAmount - this.outputAmount;\n    }\n    /**\n   * Calculates the fee of the transaction.\n   *\n   * If there's a fixed fee set, return that.\n   *\n   * If there is no change output set, the fee is the\n   * total value of the outputs minus inputs. Note that\n   * a serialized transaction only specifies the value\n   * of its outputs. (The value of inputs are recorded\n   * in the previous transaction outputs being spent.)\n   * This method therefore raises a \"MissingPreviousOutput\"\n   * error when called on a serialized transaction.\n   *\n   * If there's no fee set and no change address,\n   * estimate the fee based on size.\n   *\n   * @return fee of this transaction in satoshis\n   */ getFee() {\n        if (this.isCoinbase()) return 0;\n        if (!(0, $hgUW1$isUndefined)(this._fee)) return this._fee;\n        // if no change output is set, fees should equal all the unspent amount\n        if (!this._changeScript) return Number(this.getUnspentValue());\n        return this._estimateFee();\n    }\n    /**\n   * Calculates the required fee of the transaction.\n   * \n   * @remarks this method is different than getFee.\n   *  while getFee return the current fee estimation, this method return how much fee is required according to the fee rate.\n   * \n   * @returns the required fees of this transaction in satoshis\n   */ estimateRequiredFee() {\n        let feeRate = this._feePerByte || $926e193f4c554367$export$2e2bcd8739ae039.FEE_PER_BYTE;\n        return feeRate * this._estimateSize();\n    }\n    clearSignatures() {\n        this.inputs.forEach((input)=>input.clearSignatures());\n    }\n    /**\n   * Retrieve a hexa string that can be used with nexad's CLI interface\n   * (decoderawtransaction, sendrawtransaction)\n   *\n   * @param opts allows to skip certain tests.\n   */ checkedSerialize(opts) {\n        let serializationError = this.getSerializationError(opts);\n        if (serializationError) throw serializationError;\n        return this.toString();\n    }\n    toString() {\n        return this.toBuffer().toString('hex');\n    }\n    inspect() {\n        return `<Transaction: ${this}>`;\n    }\n    fromString(string) {\n        return this.fromBuffer(Buffer.from(string, 'hex'));\n    }\n    /**\n   * Retrieve a hexa string that can be used with nexad's CLI interface\n   * (decoderawtransaction, sendrawtransaction)\n   *\n   * @param unsafe if true, skip all tests. if it's an object,\n   * it's expected to contain a set of flags to skip certain tests.\n   * \n   * @see {@link TxVerifyOptions}\n   */ serialize(unsafe) {\n        if (true === unsafe || (0, $hgUW1$isObject)(unsafe) && unsafe.disableAll) return this.uncheckedSerialize();\n        else return this.checkedSerialize((0, $hgUW1$isObject)(unsafe) ? unsafe : undefined);\n    }\n    /**\n   * Manually set the fee for this transaction. Beware that this resets all the signatures\n   * for inputs.\n   *\n   * @param amount satoshis to be set as fees\n   * @return this, for chaining\n   */ setFee(amount) {\n        (0, $e44f707fde477092$export$2e2bcd8739ae039).validateArgument((0, $hgUW1$isNumber)(amount), 'amount must be a number');\n        this._fee = amount;\n        this._updateChangeOutput();\n        return this;\n    }\n    /**\n   * Manually set the fee per Byte for this transaction. Beware that this resets all the signatures\n   * for inputs.\n   * fee per Byte will be ignored if fee property was set manually\n   *\n   * @param amount satoshis per Byte to be used as fee rate\n   * @return this, for chaining\n   */ setFeePerByte(amount) {\n        (0, $e44f707fde477092$export$2e2bcd8739ae039).validateArgument((0, $hgUW1$isNumber)(amount), 'amount must be a number');\n        this._feePerByte = amount;\n        this._updateChangeOutput();\n        return this;\n    }\n    /**\n   * Add an output to the transaction.\n   *\n   * @param output the output to add.\n   * @return this, for chaining\n   */ addOutput(output) {\n        (0, $e44f707fde477092$export$2e2bcd8739ae039).validateArgumentType(output, (0, $98955c312257c252$export$2e2bcd8739ae039), 'output');\n        this.outputs.push(output);\n        this._updateChangeOutput();\n        return this;\n    }\n    removeOutput(index) {\n        this._removeOutput(index);\n        this._updateChangeOutput();\n        return this;\n    }\n    _removeOutput(index) {\n        this.outputs = this.outputs.filter((_, i)=>i !== index);\n    }\n    /**\n   * Remove all outputs from the transaction.\n   *\n   * @return this, for chaining\n   */ clearOutputs() {\n        this.outputs = [];\n        this.clearSignatures();\n        this._updateChangeOutput();\n        return this;\n    }\n    updateOutputAmount(index, sats) {\n        this.outputs[index].value = BigInt(sats);\n        this._updateChangeOutput();\n    }\n    /**\n   * Set the change address for this transaction\n   *\n   * Beware that this resets all the signatures for inputs.\n   *\n   * @param address An address for change to be sent to.\n   * @return this, for chaining\n   */ setChangeOutput(address) {\n        (0, $e44f707fde477092$export$2e2bcd8739ae039).validateArgument(!(0, $hgUW1$isNil)(address), 'address is required.');\n        this._changeScript = (0, $fea109eb8128bf4c$export$2e2bcd8739ae039).buildOutFromAddress(address);\n        this._updateChangeOutput();\n        return this;\n    }\n    /**\n   * @returns change output, if it exists\n   */ getChangeOutput() {\n        if (!(0, $hgUW1$isUndefined)(this._changeIndex)) return this.outputs[this._changeIndex];\n        return undefined;\n    }\n    _updateChangeOutput() {\n        if (!this._changeScript) return;\n        this.clearSignatures();\n        if (!(0, $hgUW1$isUndefined)(this._changeIndex)) this._removeOutput(this._changeIndex);\n        let available = this.getUnspentValue();\n        let fee = this.getFee();\n        let changeAmount = available - BigInt(fee);\n        if (changeAmount >= $926e193f4c554367$export$2e2bcd8739ae039.DUST_AMOUNT) {\n            this._changeIndex = this.outputs.length;\n            this.outputs.push(new (0, $98955c312257c252$export$2e2bcd8739ae039)(changeAmount, this._changeScript));\n        } else this._changeIndex = undefined;\n    }\n    /**\n   * Add an input to this transaction, without checking that the input has information about\n   * the output that it's spending.\n   *\n   * @param input the input to add\n   * @return this, for chaining\n   */ uncheckedAddInput(input) {\n        (0, $e44f707fde477092$export$2e2bcd8739ae039).validateArgumentType(input, (0, $9b92277fa5d35484$export$2e2bcd8739ae039), 'input');\n        this.inputs.push(input);\n        this._updateChangeOutput();\n        return this;\n    }\n    /**\n   * Add an input to this transaction. The input must be an instance of the `Input` class.\n   * It should have information about the Output that it's spending, but if it's not already\n   * set, two additional parameters, `outputScript` and `amount` can be provided.\n   *\n   * @param input\n   * @param outputScript\n   * @param amount\n   * @return this, for chaining\n   */ addInput(input, outputScript, amount) {\n        (0, $e44f707fde477092$export$2e2bcd8739ae039).validateArgumentType(input, (0, $9b92277fa5d35484$export$2e2bcd8739ae039), 'input');\n        if ((0, $hgUW1$isUndefined)(input.output) && ((0, $hgUW1$isUndefined)(outputScript) || (0, $hgUW1$isUndefined)(amount))) throw new Error('Need information about the UTXO script and amount');\n        if ((0, $hgUW1$isUndefined)(input.output) && !(0, $hgUW1$isUndefined)(outputScript) && !(0, $hgUW1$isUndefined)(amount)) {\n            let scriptPubKey = outputScript instanceof (0, $90f45db77a786f2b$export$2e2bcd8739ae039) ? outputScript : new (0, $90f45db77a786f2b$export$2e2bcd8739ae039)(outputScript);\n            input.output = new (0, $98955c312257c252$export$2e2bcd8739ae039)(BigInt(amount), scriptPubKey);\n        }\n        return this.uncheckedAddInput(input);\n    }\n    removeInput(outpoint) {\n        this.inputs = this.inputs.filter((input)=>input.outpoint.toString('hex') != outpoint);\n        this._updateChangeOutput();\n        return this;\n    }\n    /**\n   * Sets nLockTime so that transaction is not valid until the desired date or height.\n   * Beware that this method will also set the inputs sequence number to max_int - 1\n   * \n   * @remarks nLockTime considered as height if the value is between 0 - 499,999,999.\n   *  above that considered as date (unix timestamp).\n   * \n   * @see {@link NLOCKTIME_BLOCKHEIGHT_LIMIT}\n   * \n   * @param locktime \n   * @returns \n   */ setLockTime(locktime) {\n        (0, $e44f707fde477092$export$2e2bcd8739ae039).validateArgument((0, $hgUW1$isNumber)(locktime), 'locktime', 'must be a number');\n        this.inputs.forEach((input)=>{\n            if (input.sequenceNumber === (0, $9b92277fa5d35484$export$2e2bcd8739ae039).SEQUENCE_FINAL) input.sequenceNumber = (0, $9b92277fa5d35484$export$2e2bcd8739ae039).SEQUENCE_FINAL - 1;\n        });\n        this.nLockTime = locktime;\n        return this;\n    }\n    /**\n   *  Returns a semantic version of the transaction's nLockTime.\n   *  If nLockTime is 0, it returns null,\n   *  if it is < 500000000, it returns a block height (number)\n   *  else it returns a Date object.\n   */ getLockTime() {\n        if (!this.nLockTime) return null;\n        if (this.nLockTime < $926e193f4c554367$export$2e2bcd8739ae039.NLOCKTIME_BLOCKHEIGHT_LIMIT) return this.nLockTime;\n        return new Date(1000 * this.nLockTime);\n    }\n    toBuffer() {\n        return this.toBufferWriter().toBuffer();\n    }\n    toBufferWriter(writer, withInputsScripts = true) {\n        if (!writer) writer = new (0, $35852622c8c617e8$export$2e2bcd8739ae039)();\n        writer.writeUInt8(this.version);\n        writer.writeVarintNum(this.inputs.length);\n        this.inputs.forEach((input)=>input.toBufferWriter(writer, withInputsScripts));\n        writer.writeVarintNum(this.outputs.length);\n        this.outputs.forEach((output)=>output.toBufferWriter(writer));\n        writer.writeUInt32LE(this.nLockTime);\n        return writer;\n    }\n    _toIdemBuffer() {\n        let writer = new (0, $35852622c8c617e8$export$2e2bcd8739ae039)();\n        return this.toBufferWriter(writer, false).toBuffer();\n    }\n    _toSatisfierBuffer() {\n        let writer = new (0, $35852622c8c617e8$export$2e2bcd8739ae039)();\n        writer.writeInt32LE(this.inputs.length);\n        this.inputs.forEach((input)=>{\n            writer.write(input.scriptSig.toBuffer());\n            writer.writeUInt8((0, $92c0719d4ab9ac45$export$393941f88fd16991).OP_INVALIDOPCODE);\n        });\n        return writer.toBuffer();\n    }\n    fromBuffer(buffer) {\n        let reader = new (0, $12fea2c2eb591556$export$2e2bcd8739ae039)(buffer);\n        return this.fromBufferReader(reader);\n    }\n    fromBufferReader(reader) {\n        (0, $e44f707fde477092$export$2e2bcd8739ae039).validateState(!reader.finished(), 'No transaction data received');\n        this.version = reader.readUInt8();\n        let sizeTxIns = reader.readVarintNum();\n        for(let i = 0; i < sizeTxIns; i++)this.inputs.push((0, $9b92277fa5d35484$export$2e2bcd8739ae039).fromBufferReader(reader));\n        let sizeTxOuts = reader.readVarintNum();\n        for(let i = 0; i < sizeTxOuts; i++)this.outputs.push((0, $98955c312257c252$export$2e2bcd8739ae039).fromBufferReader(reader));\n        this.nLockTime = reader.readUInt32LE();\n        return this;\n    }\n    toObject() {\n        let obj = {\n            id: this.id,\n            idem: this.idem,\n            version: this.version,\n            inputs: this.inputs.map((input)=>input.toObject()),\n            outputs: this.outputs.map((output)=>output.toObject()),\n            nLockTime: this.nLockTime\n        };\n        if (!(0, $hgUW1$isUndefined)(this._changeScript)) obj.changeScript = this._changeScript.toHex();\n        if (!(0, $hgUW1$isUndefined)(this._changeIndex)) obj.changeIndex = this._changeIndex;\n        if (!(0, $hgUW1$isUndefined)(this._fee)) obj.fee = this._fee;\n        if (!(0, $hgUW1$isUndefined)(this._feePerByte)) obj.feePerByte = this._feePerByte;\n        return obj;\n    }\n    fromObject(transaction) {\n        (0, $e44f707fde477092$export$2e2bcd8739ae039).validateArgument((0, $hgUW1$isObject)(transaction), 'transaction');\n        if (transaction instanceof $926e193f4c554367$export$2e2bcd8739ae039) transaction = transaction.toObject();\n        this.nLockTime = transaction.nLockTime;\n        this.version = transaction.version;\n        for (let input of transaction.inputs){\n            if ((0, $hgUW1$isUndefined)(input.output?.scriptPubKey)) {\n                this.uncheckedAddInput(new (0, $9b92277fa5d35484$export$2e2bcd8739ae039)(input));\n                continue;\n            }\n            let script = new (0, $90f45db77a786f2b$export$2e2bcd8739ae039)(input.output.scriptPubKey);\n            let txin;\n            if (script.isPublicKeyHashOut()) txin = new (0, $5cf2ce125ae8c2d7$export$2e2bcd8739ae039)(input);\n            else if (script.isPublicKeyTemplateOut()) txin = new (0, $49712dfa37abdb5b$export$2e2bcd8739ae039)(input);\n            else if (script.isScriptTemplateOut()) {\n                if ('templateData' in input) txin = new (0, $6995bc57838749e2$export$2e2bcd8739ae039)(input);\n                else txin = new (0, $9b92277fa5d35484$export$2e2bcd8739ae039)(input);\n            } else throw new Error(`Unsupported input script type: ${script}`);\n            this.addInput(txin);\n        }\n        for (let output of transaction.outputs)this.addOutput((0, $98955c312257c252$export$2e2bcd8739ae039).fromObject(output));\n        if (!(0, $hgUW1$isUndefined)(transaction.changeIndex)) this._changeIndex = transaction.changeIndex;\n        if (!(0, $hgUW1$isUndefined)(transaction.changeScript)) this._changeScript = new (0, $90f45db77a786f2b$export$2e2bcd8739ae039)(transaction.changeScript);\n        if (!(0, $hgUW1$isUndefined)(transaction.fee)) this._fee = transaction.fee;\n        if (!(0, $hgUW1$isUndefined)(transaction.feePerByte)) this._feePerByte = transaction.feePerByte;\n        this._checkConsistency(transaction);\n        return this;\n    }\n    _checkConsistency(transaction) {\n        if (!(0, $hgUW1$isUndefined)(this._changeIndex)) {\n            (0, $e44f707fde477092$export$2e2bcd8739ae039).validateState(!(0, $hgUW1$isUndefined)(this._changeScript), 'Change script is expected.');\n            (0, $e44f707fde477092$export$2e2bcd8739ae039).validateState(!(0, $hgUW1$isUndefined)(this.outputs[this._changeIndex]), 'Change index points to undefined output.');\n            (0, $e44f707fde477092$export$2e2bcd8739ae039).validateState(this.outputs[this._changeIndex].scriptPubKey.toHex() === this._changeScript?.toHex(), 'Change output has an unexpected script.');\n        }\n        if (transaction?.id) (0, $e44f707fde477092$export$2e2bcd8739ae039).validateState(transaction.id === this.id, 'Id in object does not match transaction id.');\n    }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\nclass $54bdedd720718511$export$2e2bcd8739ae039 {\n    /**\n   * Represents an unspent output information: its outpoint hash, associated amount/sats,\n   * associated script or address with optional group info,\n   *\n   * @param utxo the utxo object\n   * @param utxo.outpoint the outpoint hash\n   * @param utxo.amount amount of nexa associated as string or number\n   * @param utxo.satoshis alias for `amount`, but expressed in satoshis (1 NEXA = 100 satoshis) as bigint, string or number\n   * @param utxo.scriptPubKey the script that must be resolved to release the funds\n   * @param utxo.address optional. can be used instead of the full script\n   * @param utxo.groupId optional. can be used instead of the full script\n   * @param utxo.groupAmount optional. can be used instead of the full script\n   */ constructor(utxo){\n        this.toJSON = this.toObject;\n        (0, $e44f707fde477092$export$2e2bcd8739ae039).validateArgument((0, $hgUW1$isObject)(utxo), 'Must provide an object from where to extract data');\n        (0, $e44f707fde477092$export$2e2bcd8739ae039).validateArgument((0, $c337f7a9455509cf$export$2e2bcd8739ae039).isHexa(utxo.outpoint), 'Invalid outpoint hash');\n        (0, $e44f707fde477092$export$2e2bcd8739ae039).validateArgument(!(0, $hgUW1$isUndefined)(utxo.satoshis) || !(0, $hgUW1$isUndefined)(utxo.amount), 'Must provide satoshis or amount');\n        (0, $e44f707fde477092$export$2e2bcd8739ae039).validateArgument(!(0, $hgUW1$isUndefined)(utxo.scriptPubKey) || !(0, $hgUW1$isUndefined)(utxo.address), 'Must provide script or address');\n        this.outpoint = utxo.outpoint;\n        this.satoshis = !(0, $hgUW1$isUndefined)(utxo.satoshis) ? BigInt(utxo.satoshis) : (0, $05e660d5daa855e4$export$2e2bcd8739ae039).parseNEXA(utxo.amount.toString());\n        this.scriptPubKey = !(0, $hgUW1$isUndefined)(utxo.scriptPubKey) ? new (0, $90f45db77a786f2b$export$2e2bcd8739ae039)(utxo.scriptPubKey) : (0, $fea109eb8128bf4c$export$2e2bcd8739ae039).buildOutFromAddress(utxo.address, utxo.groupId, utxo.groupAmount);\n    }\n    /**\n   * String representation: just the outpoint hash\n   */ toString() {\n        return this.outpoint;\n    }\n    /**\n   * Provide an informative output when displaying this object in the console\n   */ inspect() {\n        return `<UnspentOutput: ${this}, satoshis: ${this.satoshis}, script: ${this.scriptPubKey}>`;\n    }\n    /**\n   * Deserialize an UnspentOutput from an object\n   * @param data\n   */ static fromObject(data) {\n        return new $54bdedd720718511$export$2e2bcd8739ae039(data);\n    }\n    /**\n   * Returns a plain object (no prototype or methods) with the associated info for this utxo\n   */ toObject() {\n        return {\n            outpoint: this.outpoint,\n            scriptPubKey: this.scriptPubKey.toHex(),\n            amount: (0, $05e660d5daa855e4$export$2e2bcd8739ae039).formatNEXA(this.satoshis)\n        };\n    }\n}\n\n\n\n\n\n\n\n\n\nclass $6ebeca4bc214d833$export$2e2bcd8739ae039 {\n    /**\n   * Wrapper around Signature with fields related to signing a transaction specifically\n   */ constructor(arg){\n        this.toJSON = this.toObject;\n        $6ebeca4bc214d833$export$2e2bcd8739ae039._validateArgs(arg);\n        this.inputIndex = arg.inputIndex;\n        this.publicKey = (0, $hgUW1$isString)(arg.publicKey) ? (0, $246eb589bb078d6d$export$2e2bcd8739ae039).fromString(arg.publicKey) : arg.publicKey;\n        this.subscript = (0, $hgUW1$isString)(arg.subscript) ? (0, $90f45db77a786f2b$export$2e2bcd8739ae039).fromHex(arg.subscript) : arg.subscript;\n        this.signature = (0, $hgUW1$isString)(arg.signature) ? (0, $369a157b63fbc3fd$export$2e2bcd8739ae039).fromString(arg.signature) : arg.signature;\n        this.sigType = (0, $hgUW1$isString)(arg.sigType) ? (0, $e50a883097cd2090$export$2e2bcd8739ae039).fromString(arg.sigType) : arg.sigType;\n    }\n    static _validateArgs(arg) {\n        (0, $e44f707fde477092$export$2e2bcd8739ae039).validateArgument((0, $hgUW1$isObject)(arg), 'TxSignature must be instantiated from an object');\n        (0, $e44f707fde477092$export$2e2bcd8739ae039).validateArgument(!(0, $hgUW1$isNil)(arg.publicKey) && !!(0, $246eb589bb078d6d$export$2e2bcd8739ae039).from(arg.publicKey), 'publicKey');\n        (0, $e44f707fde477092$export$2e2bcd8739ae039).validateArgument(!(0, $hgUW1$isNil)(arg.inputIndex), 'inputIndex');\n        (0, $e44f707fde477092$export$2e2bcd8739ae039).validateState((0, $hgUW1$isNumber)(arg.inputIndex), 'inputIndex must be a number');\n        (0, $e44f707fde477092$export$2e2bcd8739ae039).validateArgument(!(0, $hgUW1$isNil)(arg.subscript), 'subscript');\n        (0, $e44f707fde477092$export$2e2bcd8739ae039).validateState(arg.subscript instanceof (0, $90f45db77a786f2b$export$2e2bcd8739ae039) || (0, $c337f7a9455509cf$export$2e2bcd8739ae039).isHexa(arg.subscript), 'subscript must be an object or hexa value');\n        (0, $e44f707fde477092$export$2e2bcd8739ae039).validateArgument(!(0, $hgUW1$isNil)(arg.signature), 'signature');\n        (0, $e44f707fde477092$export$2e2bcd8739ae039).validateState(arg.signature instanceof (0, $369a157b63fbc3fd$export$2e2bcd8739ae039) || (0, $c337f7a9455509cf$export$2e2bcd8739ae039).isHexa(arg.signature), 'signature must be an object or hexa value');\n        (0, $e44f707fde477092$export$2e2bcd8739ae039).validateState(arg.sigType instanceof (0, $e50a883097cd2090$export$2e2bcd8739ae039) || (0, $hgUW1$isString)(arg.sigType), 'sigtype must be a sigtype object or string');\n    }\n    toObject() {\n        return {\n            inputIndex: this.inputIndex,\n            publicKey: this.publicKey.toString(),\n            subscript: this.subscript.toHex(),\n            signature: this.signature.toString(),\n            sigType: this.sigType.toString()\n        };\n    }\n    static fromObject(arg) {\n        return new $6ebeca4bc214d833$export$2e2bcd8739ae039(arg);\n    }\n    toTxSatisfier() {\n        return this.signature.toTxFormat(this.sigType.toBuffer());\n    }\n}\n\n\n\n\n\n\n\n\n\nclass $2dc9a1945ba915b1$export$2e2bcd8739ae039 {\n    /**\n   * Create a signature\n   * \n   * @param transaction the transaction to sign\n   * @param inputNumber the input index for the signature\n   * @param sighashType the sighash type\n   * @param subscript the script that will be signed\n   * @param privateKey the privkey to sign with\n   * @returns The signature\n   */ static sign(transaction, inputNumber, sighashType, subscript, privateKey) {\n        let hashbuf = this.buildSighash(transaction, inputNumber, sighashType, subscript);\n        return (0, $1739481af0c86d04$export$2e2bcd8739ae039).sign(hashbuf, privateKey, 'little');\n    }\n    /**\n   * Verify a signature\n   * \n   * @param transaction the transaction to verify\n   * @param inputNumber the input index for the signature\n   * @param signature the signature to verify\n   * @param sighashType the sighash type\n   * @param subscript the script that will be verified\n   * @param publicKey the pubkey that correspond to the signing privkey\n   * @returns true if signature is valid\n   */ static verify(transaction, inputNumber, signature, sighashType, subscript, publicKey) {\n        (0, $e44f707fde477092$export$2e2bcd8739ae039).validateArgument(!(0, $hgUW1$isUndefined)(transaction), 'transaction');\n        (0, $e44f707fde477092$export$2e2bcd8739ae039).validateArgument(!(0, $hgUW1$isUndefined)(signature), 'signature');\n        (0, $e44f707fde477092$export$2e2bcd8739ae039).validateArgument(!(0, $hgUW1$isUndefined)(sighashType), 'sighashType');\n        let hashbuf = this.buildSighash(transaction, inputNumber, sighashType, subscript);\n        return (0, $1739481af0c86d04$export$2e2bcd8739ae039).verify(hashbuf, signature, publicKey, 'little');\n    }\n    /**\n   * Returns a buffer of length 32 bytes with the hash that needs to be signed for OP_CHECKSIG(VERIFY).\n   *\n   * @param transaction the transaction to sign\n   * @param inputNumber the input index for the signature\n   * @param sighashType the sighash type\n   * @param subscript the script that will be signed\n   */ static buildSighash(transaction, inputNumber, sighashType, subscript) {\n        let components = this._getSighashComponents(transaction, inputNumber, sighashType);\n        let writer = new (0, $35852622c8c617e8$export$2e2bcd8739ae039)();\n        // Version\n        writer.writeUInt8(transaction.version);\n        // Input prevouts/nSequence (none/all, depending on flags)\n        writer.write(components.hashPrevouts);\n        writer.write(components.hashInputAmounts);\n        writer.write(components.hashSequence);\n        // scriptCode of the input (serialized as scripts inside CTxOuts)\n        writer.writeVarLengthBuf(subscript.toBuffer());\n        // Outputs (none/one/all, depending on flags)\n        writer.write(components.hashOutputs);\n        // Locktime\n        writer.writeUInt32LE(transaction.nLockTime);\n        // sighashType \n        writer.writeVarLengthBuf(sighashType.toBuffer());\n        let buf = writer.toBuffer();\n        return (0, $62ca61b6ba036e1b$export$2e2bcd8739ae039).sha256sha256(buf).reverse();\n    }\n    static _getSighashComponents(transaction, inputNumber, sighashType) {\n        (0, $e44f707fde477092$export$2e2bcd8739ae039).validateArgument(!sighashType.isInvalid(), 'sighashType');\n        let hashPrevouts, hashSequence, hashInputAmounts, hashOutputs;\n        switch(sighashType.inType){\n            case (0, $e50a883097cd2090$export$ae38be9ef660d12e).FIRSTN:\n                let firstN = sighashType.inData[0];\n                (0, $e44f707fde477092$export$2e2bcd8739ae039).validateArgument(firstN <= transaction.inputs.length, 'firstN out of range');\n                hashPrevouts = this._getPrevoutHash(transaction, firstN);\n                hashSequence = this._getSequenceHash(transaction, firstN);\n                hashInputAmounts = this._getInputAmountHash(transaction, firstN);\n                break;\n            case (0, $e50a883097cd2090$export$ae38be9ef660d12e).THISIN:\n                (0, $e44f707fde477092$export$2e2bcd8739ae039).validateArgument(inputNumber < transaction.inputs.length, 'inputNumber out of range');\n                hashPrevouts = this._getPrevoutHashOf(transaction, inputNumber);\n                hashSequence = this._getSequenceHashOf(transaction, inputNumber);\n                hashInputAmounts = this._getInputAmountHashOf(transaction, inputNumber);\n                break;\n            default:\n                hashPrevouts = this._getPrevoutHash(transaction, transaction.inputs.length);\n                hashSequence = this._getSequenceHash(transaction, transaction.inputs.length);\n                hashInputAmounts = this._getInputAmountHash(transaction, transaction.inputs.length);\n                break;\n        }\n        switch(sighashType.outType){\n            case (0, $e50a883097cd2090$export$cc0d5ed6c4786851).FIRSTN:\n                let firstN1 = sighashType.outData[0];\n                (0, $e44f707fde477092$export$2e2bcd8739ae039).validateArgument(firstN1 <= transaction.outputs.length, 'firstN out of range');\n                hashOutputs = this._getOutputsHash(transaction, firstN1);\n                break;\n            case (0, $e50a883097cd2090$export$cc0d5ed6c4786851).TWO:\n                let [out1, out2] = sighashType.outData;\n                (0, $e44f707fde477092$export$2e2bcd8739ae039).validateArgument(out1 < transaction.outputs.length, 'out1 out of range');\n                (0, $e44f707fde477092$export$2e2bcd8739ae039).validateArgument(out2 < transaction.outputs.length, 'out2 out of range');\n                hashOutputs = this._getOutputsHashOf(transaction, out1, out2);\n                break;\n            default:\n                hashOutputs = this._getOutputsHash(transaction, transaction.outputs.length);\n                break;\n        }\n        return {\n            hashPrevouts: hashPrevouts,\n            hashSequence: hashSequence,\n            hashInputAmounts: hashInputAmounts,\n            hashOutputs: hashOutputs\n        };\n    }\n    static _getPrevoutHash(tx, firstN) {\n        let writer = new (0, $35852622c8c617e8$export$2e2bcd8739ae039)();\n        for(let i = 0; i < firstN; i++){\n            writer.writeUInt8(tx.inputs[i].type);\n            writer.writeReverse(tx.inputs[i].outpoint);\n        }\n        let buf = writer.toBuffer();\n        return (0, $62ca61b6ba036e1b$export$2e2bcd8739ae039).sha256sha256(buf);\n    }\n    static _getPrevoutHashOf(tx, inputNumber) {\n        let writer = new (0, $35852622c8c617e8$export$2e2bcd8739ae039)();\n        writer.writeUInt8(tx.inputs[inputNumber].type);\n        writer.writeReverse(tx.inputs[inputNumber].outpoint);\n        let buf = writer.toBuffer();\n        return (0, $62ca61b6ba036e1b$export$2e2bcd8739ae039).sha256sha256(buf);\n    }\n    static _getSequenceHash(tx, firstN) {\n        let writer = new (0, $35852622c8c617e8$export$2e2bcd8739ae039)();\n        for(let i = 0; i < firstN; i++)writer.writeUInt32LE(tx.inputs[i].sequenceNumber);\n        let buf = writer.toBuffer();\n        return (0, $62ca61b6ba036e1b$export$2e2bcd8739ae039).sha256sha256(buf);\n    }\n    static _getSequenceHashOf(tx, inputNumber) {\n        let writer = new (0, $35852622c8c617e8$export$2e2bcd8739ae039)();\n        writer.writeUInt32LE(tx.inputs[inputNumber].sequenceNumber);\n        let buf = writer.toBuffer();\n        return (0, $62ca61b6ba036e1b$export$2e2bcd8739ae039).sha256sha256(buf);\n    }\n    static _getInputAmountHash(tx, firstN) {\n        let writer = new (0, $35852622c8c617e8$export$2e2bcd8739ae039)();\n        for(let i = 0; i < firstN; i++)writer.writeUInt64LEBN((0, $5aa97aebe18a7924$export$2e2bcd8739ae039).fromBigInt(tx.inputs[i].amount));\n        let buf = writer.toBuffer();\n        return (0, $62ca61b6ba036e1b$export$2e2bcd8739ae039).sha256sha256(buf);\n    }\n    static _getInputAmountHashOf(tx, inputNumber) {\n        let writer = new (0, $35852622c8c617e8$export$2e2bcd8739ae039)();\n        writer.writeUInt64LEBN((0, $5aa97aebe18a7924$export$2e2bcd8739ae039).fromBigInt(tx.inputs[inputNumber].amount));\n        let buf = writer.toBuffer();\n        return (0, $62ca61b6ba036e1b$export$2e2bcd8739ae039).sha256sha256(buf);\n    }\n    static _getOutputsHash(tx, firstN) {\n        let writer = new (0, $35852622c8c617e8$export$2e2bcd8739ae039)();\n        for(let i = 0; i < firstN; i++)tx.outputs[i].toBufferWriter(writer);\n        let buf = writer.toBuffer();\n        return (0, $62ca61b6ba036e1b$export$2e2bcd8739ae039).sha256sha256(buf);\n    }\n    static _getOutputsHashOf(tx, out1, out2) {\n        let writer = new (0, $35852622c8c617e8$export$2e2bcd8739ae039)();\n        tx.outputs[out1].toBufferWriter(writer);\n        tx.outputs[out2].toBufferWriter(writer);\n        let buf = writer.toBuffer();\n        return (0, $62ca61b6ba036e1b$export$2e2bcd8739ae039).sha256sha256(buf);\n    }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nclass $bd99faf64de54a2c$export$2e2bcd8739ae039 {\n    constructor(tx){\n        if (tx instanceof (0, $926e193f4c554367$export$2e2bcd8739ae039)) this.transaction = tx;\n        else this.transaction = new (0, $926e193f4c554367$export$2e2bcd8739ae039)(tx);\n    }\n    build() {\n        return this.transaction;\n    }\n    /**\n   * Add an input to this transaction. This is a high level interface\n   * to add an input, for more control, use {@link Transaction.addInput}.\n   *\n   * Can receive, as output information, the output of nexad's `listunspent` command,\n   * with a slightly fancier format recognized by this sdk:\n   *\n   * ```json\n   * {\n   *  outpoint: \"fcf7d303d67f19568cf4ab72d36d583baac461e0f62f289b3dff68da96c2117c\"\n   *  scriptPubKey: \"005114891c4b19cbcaefc31770a938ebd6b1fafabb1be6\",\n   *  satoshis: 181998351\n   * }\n   * // or alternative:\n   * {\n   *  outpoint: \"fcf7d303d67f19568cf4ab72d36d583baac461e0f62f289b3dff68da96c2117c\"\n   *  address: \"nexa:nqtsq5g53ywykxwtethux9ms4yuwh443ltatkxlx3s5pnvwh\",\n   *  amount: 1819983.51\n   *  groupId: <token address if relevant>\n   *  groupAmount: <token amount if relevant>\n   * }\n   * ```\n   * Where `address` can be either a string or a nexcore Address object. The\n   * same is true for `script`, which can be a string or a nexcore Script.\n   * \n   * @see {@link UTXO}\n   *\n   * Beware that this resets all the signatures for inputs.\n   *\n   * @example\n   * ```javascript\n   * let builder = new TransactionBuilder();\n   *\n   * // From a pay to public key template output from nexad's listunspent\n   * builder.from({'outpoint': '0000...', amount: 123.23, scriptPubKey: 'OP_0 OP_1 ...'});\n   *\n   * // From a pay to public key template output (with optional group data)\n   * builder.from({'outpoint': '0000...', satoshis: 12323, address: 'nexa:nqtsq5g...', groupId? 'nexa:tnq...', groupAmount: 56446n });\n   *\n   * // From a script template output\n   * builder.from({'outpoint': '0000...', satoshis: 1000, scriptPubKey: '...', templateData: { templateScript: '...', constraintScript: '...' }};\n   * \n   * let transaction = builder.build();\n   * ```\n   * \n   * @param utxo details on the utxo\n   * @returns this, for chaining\n   */ from(utxo) {\n        if ((0, $hgUW1$isArray)(utxo)) {\n            utxo.forEach((u)=>this.from(u));\n            return this;\n        }\n        let exist = this.transaction.inputs.some((input)=>input.outpoint.toString('hex') === utxo.outpoint);\n        if (exist) return this;\n        return this._fromUtxo(new (0, $54bdedd720718511$export$2e2bcd8739ae039)(utxo), utxo.templateData);\n    }\n    _fromUtxo(utxo, templateData) {\n        let clazz;\n        if (utxo.scriptPubKey.isPublicKeyHashOut()) clazz = (0, $5cf2ce125ae8c2d7$export$2e2bcd8739ae039);\n        else if (utxo.scriptPubKey.isPublicKeyTemplateOut()) clazz = (0, $49712dfa37abdb5b$export$2e2bcd8739ae039);\n        else if (utxo.scriptPubKey.isScriptTemplateOut() && (0, $hgUW1$isObject)(templateData)) clazz = (0, $6995bc57838749e2$export$2e2bcd8739ae039);\n        else clazz = (0, $9b92277fa5d35484$export$2e2bcd8739ae039);\n        let input = new clazz({\n            output: new (0, $98955c312257c252$export$2e2bcd8739ae039)(utxo.satoshis, utxo.scriptPubKey),\n            outpoint: utxo.outpoint,\n            scriptSig: (0, $90f45db77a786f2b$export$2e2bcd8739ae039).empty(),\n            amount: utxo.satoshis,\n            templateData: templateData\n        });\n        this.transaction.addInput(input);\n        return this;\n    }\n    /**\n   * Add an output to the transaction.\n   *\n   * Beware that this resets all the signatures for inputs.\n   *\n   * @param address the destination address\n   * @param amount in satoshis, the nexa amount\n   * @param groupId optional. the token address if sending tokens\n   * @param groupAmount optional. the token amount if sending tokens\n   * \n   * @remarks if sending token, the nexa amount is usually {@link Transaction.DUST_AMOUNT}\n   * \n   * @returns this, for chaining\n   */ to(address, amount, groupId, groupAmount) {\n        let script = (0, $fea109eb8128bf4c$export$2e2bcd8739ae039).buildOutFromAddress(address, groupId, groupAmount);\n        let output = new (0, $98955c312257c252$export$2e2bcd8739ae039)(amount, script);\n        this.transaction.addOutput(output);\n        return this;\n    }\n    /**\n   * Add an OP_RETURN output to the transaction.\n   *\n   * Beware that this resets all the signatures for inputs.\n   *\n   * @param data the data to be stored in the OP_RETURN output.\n   *    In case of a string, the UTF-8 representation will be stored\n   * @param isFullScript if the provided data is already an op_return script. default false.\n   * @returns this, for chaining\n   */ addData(data, isFullScript = false) {\n        let script = isFullScript ? new (0, $90f45db77a786f2b$export$2e2bcd8739ae039)(data) : (0, $fea109eb8128bf4c$export$2e2bcd8739ae039).buildDataOut(data);\n        let output = new (0, $98955c312257c252$export$2e2bcd8739ae039)(0, script);\n        this.transaction.addOutput(output);\n        return this;\n    }\n    /**\n   * Set the change address for this transaction\n   *\n   * Beware that this resets all the signatures for inputs.\n   *\n   * @param address An address for change to be sent to.\n   * @returns this, for chaining\n   */ change(address) {\n        this.transaction.setChangeOutput(address);\n        return this;\n    }\n    /**\n   * Manually set the fee for this transaction. \n   * \n   * Beware that this resets all the signatures for inputs.\n   *\n   * @param amount satoshis to be used as fee\n   * @returns this, for chaining\n   */ fee(amount) {\n        this.transaction.setFee(amount);\n        return this;\n    }\n    /**\n   * Manually set the fee per Byte rate for this transaction.\n   * \n   * Beware that this resets all the signatures for inputs.\n   * \n   * @remarks fee per Byte will be ignored if fee property was set manually\n   *\n   * @param amount satoshis per Byte to be used as fee rate\n   * @returns this, for chaining\n   */ feePerByte(amount) {\n        this.transaction.setFeePerByte(amount);\n        return this;\n    }\n    /**\n   * Sets nLockTime so that transaction is not valid until the desired date\n   * \n   * (a timestamp in seconds since UNIX epoch is also accepted)\n   *\n   * @param datetime Date object or unix timestamp number\n   * @returns this, for chaining\n   */ lockUntilDate(datetime) {\n        (0, $e44f707fde477092$export$2e2bcd8739ae039).validateArgument(!(0, $hgUW1$isUndefined)(datetime), 'datetime');\n        if ((0, $hgUW1$isNumber)(datetime) && datetime < (0, $926e193f4c554367$export$2e2bcd8739ae039).NLOCKTIME_BLOCKHEIGHT_LIMIT) throw new Error(\"Lock Time can't be earlier than UNIX date 500 000 000\");\n        if ((0, $hgUW1$isDate)(datetime)) datetime = datetime.getTime() / 1000;\n        this.transaction.setLockTime(datetime);\n        return this;\n    }\n    /**\n   * Sets nLockTime so that transaction is not valid until the desired block height.\n   *\n   * @param height the block height\n   * @returns this, for chaining\n   */ lockUntilBlockHeight(height) {\n        if (height >= (0, $926e193f4c554367$export$2e2bcd8739ae039).NLOCKTIME_BLOCKHEIGHT_LIMIT) throw new Error(\"Block Height can be at most 2^32 - 1\");\n        if (height < 0) throw new Error(\"Block Height cannot be negative\");\n        this.transaction.setLockTime(height);\n        return this;\n    }\n    /**\n   * Sign the transaction using one or more private keys.\n   *\n   * It tries to sign each input, verifying that the signature will be valid\n   * (matches a public key). Usually this is the last step that should be used with the builder.\n   * \n   * @remarks this method sign all inputs and outputs (sighash type ALL).\n   *  \n   * if you need to sign a specific input or partial transaction\n   *  (create new or complete existing one), use {@link signInput} method.\n   *\n   * @param privateKey private key(s) that be used to sign\n   * @returns this, for chaining\n   */ sign(privateKey) {\n        (0, $e44f707fde477092$export$2e2bcd8739ae039).validateState(this.transaction.hasAllUtxoInfo(), 'Not all utxo information is available to sign the transaction.');\n        if ((0, $hgUW1$isArray)(privateKey)) {\n            privateKey.forEach((key)=>this.sign(key));\n            return this;\n        }\n        this._getSignatures(privateKey, (0, $e50a883097cd2090$export$2e2bcd8739ae039).ALL).forEach((sig)=>this._applySignature(sig));\n        return this;\n    }\n    /**\n   * Sign specific input using private key and sighash type.\n   * \n   * Use sigtype to determine which parts of the transaction to sign.\n   * \n   * @param input The input to sign. can be input index (number) or input outpoint hash (string)\n   * @param privateKey private key that be used to sign\n   * @param sigtype the sighash type to define which parts to include in the sighash\n   * @returns this, for chaining\n   */ signInput(input, privateKey, sigtype) {\n        if ((0, $hgUW1$isString)(input)) input = this.transaction.inputs.findIndex((inp)=>inp.outpoint.toString('hex') === input);\n        (0, $e44f707fde477092$export$2e2bcd8739ae039).validateArgument(input >= 0 && input < this.transaction.inputs.length, 'input', 'out of range.');\n        (0, $e44f707fde477092$export$2e2bcd8739ae039).validateState(this.transaction.inputs[input].canSign(privateKey), 'The provided key cannot sign this input');\n        let txSig = this._getSignature(input, privateKey, sigtype);\n        this._applySignature(txSig);\n        return this;\n    }\n    _getSignatures(privKey, sigtype) {\n        (0, $e44f707fde477092$export$2e2bcd8739ae039).validateArgument(privKey instanceof (0, $9e7155c0d97105d3$export$2e2bcd8739ae039), 'privKey', 'not a private key');\n        let signatures = [];\n        for(let i = 0; i < this.transaction.inputs.length; i++){\n            if (!this.transaction.inputs[i].canSign(privKey)) continue;\n            let txSig = this._getSignature(i, privKey, sigtype);\n            signatures.push(txSig);\n        }\n        return signatures;\n    }\n    _getSignature(index, privKey, sigtype) {\n        let subscript = this.transaction.inputs[index].getSubscript();\n        return new (0, $6ebeca4bc214d833$export$2e2bcd8739ae039)({\n            inputIndex: index,\n            publicKey: privKey.publicKey,\n            subscript: subscript,\n            signature: (0, $2dc9a1945ba915b1$export$2e2bcd8739ae039).sign(this.transaction, index, sigtype, subscript, privKey),\n            sigType: sigtype\n        });\n    }\n    _applySignature(signature) {\n        let isValid = (0, $2dc9a1945ba915b1$export$2e2bcd8739ae039).verify(this.transaction, signature.inputIndex, signature.signature, signature.sigType, signature.subscript, signature.publicKey);\n        (0, $e44f707fde477092$export$2e2bcd8739ae039).validateState(isValid, 'Signature is invalid');\n        this.transaction.inputs[signature.inputIndex].addSignature(signature);\n    }\n}\n\n\n\n\n\n\n\n\n\n\n\n\nclass $023a6329646d8372$export$2e2bcd8739ae039 {\n    static{\n        this.MAX_TIME_OFFSET = 7200;\n    }\n    constructor(data){\n        this.toJSON = this.toObject;\n        (0, $e44f707fde477092$export$2e2bcd8739ae039).validateArgument(!(0, $hgUW1$isNil)(data), 'data is required');\n        if ((0, $9f918c10ad4fef51$export$2e2bcd8739ae039).isBuffer(data)) data = $023a6329646d8372$export$2e2bcd8739ae039._fromBufferReader(new (0, $12fea2c2eb591556$export$2e2bcd8739ae039)(data));\n        else if (!(0, $hgUW1$isObject)(data)) throw new TypeError('Unrecognized argument for BlockHeader');\n        this.prevHash = (0, $hgUW1$isString)(data.prevHash) ? Buffer.from(data.prevHash, 'hex') : data.prevHash;\n        this.bits = data.bits;\n        this.ancestorHash = (0, $hgUW1$isString)(data.ancestorHash) ? Buffer.from(data.ancestorHash, 'hex') : data.ancestorHash;\n        this.merkleRoot = (0, $hgUW1$isString)(data.merkleRoot) ? Buffer.from(data.merkleRoot, 'hex') : data.merkleRoot;\n        this.txFilter = (0, $hgUW1$isString)(data.txFilter) ? Buffer.from(data.txFilter, 'hex') : data.txFilter;\n        this.time = data.time;\n        this.height = data.height;\n        this.chainWork = (0, $hgUW1$isString)(data.chainWork) ? Buffer.from(data.chainWork, 'hex') : data.chainWork;\n        this.size = data.size;\n        this.txCount = data.txCount;\n        this.poolFee = data.poolFee;\n        this.utxoCommitment = (0, $hgUW1$isString)(data.utxoCommitment) ? Buffer.from(data.utxoCommitment, 'hex') : data.utxoCommitment;\n        this.minerData = (0, $hgUW1$isString)(data.minerData) ? Buffer.from(data.minerData, 'hex') : data.minerData;\n        this.nonce = (0, $hgUW1$isString)(data.nonce) ? Buffer.from(data.nonce, 'hex') : data.nonce;\n        if (data.hash) (0, $e44f707fde477092$export$2e2bcd8739ae039).validateState(this.hash === data.hash, 'Argument object hash property does not match block hash.');\n    }\n    get hash() {\n        return this._getHash().reverse().toString('hex');\n    }\n    /**\n   * @returns The little endian hash buffer of the header\n   */ _getHash() {\n        let miniHeader = new (0, $35852622c8c617e8$export$2e2bcd8739ae039)();\n        miniHeader.writeReverse(this.prevHash);\n        miniHeader.writeInt32LE(this.bits);\n        let miniHash = (0, $62ca61b6ba036e1b$export$2e2bcd8739ae039).sha256(miniHeader.toBuffer());\n        let extHeader = new (0, $35852622c8c617e8$export$2e2bcd8739ae039)();\n        extHeader.writeReverse(this.ancestorHash);\n        extHeader.writeReverse(this.txFilter);\n        extHeader.writeReverse(this.merkleRoot);\n        extHeader.writeInt32LE(this.time);\n        extHeader.writeUInt64LEBN((0, $5aa97aebe18a7924$export$2e2bcd8739ae039).fromNumber(this.height));\n        extHeader.writeReverse(this.chainWork);\n        extHeader.writeUInt64LEBN((0, $5aa97aebe18a7924$export$2e2bcd8739ae039).fromNumber(this.size));\n        extHeader.writeUInt64LEBN((0, $5aa97aebe18a7924$export$2e2bcd8739ae039).fromNumber(this.txCount));\n        extHeader.writeUInt64LEBN((0, $5aa97aebe18a7924$export$2e2bcd8739ae039).fromNumber(this.poolFee));\n        extHeader.writeVarLengthBuf(this.utxoCommitment);\n        extHeader.writeVarLengthBuf(this.minerData);\n        extHeader.writeVarLengthBuf(this.nonce);\n        let extHash = (0, $62ca61b6ba036e1b$export$2e2bcd8739ae039).sha256(extHeader.toBuffer());\n        let commintment = new (0, $35852622c8c617e8$export$2e2bcd8739ae039)();\n        commintment.write(miniHash);\n        commintment.write(extHash);\n        return (0, $62ca61b6ba036e1b$export$2e2bcd8739ae039).sha256(commintment.toBuffer());\n    }\n    /**\n   * @param br A BufferReader of the block header\n   * @returns An object representing block header data\n   */ static _fromBufferReader(br) {\n        return {\n            prevHash: br.readReverse(32),\n            bits: br.readUInt32LE(),\n            ancestorHash: br.readReverse(32),\n            merkleRoot: br.readReverse(32),\n            txFilter: br.readReverse(32),\n            time: br.readUInt32LE(),\n            height: br.readCoreVarintNum(),\n            chainWork: br.readReverse(32),\n            size: br.readUInt64LEBN().toNumber(),\n            txCount: br.readCoreVarintNum(),\n            poolFee: br.readCoreVarintNum(),\n            utxoCommitment: br.readVarLengthBuffer(),\n            minerData: br.readVarLengthBuffer(),\n            nonce: br.readVarLengthBuffer()\n        };\n    }\n    /**\n   * This method is useful for hex that represent concatination of multiple headers\n   * so it able to serve in a loop.\n   * \n   * @param br A BufferReader of the block header\n   * @returns An instance of block header\n   */ static fromBufferReader(br) {\n        let info = this._fromBufferReader(br);\n        return new $023a6329646d8372$export$2e2bcd8739ae039(info);\n    }\n    /**\n   * @param header A plain JavaScript block header object\n   * @returns An instance of block header\n   */ static fromObject(header) {\n        return new $023a6329646d8372$export$2e2bcd8739ae039(header);\n    }\n    /**\n   * @param buf A buffer of the block header\n   * @returns An instance of block header\n   */ static fromBuffer(buf) {\n        return this.fromBufferReader(new (0, $12fea2c2eb591556$export$2e2bcd8739ae039)(buf));\n    }\n    /**\n   * @param hex A hex encoded buffer of the block header\n   * @returns An instance of block header\n   */ static fromString(hex) {\n        let buf = Buffer.from(hex, 'hex');\n        return this.fromBuffer(buf);\n    }\n    /**\n   * @returns A plain object of the BlockHeader\n   */ toObject() {\n        return {\n            hash: this.hash,\n            prevHash: this.prevHash.toString('hex'),\n            bits: this.bits,\n            ancestorHash: this.ancestorHash.toString('hex'),\n            merkleRoot: this.merkleRoot.toString('hex'),\n            txFilter: this.txFilter.toString('hex'),\n            time: this.time,\n            height: this.height,\n            chainWork: this.chainWork.toString('hex'),\n            size: this.size,\n            txCount: this.txCount,\n            poolFee: this.poolFee,\n            utxoCommitment: this.utxoCommitment.toString('hex'),\n            minerData: this.minerData.toString('hex'),\n            nonce: this.nonce.toString('hex')\n        };\n    }\n    /**\n   * @param bw - An existing instance BufferWriter\n   * @returns An instance of BufferWriter representation of the BlockHeader\n   */ toBufferWriter(bw) {\n        if (!bw) bw = new (0, $35852622c8c617e8$export$2e2bcd8739ae039)();\n        bw.writeReverse(this.prevHash);\n        bw.writeInt32LE(this.bits);\n        bw.writeReverse(this.ancestorHash);\n        bw.writeReverse(this.merkleRoot);\n        bw.writeReverse(this.txFilter);\n        bw.writeInt32LE(this.time);\n        bw.writeCoreVarintNum(this.height);\n        bw.writeReverse(this.chainWork);\n        bw.writeUInt64LEBN((0, $5aa97aebe18a7924$export$2e2bcd8739ae039).fromNumber(this.size));\n        bw.writeCoreVarintNum(this.txCount);\n        bw.writeCoreVarintNum(this.poolFee);\n        bw.writeVarLengthBuf(this.utxoCommitment);\n        bw.writeVarLengthBuf(this.minerData);\n        bw.writeVarLengthBuf(this.nonce);\n        return bw;\n    }\n    /**\n   * @returns A Buffer of the BlockHeader\n   */ toBuffer() {\n        return this.toBufferWriter().toBuffer();\n    }\n    /**\n   * @returns A hex encoded string of the BlockHeader\n   */ toString() {\n        return this.toBuffer().toString('hex');\n    }\n    /**\n   * @returns A string formatted for the console\n   */ inspect() {\n        return `<BlockHeader ${this.hash}>`;\n    }\n    /**\n   * Returns the target difficulty for this block\n   * \n   * @param bits the bits number\n   * @returns An instance of BN with the decoded difficulty bits\n   */ getTargetDifficulty(bits) {\n        let bitsBuf = (0, $5aa97aebe18a7924$export$2e2bcd8739ae039).fromNumber(bits || this.bits).toBuffer({\n            size: 4,\n            endian: 'little'\n        });\n        let exponent = (0, $5aa97aebe18a7924$export$2e2bcd8739ae039).fromBuffer(Buffer.from([\n            bitsBuf[0]\n        ]));\n        let significand = (0, $5aa97aebe18a7924$export$2e2bcd8739ae039).fromBuffer(bitsBuf.subarray(1));\n        let target = significand.toBigInt() * 2n ** (8n * (exponent.toBigInt() - 3n));\n        return new (0, $5aa97aebe18a7924$export$2e2bcd8739ae039)(target.toString());\n    }\n    /**\n   * @returns the target difficulty for this block\n   */ getDifficulty() {\n        let nShift = this.bits >> 24 & 0xff;\n        let dDiff = 0x0000ffff / (this.bits & 0x00ffffff);\n        while(nShift < 29){\n            dDiff *= 256.0;\n            nShift++;\n        }\n        while(nShift > 29){\n            dDiff /= 256.0;\n            nShift--;\n        }\n        return dDiff;\n    }\n    /**\n   * @returns true If timestamp is not too far in the future\n   */ validTimestamp() {\n        let currentTime = Math.round(new Date().getTime() / 1000);\n        return this.time <= currentTime + $023a6329646d8372$export$2e2bcd8739ae039.MAX_TIME_OFFSET;\n    }\n    /**\n   * @returns true If the proof-of-work hash satisfies the target difficulty\n   */ validProofOfWork() {\n        let pow = (0, $5aa97aebe18a7924$export$2e2bcd8739ae039).fromString(this.hash, 'hex');\n        let target = this.getTargetDifficulty();\n        return pow.lte(target);\n    }\n}\n\n\n\n\n\n\n\nclass $8f7c467a9646afdb$export$2e2bcd8739ae039 {\n    constructor(data){\n        this.toJSON = this.toObject;\n        (0, $e44f707fde477092$export$2e2bcd8739ae039).validateArgument(!(0, $hgUW1$isNil)(data), 'data is required');\n        if ((0, $9f918c10ad4fef51$export$2e2bcd8739ae039).isBuffer(data)) data = $8f7c467a9646afdb$export$2e2bcd8739ae039._fromBufferReader(new (0, $12fea2c2eb591556$export$2e2bcd8739ae039)(data));\n        else if (!(0, $hgUW1$isObject)(data)) throw new TypeError('Unrecognized argument for Block');\n        this.header = data.header instanceof (0, $023a6329646d8372$export$2e2bcd8739ae039) ? data.header : (0, $023a6329646d8372$export$2e2bcd8739ae039).fromObject(data.header);\n        this.transactions = [];\n        data.transactions.forEach((tx)=>{\n            if (tx instanceof (0, $926e193f4c554367$export$2e2bcd8739ae039)) this.transactions.push(tx);\n            else this.transactions.push(new (0, $926e193f4c554367$export$2e2bcd8739ae039)().fromObject(tx));\n        });\n    }\n    get hash() {\n        return this.header.hash;\n    }\n    /**\n   * @param obj A plain JavaScript object\n   * @returns An instance of block\n   */ static fromObject(obj) {\n        return new $8f7c467a9646afdb$export$2e2bcd8739ae039(obj);\n    }\n    /**\n   * @param br A BufferReader of the block\n   * @returns An object representing the block data\n   */ static _fromBufferReader(br) {\n        (0, $e44f707fde477092$export$2e2bcd8739ae039).validateState(!br.finished(), 'No block data received');\n        let header = (0, $023a6329646d8372$export$2e2bcd8739ae039).fromBufferReader(br);\n        let txNum = br.readVarintNum();\n        let transactions = [];\n        for(let i = 0; i < txNum; i++)transactions.push(new (0, $926e193f4c554367$export$2e2bcd8739ae039)().fromBufferReader(br));\n        return {\n            header: header,\n            transactions: transactions\n        };\n    }\n    /**\n   * @param br A buffer reader of the block\n   * @returns An instance of block\n   */ static fromBufferReader(br) {\n        (0, $e44f707fde477092$export$2e2bcd8739ae039).validateArgument(!(0, $hgUW1$isNil)(br), 'br is required');\n        let info = $8f7c467a9646afdb$export$2e2bcd8739ae039._fromBufferReader(br);\n        return new $8f7c467a9646afdb$export$2e2bcd8739ae039(info);\n    }\n    /**\n   * @param buf A buffer of the block\n   * @returns An instance of block\n   */ static fromBuffer(buf) {\n        return $8f7c467a9646afdb$export$2e2bcd8739ae039.fromBufferReader(new (0, $12fea2c2eb591556$export$2e2bcd8739ae039)(buf));\n    }\n    /**\n   * @param str A hex encoded string of the block\n   * @returns A hex encoded string of the block\n   */ static fromString(str) {\n        let buf = Buffer.from(str, 'hex');\n        return $8f7c467a9646afdb$export$2e2bcd8739ae039.fromBuffer(buf);\n    }\n    /**\n   * @returns A plain object with the block properties\n   */ toObject() {\n        return {\n            header: this.header.toObject(),\n            transactions: this.transactions.map((tx)=>tx.toObject())\n        };\n    }\n    /**\n   * @param bw An existing instance of BufferWriter (optional)\n   * @returns An instance of BufferWriter representation of the Block\n   */ toBufferWriter(bw) {\n        if (!bw) bw = new (0, $35852622c8c617e8$export$2e2bcd8739ae039)();\n        bw.write(this.header.toBuffer());\n        bw.writeVarintNum(this.transactions.length);\n        for (let tx of this.transactions)tx.toBufferWriter(bw);\n        return bw;\n    }\n    /**\n   * @returns A buffer of the block\n   */ toBuffer() {\n        return this.toBufferWriter().toBuffer();\n    }\n    /**\n   * @returns A hex encoded string of the block\n   */ toString() {\n        return this.toBuffer().toString('hex');\n    }\n    /**\n   * @returns A string formatted for the console\n   */ inspect() {\n        return `<Block ${this.hash}>`;\n    }\n    /**\n   * Will iterate through each transaction and return an array of hashes\n   * @returns An array with transaction hashes\n   */ getTransactionHashes() {\n        return this.transactions.map((tx)=>Buffer.from(tx.id, 'hex').reverse());\n    }\n    /**\n   * Will build a merkle tree of all the transactions, ultimately arriving at\n   * a single point, the merkle root.\n   * \n   * @see {@link https://spec.nexa.org/blocks/merkle-tree/}\n   * @returns An array with each level of the tree after the other.\n   */ getMerkleTree() {\n        let tree = this.getTransactionHashes();\n        let j = 0;\n        for(let size = this.transactions.length; size > 1; size = Math.floor((size + 1) / 2)){\n            for(let i = 0; i < size; i += 2){\n                let i2 = Math.min(i + 1, size - 1);\n                let buf = Buffer.concat([\n                    tree[j + i],\n                    tree[j + i2]\n                ]);\n                tree.push((0, $62ca61b6ba036e1b$export$2e2bcd8739ae039).sha256sha256(buf));\n            }\n            j += size;\n        }\n        return tree;\n    }\n    /**\n   * Calculates the merkleRoot from the transactions.\n   * \n   * @returns A buffer of the merkle root hash\n   */ getMerkleRoot() {\n        let tree = this.getMerkleTree();\n        return tree[tree.length - 1];\n    }\n    /**\n   * Verifies that the transactions in the block match the header merkle root\n   * \n   * @returns true If the merkle roots match\n   */ validMerkleRoot() {\n        let h = (0, $5aa97aebe18a7924$export$2e2bcd8739ae039).fromString((0, $9f918c10ad4fef51$export$2e2bcd8739ae039).reverse(this.header.merkleRoot).toString('hex'), 'hex');\n        let c = (0, $5aa97aebe18a7924$export$2e2bcd8739ae039).fromString(this.getMerkleRoot().toString('hex'), 'hex');\n        return h.eq(c);\n    }\n}\n\n\n\n\n\n\n\n\nfunction $149c1bd638913645$var$versionGuard(version) {\n    if (version !== undefined) {\n        let message = \"More than one instance of libnexa found. Please make sure to require libnexa and check that submodules do not also include their own libnexa dependency.\";\n        throw new Error(message);\n    }\n}\n$149c1bd638913645$var$versionGuard($parcel$global._libnexa_ver);\n$parcel$global._libnexa_ver = `v${0, $df64573ef6d51081$exports.version}`;\nconst $149c1bd638913645$var$crypto = {\n    BN: (0, $5aa97aebe18a7924$export$2e2bcd8739ae039),\n    Hash: $62ca61b6ba036e1b$export$2e2bcd8739ae039,\n    ECDSA: $1ef65db4b26d2b16$export$2e2bcd8739ae039,\n    Schnorr: $1739481af0c86d04$export$2e2bcd8739ae039,\n    Signature: $369a157b63fbc3fd$export$2e2bcd8739ae039\n};\nconst $149c1bd638913645$var$encoding = {\n    BufferReader: $12fea2c2eb591556$export$2e2bcd8739ae039,\n    BufferWriter: $35852622c8c617e8$export$2e2bcd8739ae039\n};\nconst $149c1bd638913645$var$utils = {\n    BufferUtils: $9f918c10ad4fef51$export$2e2bcd8739ae039,\n    CommonUtils: $c337f7a9455509cf$export$2e2bcd8739ae039,\n    UnitUtils: $05e660d5daa855e4$export$2e2bcd8739ae039\n};\nconst $149c1bd638913645$var$keys = {\n    PrivateKey: $9e7155c0d97105d3$export$2e2bcd8739ae039,\n    PublicKey: $246eb589bb078d6d$export$2e2bcd8739ae039,\n    HDPrivateKey: $8fc74ca0a6995b3b$export$2e2bcd8739ae039,\n    HDPublicKey: $ef69ee312dbfbba6$export$2e2bcd8739ae039\n};\nconst $149c1bd638913645$var$tx = {\n    Transaction: $926e193f4c554367$export$2e2bcd8739ae039,\n    Input: $9b92277fa5d35484$export$2e2bcd8739ae039,\n    PublicKeyHashInput: $5cf2ce125ae8c2d7$export$2e2bcd8739ae039,\n    PublicKeyTemplateInput: $49712dfa37abdb5b$export$2e2bcd8739ae039,\n    ScriptTemplateInput: $6995bc57838749e2$export$2e2bcd8739ae039,\n    Output: $98955c312257c252$export$2e2bcd8739ae039,\n    UnspentOutput: $54bdedd720718511$export$2e2bcd8739ae039,\n    TxSignature: $6ebeca4bc214d833$export$2e2bcd8739ae039,\n    TxSigner: $2dc9a1945ba915b1$export$2e2bcd8739ae039,\n    SighashType: $e50a883097cd2090$export$2e2bcd8739ae039\n};\nconst $149c1bd638913645$export$2e8191f482a38ccd = (0, $a89918d61ea4dca0$export$2e2bcd8739ae039).getInstance();\nconst $149c1bd638913645$var$libnexa = {\n    versionGuard: $149c1bd638913645$var$versionGuard,\n    version: `v${(0, $df64573ef6d51081$exports.version)}`,\n    crypto: $149c1bd638913645$var$crypto,\n    encoding: $149c1bd638913645$var$encoding,\n    utils: $149c1bd638913645$var$utils,\n    keys: $149c1bd638913645$var$keys,\n    tx: $149c1bd638913645$var$tx,\n    Networks: (0, $a89918d61ea4dca0$export$2e2bcd8739ae039).getInstance(),\n    Opcode: $92c0719d4ab9ac45$export$393941f88fd16991,\n    Script: $90f45db77a786f2b$export$2e2bcd8739ae039,\n    ScriptFactory: $fea109eb8128bf4c$export$2e2bcd8739ae039,\n    ScriptOpcode: $92c0719d4ab9ac45$export$2e2bcd8739ae039,\n    Address: $92cd415860c918d9$export$2e2bcd8739ae039,\n    Message: $62ed62398e988143$export$2e2bcd8739ae039,\n    TransactionBuilder: $bd99faf64de54a2c$export$2e2bcd8739ae039,\n    Block: $8f7c467a9646afdb$export$2e2bcd8739ae039,\n    BlockHeader: $023a6329646d8372$export$2e2bcd8739ae039,\n    GroupToken: $a0743653d736276e$export$2e2bcd8739ae039\n};\nvar $149c1bd638913645$export$2e2bcd8739ae039 = $149c1bd638913645$var$libnexa;\n\n\nexport {$149c1bd638913645$export$2e8191f482a38ccd as Networks, $149c1bd638913645$export$2e2bcd8739ae039 as default, $5aa97aebe18a7924$export$2e2bcd8739ae039 as BNExtended, $ba7e1a38972b2d09$export$2e2bcd8739ae039 as Point, $62ca61b6ba036e1b$export$2e2bcd8739ae039 as Hash, $369a157b63fbc3fd$export$2e2bcd8739ae039 as Signature, $2a1cae3adbd93346$export$2e2bcd8739ae039 as DigitalSignature, $1ef65db4b26d2b16$export$2e2bcd8739ae039 as ECDSA, $1739481af0c86d04$export$2e2bcd8739ae039 as Schnorr, $12fea2c2eb591556$export$2e2bcd8739ae039 as BufferReader, $35852622c8c617e8$export$2e2bcd8739ae039 as BufferWriter, $ddbf68ec49150fba$export$95be4ae94445245a as Network, $a89918d61ea4dca0$export$2e2bcd8739ae039 as NetworkManager, $05e660d5daa855e4$export$80d48287646c9e3b as UnitType, $05e660d5daa855e4$export$2e2bcd8739ae039 as UnitUtils, $9f918c10ad4fef51$export$2e2bcd8739ae039 as BufferUtils, $c337f7a9455509cf$export$2e2bcd8739ae039 as CommonUtils, $9e7155c0d97105d3$export$2e2bcd8739ae039 as PrivateKey, $246eb589bb078d6d$export$2e2bcd8739ae039 as PublicKey, $8fc74ca0a6995b3b$export$2e2bcd8739ae039 as HDPrivateKey, $ef69ee312dbfbba6$export$2e2bcd8739ae039 as HDPublicKey, $92c0719d4ab9ac45$export$393941f88fd16991 as Opcode, $92c0719d4ab9ac45$export$2e2bcd8739ae039 as ScriptOpcode, $90f45db77a786f2b$export$2e2bcd8739ae039 as Script, $fea109eb8128bf4c$export$2e2bcd8739ae039 as ScriptFactory, $92cd415860c918d9$export$2e2bcd8739ae039 as Address, $c889a5b1bdeeb100$export$189c6ba3eaa96ac2 as AddressType, $8f7c467a9646afdb$export$2e2bcd8739ae039 as Block, $023a6329646d8372$export$2e2bcd8739ae039 as BlockHeader, $e50a883097cd2090$export$2e2bcd8739ae039 as SighashType, $e50a883097cd2090$export$ae38be9ef660d12e as InputSighashType, $e50a883097cd2090$export$cc0d5ed6c4786851 as OutputSighashType, $926e193f4c554367$export$2e2bcd8739ae039 as Transaction, $54bdedd720718511$export$2e2bcd8739ae039 as UnspentOutput, $98955c312257c252$export$2e2bcd8739ae039 as Output, $98955c312257c252$export$be94d7b677b041dd as OutputType, $9b92277fa5d35484$export$2e2bcd8739ae039 as Input, $9b92277fa5d35484$export$476dfc2401bc286b as InputType, $49712dfa37abdb5b$export$2e2bcd8739ae039 as PublicKeyTemplateInput, $6995bc57838749e2$export$2e2bcd8739ae039 as ScriptTemplateInput, $5cf2ce125ae8c2d7$export$2e2bcd8739ae039 as PublicKeyHashInput, $2dc9a1945ba915b1$export$2e2bcd8739ae039 as TxSigner, $6ebeca4bc214d833$export$2e2bcd8739ae039 as TxSignature, $bd99faf64de54a2c$export$2e2bcd8739ae039 as TransactionBuilder, $62ed62398e988143$export$2e2bcd8739ae039 as Message, $a0743653d736276e$export$2e2bcd8739ae039 as GroupToken, $a0743653d736276e$export$7b9ebdcfe3200497 as GroupIdFlag, $a0743653d736276e$export$8da1cb8322810fc2 as GroupIdType};\n//# sourceMappingURL=index.web.mjs.map\n","export const crypto = typeof globalThis === 'object' && 'crypto' in globalThis ? globalThis.crypto : undefined;\n//# sourceMappingURL=crypto.js.map","/**\n * Utilities for hex, bytes, CSPRNG.\n * @module\n */\n/*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// We use WebCrypto aka globalThis.crypto, which exists in browsers and node.js 16+.\n// node.js versions earlier than v19 don't declare it in global scope.\n// For node.js, package.json#exports field mapping rewrites import\n// from `crypto` to `cryptoNode`, which imports native module.\n// Makes the utils un-importable in browsers without a bundler.\n// Once node.js 18 is deprecated (2025-04-30), we can just drop the import.\nimport { crypto } from '@noble/hashes/crypto';\n/** Checks if something is Uint8Array. Be careful: nodejs Buffer will return true. */\nexport function isBytes(a) {\n    return a instanceof Uint8Array || (ArrayBuffer.isView(a) && a.constructor.name === 'Uint8Array');\n}\n/** Asserts something is positive integer. */\nexport function anumber(n) {\n    if (!Number.isSafeInteger(n) || n < 0)\n        throw new Error('positive integer expected, got ' + n);\n}\n/** Asserts something is Uint8Array. */\nexport function abytes(b, ...lengths) {\n    if (!isBytes(b))\n        throw new Error('Uint8Array expected');\n    if (lengths.length > 0 && !lengths.includes(b.length))\n        throw new Error('Uint8Array expected of length ' + lengths + ', got length=' + b.length);\n}\n/** Asserts something is hash */\nexport function ahash(h) {\n    if (typeof h !== 'function' || typeof h.create !== 'function')\n        throw new Error('Hash should be wrapped by utils.createHasher');\n    anumber(h.outputLen);\n    anumber(h.blockLen);\n}\n/** Asserts a hash instance has not been destroyed / finished */\nexport function aexists(instance, checkFinished = true) {\n    if (instance.destroyed)\n        throw new Error('Hash instance has been destroyed');\n    if (checkFinished && instance.finished)\n        throw new Error('Hash#digest() has already been called');\n}\n/** Asserts output is properly-sized byte array */\nexport function aoutput(out, instance) {\n    abytes(out);\n    const min = instance.outputLen;\n    if (out.length < min) {\n        throw new Error('digestInto() expects output buffer of length at least ' + min);\n    }\n}\n/** Cast u8 / u16 / u32 to u8. */\nexport function u8(arr) {\n    return new Uint8Array(arr.buffer, arr.byteOffset, arr.byteLength);\n}\n/** Cast u8 / u16 / u32 to u32. */\nexport function u32(arr) {\n    return new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));\n}\n/** Zeroize a byte array. Warning: JS provides no guarantees. */\nexport function clean(...arrays) {\n    for (let i = 0; i < arrays.length; i++) {\n        arrays[i].fill(0);\n    }\n}\n/** Create DataView of an array for easy byte-level manipulation. */\nexport function createView(arr) {\n    return new DataView(arr.buffer, arr.byteOffset, arr.byteLength);\n}\n/** The rotate right (circular right shift) operation for uint32 */\nexport function rotr(word, shift) {\n    return (word << (32 - shift)) | (word >>> shift);\n}\n/** The rotate left (circular left shift) operation for uint32 */\nexport function rotl(word, shift) {\n    return (word << shift) | ((word >>> (32 - shift)) >>> 0);\n}\n/** Is current platform little-endian? Most are. Big-Endian platform: IBM */\nexport const isLE = /* @__PURE__ */ (() => new Uint8Array(new Uint32Array([0x11223344]).buffer)[0] === 0x44)();\n/** The byte swap operation for uint32 */\nexport function byteSwap(word) {\n    return (((word << 24) & 0xff000000) |\n        ((word << 8) & 0xff0000) |\n        ((word >>> 8) & 0xff00) |\n        ((word >>> 24) & 0xff));\n}\n/** Conditionally byte swap if on a big-endian platform */\nexport const swap8IfBE = isLE\n    ? (n) => n\n    : (n) => byteSwap(n);\n/** @deprecated */\nexport const byteSwapIfBE = swap8IfBE;\n/** In place byte swap for Uint32Array */\nexport function byteSwap32(arr) {\n    for (let i = 0; i < arr.length; i++) {\n        arr[i] = byteSwap(arr[i]);\n    }\n    return arr;\n}\nexport const swap32IfBE = isLE\n    ? (u) => u\n    : byteSwap32;\n// Built-in hex conversion https://caniuse.com/mdn-javascript_builtins_uint8array_fromhex\nconst hasHexBuiltin = /* @__PURE__ */ (() => \n// @ts-ignore\ntypeof Uint8Array.from([]).toHex === 'function' && typeof Uint8Array.fromHex === 'function')();\n// Array where index 0xf0 (240) is mapped to string 'f0'\nconst hexes = /* @__PURE__ */ Array.from({ length: 256 }, (_, i) => i.toString(16).padStart(2, '0'));\n/**\n * Convert byte array to hex string. Uses built-in function, when available.\n * @example bytesToHex(Uint8Array.from([0xca, 0xfe, 0x01, 0x23])) // 'cafe0123'\n */\nexport function bytesToHex(bytes) {\n    abytes(bytes);\n    // @ts-ignore\n    if (hasHexBuiltin)\n        return bytes.toHex();\n    // pre-caching improves the speed 6x\n    let hex = '';\n    for (let i = 0; i < bytes.length; i++) {\n        hex += hexes[bytes[i]];\n    }\n    return hex;\n}\n// We use optimized technique to convert hex string to byte array\nconst asciis = { _0: 48, _9: 57, A: 65, F: 70, a: 97, f: 102 };\nfunction asciiToBase16(ch) {\n    if (ch >= asciis._0 && ch <= asciis._9)\n        return ch - asciis._0; // '2' => 50-48\n    if (ch >= asciis.A && ch <= asciis.F)\n        return ch - (asciis.A - 10); // 'B' => 66-(65-10)\n    if (ch >= asciis.a && ch <= asciis.f)\n        return ch - (asciis.a - 10); // 'b' => 98-(97-10)\n    return;\n}\n/**\n * Convert hex string to byte array. Uses built-in function, when available.\n * @example hexToBytes('cafe0123') // Uint8Array.from([0xca, 0xfe, 0x01, 0x23])\n */\nexport function hexToBytes(hex) {\n    if (typeof hex !== 'string')\n        throw new Error('hex string expected, got ' + typeof hex);\n    // @ts-ignore\n    if (hasHexBuiltin)\n        return Uint8Array.fromHex(hex);\n    const hl = hex.length;\n    const al = hl / 2;\n    if (hl % 2)\n        throw new Error('hex string expected, got unpadded hex of length ' + hl);\n    const array = new Uint8Array(al);\n    for (let ai = 0, hi = 0; ai < al; ai++, hi += 2) {\n        const n1 = asciiToBase16(hex.charCodeAt(hi));\n        const n2 = asciiToBase16(hex.charCodeAt(hi + 1));\n        if (n1 === undefined || n2 === undefined) {\n            const char = hex[hi] + hex[hi + 1];\n            throw new Error('hex string expected, got non-hex character \"' + char + '\" at index ' + hi);\n        }\n        array[ai] = n1 * 16 + n2; // multiply first octet, e.g. 'a3' => 10*16+3 => 160 + 3 => 163\n    }\n    return array;\n}\n/**\n * There is no setImmediate in browser and setTimeout is slow.\n * Call of async fn will return Promise, which will be fullfiled only on\n * next scheduler queue processing step and this is exactly what we need.\n */\nexport const nextTick = async () => { };\n/** Returns control to thread each 'tick' ms to avoid blocking. */\nexport async function asyncLoop(iters, tick, cb) {\n    let ts = Date.now();\n    for (let i = 0; i < iters; i++) {\n        cb(i);\n        // Date.now() is not monotonic, so in case if clock goes backwards we return return control too\n        const diff = Date.now() - ts;\n        if (diff >= 0 && diff < tick)\n            continue;\n        await nextTick();\n        ts += diff;\n    }\n}\n/**\n * Converts string to bytes using UTF8 encoding.\n * @example utf8ToBytes('abc') // Uint8Array.from([97, 98, 99])\n */\nexport function utf8ToBytes(str) {\n    if (typeof str !== 'string')\n        throw new Error('string expected');\n    return new Uint8Array(new TextEncoder().encode(str)); // https://bugzil.la/1681809\n}\n/**\n * Converts bytes to string using UTF8 encoding.\n * @example bytesToUtf8(Uint8Array.from([97, 98, 99])) // 'abc'\n */\nexport function bytesToUtf8(bytes) {\n    return new TextDecoder().decode(bytes);\n}\n/**\n * Normalizes (non-hex) string or Uint8Array to Uint8Array.\n * Warning: when Uint8Array is passed, it would NOT get copied.\n * Keep in mind for future mutable operations.\n */\nexport function toBytes(data) {\n    if (typeof data === 'string')\n        data = utf8ToBytes(data);\n    abytes(data);\n    return data;\n}\n/**\n * Helper for KDFs: consumes uint8array or string.\n * When string is passed, does utf8 decoding, using TextDecoder.\n */\nexport function kdfInputToBytes(data) {\n    if (typeof data === 'string')\n        data = utf8ToBytes(data);\n    abytes(data);\n    return data;\n}\n/** Copies several Uint8Arrays into one. */\nexport function concatBytes(...arrays) {\n    let sum = 0;\n    for (let i = 0; i < arrays.length; i++) {\n        const a = arrays[i];\n        abytes(a);\n        sum += a.length;\n    }\n    const res = new Uint8Array(sum);\n    for (let i = 0, pad = 0; i < arrays.length; i++) {\n        const a = arrays[i];\n        res.set(a, pad);\n        pad += a.length;\n    }\n    return res;\n}\nexport function checkOpts(defaults, opts) {\n    if (opts !== undefined && {}.toString.call(opts) !== '[object Object]')\n        throw new Error('options should be object or undefined');\n    const merged = Object.assign(defaults, opts);\n    return merged;\n}\n/** For runtime check if class implements interface */\nexport class Hash {\n}\n/** Wraps hash function, creating an interface on top of it */\nexport function createHasher(hashCons) {\n    const hashC = (msg) => hashCons().update(toBytes(msg)).digest();\n    const tmp = hashCons();\n    hashC.outputLen = tmp.outputLen;\n    hashC.blockLen = tmp.blockLen;\n    hashC.create = () => hashCons();\n    return hashC;\n}\nexport function createOptHasher(hashCons) {\n    const hashC = (msg, opts) => hashCons(opts).update(toBytes(msg)).digest();\n    const tmp = hashCons({});\n    hashC.outputLen = tmp.outputLen;\n    hashC.blockLen = tmp.blockLen;\n    hashC.create = (opts) => hashCons(opts);\n    return hashC;\n}\nexport function createXOFer(hashCons) {\n    const hashC = (msg, opts) => hashCons(opts).update(toBytes(msg)).digest();\n    const tmp = hashCons({});\n    hashC.outputLen = tmp.outputLen;\n    hashC.blockLen = tmp.blockLen;\n    hashC.create = (opts) => hashCons(opts);\n    return hashC;\n}\nexport const wrapConstructor = createHasher;\nexport const wrapConstructorWithOpts = createOptHasher;\nexport const wrapXOFConstructorWithOpts = createXOFer;\n/** Cryptographically secure PRNG. Uses internal OS-level `crypto.getRandomValues`. */\nexport function randomBytes(bytesLength = 32) {\n    if (crypto && typeof crypto.getRandomValues === 'function') {\n        return crypto.getRandomValues(new Uint8Array(bytesLength));\n    }\n    // Legacy Node.js compatibility\n    if (crypto && typeof crypto.randomBytes === 'function') {\n        return Uint8Array.from(crypto.randomBytes(bytesLength));\n    }\n    throw new Error('crypto.getRandomValues must be defined');\n}\n//# sourceMappingURL=utils.js.map","/**\n * Internal Merkle-Damgard hash utils.\n * @module\n */\nimport { Hash, abytes, aexists, aoutput, clean, createView, toBytes } from \"./utils.js\";\n/** Polyfill for Safari 14. https://caniuse.com/mdn-javascript_builtins_dataview_setbiguint64 */\nexport function setBigUint64(view, byteOffset, value, isLE) {\n    if (typeof view.setBigUint64 === 'function')\n        return view.setBigUint64(byteOffset, value, isLE);\n    const _32n = BigInt(32);\n    const _u32_max = BigInt(0xffffffff);\n    const wh = Number((value >> _32n) & _u32_max);\n    const wl = Number(value & _u32_max);\n    const h = isLE ? 4 : 0;\n    const l = isLE ? 0 : 4;\n    view.setUint32(byteOffset + h, wh, isLE);\n    view.setUint32(byteOffset + l, wl, isLE);\n}\n/** Choice: a ? b : c */\nexport function Chi(a, b, c) {\n    return (a & b) ^ (~a & c);\n}\n/** Majority function, true if any two inputs is true. */\nexport function Maj(a, b, c) {\n    return (a & b) ^ (a & c) ^ (b & c);\n}\n/**\n * Merkle-Damgard hash construction base class.\n * Could be used to create MD5, RIPEMD, SHA1, SHA2.\n */\nexport class HashMD extends Hash {\n    constructor(blockLen, outputLen, padOffset, isLE) {\n        super();\n        this.finished = false;\n        this.length = 0;\n        this.pos = 0;\n        this.destroyed = false;\n        this.blockLen = blockLen;\n        this.outputLen = outputLen;\n        this.padOffset = padOffset;\n        this.isLE = isLE;\n        this.buffer = new Uint8Array(blockLen);\n        this.view = createView(this.buffer);\n    }\n    update(data) {\n        aexists(this);\n        data = toBytes(data);\n        abytes(data);\n        const { view, buffer, blockLen } = this;\n        const len = data.length;\n        for (let pos = 0; pos < len;) {\n            const take = Math.min(blockLen - this.pos, len - pos);\n            // Fast path: we have at least one block in input, cast it to view and process\n            if (take === blockLen) {\n                const dataView = createView(data);\n                for (; blockLen <= len - pos; pos += blockLen)\n                    this.process(dataView, pos);\n                continue;\n            }\n            buffer.set(data.subarray(pos, pos + take), this.pos);\n            this.pos += take;\n            pos += take;\n            if (this.pos === blockLen) {\n                this.process(view, 0);\n                this.pos = 0;\n            }\n        }\n        this.length += data.length;\n        this.roundClean();\n        return this;\n    }\n    digestInto(out) {\n        aexists(this);\n        aoutput(out, this);\n        this.finished = true;\n        // Padding\n        // We can avoid allocation of buffer for padding completely if it\n        // was previously not allocated here. But it won't change performance.\n        const { buffer, view, blockLen, isLE } = this;\n        let { pos } = this;\n        // append the bit '1' to the message\n        buffer[pos++] = 0b10000000;\n        clean(this.buffer.subarray(pos));\n        // we have less than padOffset left in buffer, so we cannot put length in\n        // current block, need process it and pad again\n        if (this.padOffset > blockLen - pos) {\n            this.process(view, 0);\n            pos = 0;\n        }\n        // Pad until full block byte with zeros\n        for (let i = pos; i < blockLen; i++)\n            buffer[i] = 0;\n        // Note: sha512 requires length to be 128bit integer, but length in JS will overflow before that\n        // You need to write around 2 exabytes (u64_max / 8 / (1024**6)) for this to happen.\n        // So we just write lowest 64 bits of that value.\n        setBigUint64(view, blockLen - 8, BigInt(this.length * 8), isLE);\n        this.process(view, 0);\n        const oview = createView(out);\n        const len = this.outputLen;\n        // NOTE: we do division by 4 later, which should be fused in single op with modulo by JIT\n        if (len % 4)\n            throw new Error('_sha2: outputLen should be aligned to 32bit');\n        const outLen = len / 4;\n        const state = this.get();\n        if (outLen > state.length)\n            throw new Error('_sha2: outputLen bigger than state');\n        for (let i = 0; i < outLen; i++)\n            oview.setUint32(4 * i, state[i], isLE);\n    }\n    digest() {\n        const { buffer, outputLen } = this;\n        this.digestInto(buffer);\n        const res = buffer.slice(0, outputLen);\n        this.destroy();\n        return res;\n    }\n    _cloneInto(to) {\n        to || (to = new this.constructor());\n        to.set(...this.get());\n        const { blockLen, buffer, length, finished, destroyed, pos } = this;\n        to.destroyed = destroyed;\n        to.finished = finished;\n        to.length = length;\n        to.pos = pos;\n        if (length % blockLen)\n            to.buffer.set(buffer);\n        return to;\n    }\n    clone() {\n        return this._cloneInto();\n    }\n}\n/**\n * Initial SHA-2 state: fractional parts of square roots of first 16 primes 2..53.\n * Check out `test/misc/sha2-gen-iv.js` for recomputation guide.\n */\n/** Initial SHA256 state. Bits 0..32 of frac part of sqrt of primes 2..19 */\nexport const SHA256_IV = /* @__PURE__ */ Uint32Array.from([\n    0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19,\n]);\n/** Initial SHA224 state. Bits 32..64 of frac part of sqrt of primes 23..53 */\nexport const SHA224_IV = /* @__PURE__ */ Uint32Array.from([\n    0xc1059ed8, 0x367cd507, 0x3070dd17, 0xf70e5939, 0xffc00b31, 0x68581511, 0x64f98fa7, 0xbefa4fa4,\n]);\n/** Initial SHA384 state. Bits 0..64 of frac part of sqrt of primes 23..53 */\nexport const SHA384_IV = /* @__PURE__ */ Uint32Array.from([\n    0xcbbb9d5d, 0xc1059ed8, 0x629a292a, 0x367cd507, 0x9159015a, 0x3070dd17, 0x152fecd8, 0xf70e5939,\n    0x67332667, 0xffc00b31, 0x8eb44a87, 0x68581511, 0xdb0c2e0d, 0x64f98fa7, 0x47b5481d, 0xbefa4fa4,\n]);\n/** Initial SHA512 state. Bits 0..64 of frac part of sqrt of primes 2..19 */\nexport const SHA512_IV = /* @__PURE__ */ Uint32Array.from([\n    0x6a09e667, 0xf3bcc908, 0xbb67ae85, 0x84caa73b, 0x3c6ef372, 0xfe94f82b, 0xa54ff53a, 0x5f1d36f1,\n    0x510e527f, 0xade682d1, 0x9b05688c, 0x2b3e6c1f, 0x1f83d9ab, 0xfb41bd6b, 0x5be0cd19, 0x137e2179,\n]);\n//# sourceMappingURL=_md.js.map","/**\n * Internal helpers for u64. BigUint64Array is too slow as per 2025, so we implement it using Uint32Array.\n * @todo re-check https://issues.chromium.org/issues/42212588\n * @module\n */\nconst U32_MASK64 = /* @__PURE__ */ BigInt(2 ** 32 - 1);\nconst _32n = /* @__PURE__ */ BigInt(32);\nfunction fromBig(n, le = false) {\n    if (le)\n        return { h: Number(n & U32_MASK64), l: Number((n >> _32n) & U32_MASK64) };\n    return { h: Number((n >> _32n) & U32_MASK64) | 0, l: Number(n & U32_MASK64) | 0 };\n}\nfunction split(lst, le = false) {\n    const len = lst.length;\n    let Ah = new Uint32Array(len);\n    let Al = new Uint32Array(len);\n    for (let i = 0; i < len; i++) {\n        const { h, l } = fromBig(lst[i], le);\n        [Ah[i], Al[i]] = [h, l];\n    }\n    return [Ah, Al];\n}\nconst toBig = (h, l) => (BigInt(h >>> 0) << _32n) | BigInt(l >>> 0);\n// for Shift in [0, 32)\nconst shrSH = (h, _l, s) => h >>> s;\nconst shrSL = (h, l, s) => (h << (32 - s)) | (l >>> s);\n// Right rotate for Shift in [1, 32)\nconst rotrSH = (h, l, s) => (h >>> s) | (l << (32 - s));\nconst rotrSL = (h, l, s) => (h << (32 - s)) | (l >>> s);\n// Right rotate for Shift in (32, 64), NOTE: 32 is special case.\nconst rotrBH = (h, l, s) => (h << (64 - s)) | (l >>> (s - 32));\nconst rotrBL = (h, l, s) => (h >>> (s - 32)) | (l << (64 - s));\n// Right rotate for shift===32 (just swaps l&h)\nconst rotr32H = (_h, l) => l;\nconst rotr32L = (h, _l) => h;\n// Left rotate for Shift in [1, 32)\nconst rotlSH = (h, l, s) => (h << s) | (l >>> (32 - s));\nconst rotlSL = (h, l, s) => (l << s) | (h >>> (32 - s));\n// Left rotate for Shift in (32, 64), NOTE: 32 is special case.\nconst rotlBH = (h, l, s) => (l << (s - 32)) | (h >>> (64 - s));\nconst rotlBL = (h, l, s) => (h << (s - 32)) | (l >>> (64 - s));\n// JS uses 32-bit signed integers for bitwise operations which means we cannot\n// simple take carry out of low bit sum by shift, we need to use division.\nfunction add(Ah, Al, Bh, Bl) {\n    const l = (Al >>> 0) + (Bl >>> 0);\n    return { h: (Ah + Bh + ((l / 2 ** 32) | 0)) | 0, l: l | 0 };\n}\n// Addition with more than 2 elements\nconst add3L = (Al, Bl, Cl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0);\nconst add3H = (low, Ah, Bh, Ch) => (Ah + Bh + Ch + ((low / 2 ** 32) | 0)) | 0;\nconst add4L = (Al, Bl, Cl, Dl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0);\nconst add4H = (low, Ah, Bh, Ch, Dh) => (Ah + Bh + Ch + Dh + ((low / 2 ** 32) | 0)) | 0;\nconst add5L = (Al, Bl, Cl, Dl, El) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0) + (El >>> 0);\nconst add5H = (low, Ah, Bh, Ch, Dh, Eh) => (Ah + Bh + Ch + Dh + Eh + ((low / 2 ** 32) | 0)) | 0;\n// prettier-ignore\nexport { add, add3H, add3L, add4H, add4L, add5H, add5L, fromBig, rotlBH, rotlBL, rotlSH, rotlSL, rotr32H, rotr32L, rotrBH, rotrBL, rotrSH, rotrSL, shrSH, shrSL, split, toBig };\n// prettier-ignore\nconst u64 = {\n    fromBig, split, toBig,\n    shrSH, shrSL,\n    rotrSH, rotrSL, rotrBH, rotrBL,\n    rotr32H, rotr32L,\n    rotlSH, rotlSL, rotlBH, rotlBL,\n    add, add3L, add3H, add4L, add4H, add5H, add5L,\n};\nexport default u64;\n//# sourceMappingURL=_u64.js.map","/**\n * SHA2 hash function. A.k.a. sha256, sha384, sha512, sha512_224, sha512_256.\n * SHA256 is the fastest hash implementable in JS, even faster than Blake3.\n * Check out [RFC 4634](https://datatracker.ietf.org/doc/html/rfc4634) and\n * [FIPS 180-4](https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf).\n * @module\n */\nimport { Chi, HashMD, Maj, SHA224_IV, SHA256_IV, SHA384_IV, SHA512_IV } from \"./_md.js\";\nimport * as u64 from \"./_u64.js\";\nimport { clean, createHasher, rotr } from \"./utils.js\";\n/**\n * Round constants:\n * First 32 bits of fractional parts of the cube roots of the first 64 primes 2..311)\n */\n// prettier-ignore\nconst SHA256_K = /* @__PURE__ */ Uint32Array.from([\n    0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n    0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n    0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n    0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n    0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n    0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n    0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n    0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2\n]);\n/** Reusable temporary buffer. \"W\" comes straight from spec. */\nconst SHA256_W = /* @__PURE__ */ new Uint32Array(64);\nexport class SHA256 extends HashMD {\n    constructor(outputLen = 32) {\n        super(64, outputLen, 8, false);\n        // We cannot use array here since array allows indexing by variable\n        // which means optimizer/compiler cannot use registers.\n        this.A = SHA256_IV[0] | 0;\n        this.B = SHA256_IV[1] | 0;\n        this.C = SHA256_IV[2] | 0;\n        this.D = SHA256_IV[3] | 0;\n        this.E = SHA256_IV[4] | 0;\n        this.F = SHA256_IV[5] | 0;\n        this.G = SHA256_IV[6] | 0;\n        this.H = SHA256_IV[7] | 0;\n    }\n    get() {\n        const { A, B, C, D, E, F, G, H } = this;\n        return [A, B, C, D, E, F, G, H];\n    }\n    // prettier-ignore\n    set(A, B, C, D, E, F, G, H) {\n        this.A = A | 0;\n        this.B = B | 0;\n        this.C = C | 0;\n        this.D = D | 0;\n        this.E = E | 0;\n        this.F = F | 0;\n        this.G = G | 0;\n        this.H = H | 0;\n    }\n    process(view, offset) {\n        // Extend the first 16 words into the remaining 48 words w[16..63] of the message schedule array\n        for (let i = 0; i < 16; i++, offset += 4)\n            SHA256_W[i] = view.getUint32(offset, false);\n        for (let i = 16; i < 64; i++) {\n            const W15 = SHA256_W[i - 15];\n            const W2 = SHA256_W[i - 2];\n            const s0 = rotr(W15, 7) ^ rotr(W15, 18) ^ (W15 >>> 3);\n            const s1 = rotr(W2, 17) ^ rotr(W2, 19) ^ (W2 >>> 10);\n            SHA256_W[i] = (s1 + SHA256_W[i - 7] + s0 + SHA256_W[i - 16]) | 0;\n        }\n        // Compression function main loop, 64 rounds\n        let { A, B, C, D, E, F, G, H } = this;\n        for (let i = 0; i < 64; i++) {\n            const sigma1 = rotr(E, 6) ^ rotr(E, 11) ^ rotr(E, 25);\n            const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;\n            const sigma0 = rotr(A, 2) ^ rotr(A, 13) ^ rotr(A, 22);\n            const T2 = (sigma0 + Maj(A, B, C)) | 0;\n            H = G;\n            G = F;\n            F = E;\n            E = (D + T1) | 0;\n            D = C;\n            C = B;\n            B = A;\n            A = (T1 + T2) | 0;\n        }\n        // Add the compressed chunk to the current hash value\n        A = (A + this.A) | 0;\n        B = (B + this.B) | 0;\n        C = (C + this.C) | 0;\n        D = (D + this.D) | 0;\n        E = (E + this.E) | 0;\n        F = (F + this.F) | 0;\n        G = (G + this.G) | 0;\n        H = (H + this.H) | 0;\n        this.set(A, B, C, D, E, F, G, H);\n    }\n    roundClean() {\n        clean(SHA256_W);\n    }\n    destroy() {\n        this.set(0, 0, 0, 0, 0, 0, 0, 0);\n        clean(this.buffer);\n    }\n}\nexport class SHA224 extends SHA256 {\n    constructor() {\n        super(28);\n        this.A = SHA224_IV[0] | 0;\n        this.B = SHA224_IV[1] | 0;\n        this.C = SHA224_IV[2] | 0;\n        this.D = SHA224_IV[3] | 0;\n        this.E = SHA224_IV[4] | 0;\n        this.F = SHA224_IV[5] | 0;\n        this.G = SHA224_IV[6] | 0;\n        this.H = SHA224_IV[7] | 0;\n    }\n}\n// SHA2-512 is slower than sha256 in js because u64 operations are slow.\n// Round contants\n// First 32 bits of the fractional parts of the cube roots of the first 80 primes 2..409\n// prettier-ignore\nconst K512 = /* @__PURE__ */ (() => u64.split([\n    '0x428a2f98d728ae22', '0x7137449123ef65cd', '0xb5c0fbcfec4d3b2f', '0xe9b5dba58189dbbc',\n    '0x3956c25bf348b538', '0x59f111f1b605d019', '0x923f82a4af194f9b', '0xab1c5ed5da6d8118',\n    '0xd807aa98a3030242', '0x12835b0145706fbe', '0x243185be4ee4b28c', '0x550c7dc3d5ffb4e2',\n    '0x72be5d74f27b896f', '0x80deb1fe3b1696b1', '0x9bdc06a725c71235', '0xc19bf174cf692694',\n    '0xe49b69c19ef14ad2', '0xefbe4786384f25e3', '0x0fc19dc68b8cd5b5', '0x240ca1cc77ac9c65',\n    '0x2de92c6f592b0275', '0x4a7484aa6ea6e483', '0x5cb0a9dcbd41fbd4', '0x76f988da831153b5',\n    '0x983e5152ee66dfab', '0xa831c66d2db43210', '0xb00327c898fb213f', '0xbf597fc7beef0ee4',\n    '0xc6e00bf33da88fc2', '0xd5a79147930aa725', '0x06ca6351e003826f', '0x142929670a0e6e70',\n    '0x27b70a8546d22ffc', '0x2e1b21385c26c926', '0x4d2c6dfc5ac42aed', '0x53380d139d95b3df',\n    '0x650a73548baf63de', '0x766a0abb3c77b2a8', '0x81c2c92e47edaee6', '0x92722c851482353b',\n    '0xa2bfe8a14cf10364', '0xa81a664bbc423001', '0xc24b8b70d0f89791', '0xc76c51a30654be30',\n    '0xd192e819d6ef5218', '0xd69906245565a910', '0xf40e35855771202a', '0x106aa07032bbd1b8',\n    '0x19a4c116b8d2d0c8', '0x1e376c085141ab53', '0x2748774cdf8eeb99', '0x34b0bcb5e19b48a8',\n    '0x391c0cb3c5c95a63', '0x4ed8aa4ae3418acb', '0x5b9cca4f7763e373', '0x682e6ff3d6b2b8a3',\n    '0x748f82ee5defb2fc', '0x78a5636f43172f60', '0x84c87814a1f0ab72', '0x8cc702081a6439ec',\n    '0x90befffa23631e28', '0xa4506cebde82bde9', '0xbef9a3f7b2c67915', '0xc67178f2e372532b',\n    '0xca273eceea26619c', '0xd186b8c721c0c207', '0xeada7dd6cde0eb1e', '0xf57d4f7fee6ed178',\n    '0x06f067aa72176fba', '0x0a637dc5a2c898a6', '0x113f9804bef90dae', '0x1b710b35131c471b',\n    '0x28db77f523047d84', '0x32caab7b40c72493', '0x3c9ebe0a15c9bebc', '0x431d67c49c100d4c',\n    '0x4cc5d4becb3e42b6', '0x597f299cfc657e2a', '0x5fcb6fab3ad6faec', '0x6c44198c4a475817'\n].map(n => BigInt(n))))();\nconst SHA512_Kh = /* @__PURE__ */ (() => K512[0])();\nconst SHA512_Kl = /* @__PURE__ */ (() => K512[1])();\n// Reusable temporary buffers\nconst SHA512_W_H = /* @__PURE__ */ new Uint32Array(80);\nconst SHA512_W_L = /* @__PURE__ */ new Uint32Array(80);\nexport class SHA512 extends HashMD {\n    constructor(outputLen = 64) {\n        super(128, outputLen, 16, false);\n        // We cannot use array here since array allows indexing by variable\n        // which means optimizer/compiler cannot use registers.\n        // h -- high 32 bits, l -- low 32 bits\n        this.Ah = SHA512_IV[0] | 0;\n        this.Al = SHA512_IV[1] | 0;\n        this.Bh = SHA512_IV[2] | 0;\n        this.Bl = SHA512_IV[3] | 0;\n        this.Ch = SHA512_IV[4] | 0;\n        this.Cl = SHA512_IV[5] | 0;\n        this.Dh = SHA512_IV[6] | 0;\n        this.Dl = SHA512_IV[7] | 0;\n        this.Eh = SHA512_IV[8] | 0;\n        this.El = SHA512_IV[9] | 0;\n        this.Fh = SHA512_IV[10] | 0;\n        this.Fl = SHA512_IV[11] | 0;\n        this.Gh = SHA512_IV[12] | 0;\n        this.Gl = SHA512_IV[13] | 0;\n        this.Hh = SHA512_IV[14] | 0;\n        this.Hl = SHA512_IV[15] | 0;\n    }\n    // prettier-ignore\n    get() {\n        const { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;\n        return [Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl];\n    }\n    // prettier-ignore\n    set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl) {\n        this.Ah = Ah | 0;\n        this.Al = Al | 0;\n        this.Bh = Bh | 0;\n        this.Bl = Bl | 0;\n        this.Ch = Ch | 0;\n        this.Cl = Cl | 0;\n        this.Dh = Dh | 0;\n        this.Dl = Dl | 0;\n        this.Eh = Eh | 0;\n        this.El = El | 0;\n        this.Fh = Fh | 0;\n        this.Fl = Fl | 0;\n        this.Gh = Gh | 0;\n        this.Gl = Gl | 0;\n        this.Hh = Hh | 0;\n        this.Hl = Hl | 0;\n    }\n    process(view, offset) {\n        // Extend the first 16 words into the remaining 64 words w[16..79] of the message schedule array\n        for (let i = 0; i < 16; i++, offset += 4) {\n            SHA512_W_H[i] = view.getUint32(offset);\n            SHA512_W_L[i] = view.getUint32((offset += 4));\n        }\n        for (let i = 16; i < 80; i++) {\n            // s0 := (w[i-15] rightrotate 1) xor (w[i-15] rightrotate 8) xor (w[i-15] rightshift 7)\n            const W15h = SHA512_W_H[i - 15] | 0;\n            const W15l = SHA512_W_L[i - 15] | 0;\n            const s0h = u64.rotrSH(W15h, W15l, 1) ^ u64.rotrSH(W15h, W15l, 8) ^ u64.shrSH(W15h, W15l, 7);\n            const s0l = u64.rotrSL(W15h, W15l, 1) ^ u64.rotrSL(W15h, W15l, 8) ^ u64.shrSL(W15h, W15l, 7);\n            // s1 := (w[i-2] rightrotate 19) xor (w[i-2] rightrotate 61) xor (w[i-2] rightshift 6)\n            const W2h = SHA512_W_H[i - 2] | 0;\n            const W2l = SHA512_W_L[i - 2] | 0;\n            const s1h = u64.rotrSH(W2h, W2l, 19) ^ u64.rotrBH(W2h, W2l, 61) ^ u64.shrSH(W2h, W2l, 6);\n            const s1l = u64.rotrSL(W2h, W2l, 19) ^ u64.rotrBL(W2h, W2l, 61) ^ u64.shrSL(W2h, W2l, 6);\n            // SHA256_W[i] = s0 + s1 + SHA256_W[i - 7] + SHA256_W[i - 16];\n            const SUMl = u64.add4L(s0l, s1l, SHA512_W_L[i - 7], SHA512_W_L[i - 16]);\n            const SUMh = u64.add4H(SUMl, s0h, s1h, SHA512_W_H[i - 7], SHA512_W_H[i - 16]);\n            SHA512_W_H[i] = SUMh | 0;\n            SHA512_W_L[i] = SUMl | 0;\n        }\n        let { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;\n        // Compression function main loop, 80 rounds\n        for (let i = 0; i < 80; i++) {\n            // S1 := (e rightrotate 14) xor (e rightrotate 18) xor (e rightrotate 41)\n            const sigma1h = u64.rotrSH(Eh, El, 14) ^ u64.rotrSH(Eh, El, 18) ^ u64.rotrBH(Eh, El, 41);\n            const sigma1l = u64.rotrSL(Eh, El, 14) ^ u64.rotrSL(Eh, El, 18) ^ u64.rotrBL(Eh, El, 41);\n            //const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;\n            const CHIh = (Eh & Fh) ^ (~Eh & Gh);\n            const CHIl = (El & Fl) ^ (~El & Gl);\n            // T1 = H + sigma1 + Chi(E, F, G) + SHA512_K[i] + SHA512_W[i]\n            // prettier-ignore\n            const T1ll = u64.add5L(Hl, sigma1l, CHIl, SHA512_Kl[i], SHA512_W_L[i]);\n            const T1h = u64.add5H(T1ll, Hh, sigma1h, CHIh, SHA512_Kh[i], SHA512_W_H[i]);\n            const T1l = T1ll | 0;\n            // S0 := (a rightrotate 28) xor (a rightrotate 34) xor (a rightrotate 39)\n            const sigma0h = u64.rotrSH(Ah, Al, 28) ^ u64.rotrBH(Ah, Al, 34) ^ u64.rotrBH(Ah, Al, 39);\n            const sigma0l = u64.rotrSL(Ah, Al, 28) ^ u64.rotrBL(Ah, Al, 34) ^ u64.rotrBL(Ah, Al, 39);\n            const MAJh = (Ah & Bh) ^ (Ah & Ch) ^ (Bh & Ch);\n            const MAJl = (Al & Bl) ^ (Al & Cl) ^ (Bl & Cl);\n            Hh = Gh | 0;\n            Hl = Gl | 0;\n            Gh = Fh | 0;\n            Gl = Fl | 0;\n            Fh = Eh | 0;\n            Fl = El | 0;\n            ({ h: Eh, l: El } = u64.add(Dh | 0, Dl | 0, T1h | 0, T1l | 0));\n            Dh = Ch | 0;\n            Dl = Cl | 0;\n            Ch = Bh | 0;\n            Cl = Bl | 0;\n            Bh = Ah | 0;\n            Bl = Al | 0;\n            const All = u64.add3L(T1l, sigma0l, MAJl);\n            Ah = u64.add3H(All, T1h, sigma0h, MAJh);\n            Al = All | 0;\n        }\n        // Add the compressed chunk to the current hash value\n        ({ h: Ah, l: Al } = u64.add(this.Ah | 0, this.Al | 0, Ah | 0, Al | 0));\n        ({ h: Bh, l: Bl } = u64.add(this.Bh | 0, this.Bl | 0, Bh | 0, Bl | 0));\n        ({ h: Ch, l: Cl } = u64.add(this.Ch | 0, this.Cl | 0, Ch | 0, Cl | 0));\n        ({ h: Dh, l: Dl } = u64.add(this.Dh | 0, this.Dl | 0, Dh | 0, Dl | 0));\n        ({ h: Eh, l: El } = u64.add(this.Eh | 0, this.El | 0, Eh | 0, El | 0));\n        ({ h: Fh, l: Fl } = u64.add(this.Fh | 0, this.Fl | 0, Fh | 0, Fl | 0));\n        ({ h: Gh, l: Gl } = u64.add(this.Gh | 0, this.Gl | 0, Gh | 0, Gl | 0));\n        ({ h: Hh, l: Hl } = u64.add(this.Hh | 0, this.Hl | 0, Hh | 0, Hl | 0));\n        this.set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl);\n    }\n    roundClean() {\n        clean(SHA512_W_H, SHA512_W_L);\n    }\n    destroy() {\n        clean(this.buffer);\n        this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);\n    }\n}\nexport class SHA384 extends SHA512 {\n    constructor() {\n        super(48);\n        this.Ah = SHA384_IV[0] | 0;\n        this.Al = SHA384_IV[1] | 0;\n        this.Bh = SHA384_IV[2] | 0;\n        this.Bl = SHA384_IV[3] | 0;\n        this.Ch = SHA384_IV[4] | 0;\n        this.Cl = SHA384_IV[5] | 0;\n        this.Dh = SHA384_IV[6] | 0;\n        this.Dl = SHA384_IV[7] | 0;\n        this.Eh = SHA384_IV[8] | 0;\n        this.El = SHA384_IV[9] | 0;\n        this.Fh = SHA384_IV[10] | 0;\n        this.Fl = SHA384_IV[11] | 0;\n        this.Gh = SHA384_IV[12] | 0;\n        this.Gl = SHA384_IV[13] | 0;\n        this.Hh = SHA384_IV[14] | 0;\n        this.Hl = SHA384_IV[15] | 0;\n    }\n}\n/**\n * Truncated SHA512/256 and SHA512/224.\n * SHA512_IV is XORed with 0xa5a5a5a5a5a5a5a5, then used as \"intermediary\" IV of SHA512/t.\n * Then t hashes string to produce result IV.\n * See `test/misc/sha2-gen-iv.js`.\n */\n/** SHA512/224 IV */\nconst T224_IV = /* @__PURE__ */ Uint32Array.from([\n    0x8c3d37c8, 0x19544da2, 0x73e19966, 0x89dcd4d6, 0x1dfab7ae, 0x32ff9c82, 0x679dd514, 0x582f9fcf,\n    0x0f6d2b69, 0x7bd44da8, 0x77e36f73, 0x04c48942, 0x3f9d85a8, 0x6a1d36c8, 0x1112e6ad, 0x91d692a1,\n]);\n/** SHA512/256 IV */\nconst T256_IV = /* @__PURE__ */ Uint32Array.from([\n    0x22312194, 0xfc2bf72c, 0x9f555fa3, 0xc84c64c2, 0x2393b86b, 0x6f53b151, 0x96387719, 0x5940eabd,\n    0x96283ee2, 0xa88effe3, 0xbe5e1e25, 0x53863992, 0x2b0199fc, 0x2c85b8aa, 0x0eb72ddc, 0x81c52ca2,\n]);\nexport class SHA512_224 extends SHA512 {\n    constructor() {\n        super(28);\n        this.Ah = T224_IV[0] | 0;\n        this.Al = T224_IV[1] | 0;\n        this.Bh = T224_IV[2] | 0;\n        this.Bl = T224_IV[3] | 0;\n        this.Ch = T224_IV[4] | 0;\n        this.Cl = T224_IV[5] | 0;\n        this.Dh = T224_IV[6] | 0;\n        this.Dl = T224_IV[7] | 0;\n        this.Eh = T224_IV[8] | 0;\n        this.El = T224_IV[9] | 0;\n        this.Fh = T224_IV[10] | 0;\n        this.Fl = T224_IV[11] | 0;\n        this.Gh = T224_IV[12] | 0;\n        this.Gl = T224_IV[13] | 0;\n        this.Hh = T224_IV[14] | 0;\n        this.Hl = T224_IV[15] | 0;\n    }\n}\nexport class SHA512_256 extends SHA512 {\n    constructor() {\n        super(32);\n        this.Ah = T256_IV[0] | 0;\n        this.Al = T256_IV[1] | 0;\n        this.Bh = T256_IV[2] | 0;\n        this.Bl = T256_IV[3] | 0;\n        this.Ch = T256_IV[4] | 0;\n        this.Cl = T256_IV[5] | 0;\n        this.Dh = T256_IV[6] | 0;\n        this.Dl = T256_IV[7] | 0;\n        this.Eh = T256_IV[8] | 0;\n        this.El = T256_IV[9] | 0;\n        this.Fh = T256_IV[10] | 0;\n        this.Fl = T256_IV[11] | 0;\n        this.Gh = T256_IV[12] | 0;\n        this.Gl = T256_IV[13] | 0;\n        this.Hh = T256_IV[14] | 0;\n        this.Hl = T256_IV[15] | 0;\n    }\n}\n/**\n * SHA2-256 hash function from RFC 4634.\n *\n * It is the fastest JS hash, even faster than Blake3.\n * To break sha256 using birthday attack, attackers need to try 2^128 hashes.\n * BTC network is doing 2^70 hashes/sec (2^95 hashes/year) as per 2025.\n */\nexport const sha256 = /* @__PURE__ */ createHasher(() => new SHA256());\n/** SHA2-224 hash function from RFC 4634 */\nexport const sha224 = /* @__PURE__ */ createHasher(() => new SHA224());\n/** SHA2-512 hash function from RFC 4634. */\nexport const sha512 = /* @__PURE__ */ createHasher(() => new SHA512());\n/** SHA2-384 hash function from RFC 4634. */\nexport const sha384 = /* @__PURE__ */ createHasher(() => new SHA384());\n/**\n * SHA2-512/256 \"truncated\" hash function, with improved resistance to length extension attacks.\n * See the paper on [truncated SHA512](https://eprint.iacr.org/2010/548.pdf).\n */\nexport const sha512_256 = /* @__PURE__ */ createHasher(() => new SHA512_256());\n/**\n * SHA2-512/224 \"truncated\" hash function, with improved resistance to length extension attacks.\n * See the paper on [truncated SHA512](https://eprint.iacr.org/2010/548.pdf).\n */\nexport const sha512_224 = /* @__PURE__ */ createHasher(() => new SHA512_224());\n//# sourceMappingURL=sha2.js.map","/**\n * SHA2-256 a.k.a. sha256. In JS, it is the fastest hash, even faster than Blake3.\n *\n * To break sha256 using birthday attack, attackers need to try 2^128 hashes.\n * BTC network is doing 2^70 hashes/sec (2^95 hashes/year) as per 2025.\n *\n * Check out [FIPS 180-4](https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf).\n * @module\n * @deprecated\n */\nimport { SHA224 as SHA224n, sha224 as sha224n, SHA256 as SHA256n, sha256 as sha256n, } from \"./sha2.js\";\n/** @deprecated Use import from `noble/hashes/sha2` module */\nexport const SHA256 = SHA256n;\n/** @deprecated Use import from `noble/hashes/sha2` module */\nexport const sha256 = sha256n;\n/** @deprecated Use import from `noble/hashes/sha2` module */\nexport const SHA224 = SHA224n;\n/** @deprecated Use import from `noble/hashes/sha2` module */\nexport const sha224 = sha224n;\n//# sourceMappingURL=sha256.js.map","/**\n * SHA2-512 a.k.a. sha512 and sha384. It is slower than sha256 in js because u64 operations are slow.\n *\n * Check out [RFC 4634](https://datatracker.ietf.org/doc/html/rfc4634) and\n * [the paper on truncated SHA512/256](https://eprint.iacr.org/2010/548.pdf).\n * @module\n * @deprecated\n */\nimport { SHA384 as SHA384n, sha384 as sha384n, sha512_224 as sha512_224n, SHA512_224 as SHA512_224n, sha512_256 as sha512_256n, SHA512_256 as SHA512_256n, SHA512 as SHA512n, sha512 as sha512n, } from \"./sha2.js\";\n/** @deprecated Use import from `noble/hashes/sha2` module */\nexport const SHA512 = SHA512n;\n/** @deprecated Use import from `noble/hashes/sha2` module */\nexport const sha512 = sha512n;\n/** @deprecated Use import from `noble/hashes/sha2` module */\nexport const SHA384 = SHA384n;\n/** @deprecated Use import from `noble/hashes/sha2` module */\nexport const sha384 = sha384n;\n/** @deprecated Use import from `noble/hashes/sha2` module */\nexport const SHA512_224 = SHA512_224n;\n/** @deprecated Use import from `noble/hashes/sha2` module */\nexport const sha512_224 = sha512_224n;\n/** @deprecated Use import from `noble/hashes/sha2` module */\nexport const SHA512_256 = SHA512_256n;\n/** @deprecated Use import from `noble/hashes/sha2` module */\nexport const sha512_256 = sha512_256n;\n//# sourceMappingURL=sha512.js.map","/**\n * HMAC: RFC2104 message authentication code.\n * @module\n */\nimport { abytes, aexists, ahash, clean, Hash, toBytes } from \"./utils.js\";\nexport class HMAC extends Hash {\n    constructor(hash, _key) {\n        super();\n        this.finished = false;\n        this.destroyed = false;\n        ahash(hash);\n        const key = toBytes(_key);\n        this.iHash = hash.create();\n        if (typeof this.iHash.update !== 'function')\n            throw new Error('Expected instance of class which extends utils.Hash');\n        this.blockLen = this.iHash.blockLen;\n        this.outputLen = this.iHash.outputLen;\n        const blockLen = this.blockLen;\n        const pad = new Uint8Array(blockLen);\n        // blockLen can be bigger than outputLen\n        pad.set(key.length > blockLen ? hash.create().update(key).digest() : key);\n        for (let i = 0; i < pad.length; i++)\n            pad[i] ^= 0x36;\n        this.iHash.update(pad);\n        // By doing update (processing of first block) of outer hash here we can re-use it between multiple calls via clone\n        this.oHash = hash.create();\n        // Undo internal XOR && apply outer XOR\n        for (let i = 0; i < pad.length; i++)\n            pad[i] ^= 0x36 ^ 0x5c;\n        this.oHash.update(pad);\n        clean(pad);\n    }\n    update(buf) {\n        aexists(this);\n        this.iHash.update(buf);\n        return this;\n    }\n    digestInto(out) {\n        aexists(this);\n        abytes(out, this.outputLen);\n        this.finished = true;\n        this.iHash.digestInto(out);\n        this.oHash.update(out);\n        this.oHash.digestInto(out);\n        this.destroy();\n    }\n    digest() {\n        const out = new Uint8Array(this.oHash.outputLen);\n        this.digestInto(out);\n        return out;\n    }\n    _cloneInto(to) {\n        // Create new instance without calling constructor since key already in state and we don't know it.\n        to || (to = Object.create(Object.getPrototypeOf(this), {}));\n        const { oHash, iHash, finished, destroyed, blockLen, outputLen } = this;\n        to = to;\n        to.finished = finished;\n        to.destroyed = destroyed;\n        to.blockLen = blockLen;\n        to.outputLen = outputLen;\n        to.oHash = oHash._cloneInto(to.oHash);\n        to.iHash = iHash._cloneInto(to.iHash);\n        return to;\n    }\n    clone() {\n        return this._cloneInto();\n    }\n    destroy() {\n        this.destroyed = true;\n        this.oHash.destroy();\n        this.iHash.destroy();\n    }\n}\n/**\n * HMAC: RFC2104 message authentication code.\n * @param hash - function that would be used e.g. sha256\n * @param key - message key\n * @param message - message data\n * @example\n * import { hmac } from '@noble/hashes/hmac';\n * import { sha256 } from '@noble/hashes/sha2';\n * const mac1 = hmac(sha256, 'key', 'message');\n */\nexport const hmac = (hash, key, message) => new HMAC(hash, key).update(message).digest();\nhmac.create = (hash, key) => new HMAC(hash, key);\n//# sourceMappingURL=hmac.js.map","/**\n * PBKDF (RFC 2898). Can be used to create a key from password and salt.\n * @module\n */\nimport { hmac } from \"./hmac.js\";\n// prettier-ignore\nimport { ahash, anumber, asyncLoop, checkOpts, clean, createView, Hash, kdfInputToBytes } from \"./utils.js\";\n// Common prologue and epilogue for sync/async functions\nfunction pbkdf2Init(hash, _password, _salt, _opts) {\n    ahash(hash);\n    const opts = checkOpts({ dkLen: 32, asyncTick: 10 }, _opts);\n    const { c, dkLen, asyncTick } = opts;\n    anumber(c);\n    anumber(dkLen);\n    anumber(asyncTick);\n    if (c < 1)\n        throw new Error('iterations (c) should be >= 1');\n    const password = kdfInputToBytes(_password);\n    const salt = kdfInputToBytes(_salt);\n    // DK = PBKDF2(PRF, Password, Salt, c, dkLen);\n    const DK = new Uint8Array(dkLen);\n    // U1 = PRF(Password, Salt + INT_32_BE(i))\n    const PRF = hmac.create(hash, password);\n    const PRFSalt = PRF._cloneInto().update(salt);\n    return { c, dkLen, asyncTick, DK, PRF, PRFSalt };\n}\nfunction pbkdf2Output(PRF, PRFSalt, DK, prfW, u) {\n    PRF.destroy();\n    PRFSalt.destroy();\n    if (prfW)\n        prfW.destroy();\n    clean(u);\n    return DK;\n}\n/**\n * PBKDF2-HMAC: RFC 2898 key derivation function\n * @param hash - hash function that would be used e.g. sha256\n * @param password - password from which a derived key is generated\n * @param salt - cryptographic salt\n * @param opts - {c, dkLen} where c is work factor and dkLen is output message size\n * @example\n * const key = pbkdf2(sha256, 'password', 'salt', { dkLen: 32, c: Math.pow(2, 18) });\n */\nexport function pbkdf2(hash, password, salt, opts) {\n    const { c, dkLen, DK, PRF, PRFSalt } = pbkdf2Init(hash, password, salt, opts);\n    let prfW; // Working copy\n    const arr = new Uint8Array(4);\n    const view = createView(arr);\n    const u = new Uint8Array(PRF.outputLen);\n    // DK = T1 + T2 + ⋯ + Tdklen/hlen\n    for (let ti = 1, pos = 0; pos < dkLen; ti++, pos += PRF.outputLen) {\n        // Ti = F(Password, Salt, c, i)\n        const Ti = DK.subarray(pos, pos + PRF.outputLen);\n        view.setInt32(0, ti, false);\n        // F(Password, Salt, c, i) = U1 ^ U2 ^ ⋯ ^ Uc\n        // U1 = PRF(Password, Salt + INT_32_BE(i))\n        (prfW = PRFSalt._cloneInto(prfW)).update(arr).digestInto(u);\n        Ti.set(u.subarray(0, Ti.length));\n        for (let ui = 1; ui < c; ui++) {\n            // Uc = PRF(Password, Uc−1)\n            PRF._cloneInto(prfW).update(u).digestInto(u);\n            for (let i = 0; i < Ti.length; i++)\n                Ti[i] ^= u[i];\n        }\n    }\n    return pbkdf2Output(PRF, PRFSalt, DK, prfW, u);\n}\n/**\n * PBKDF2-HMAC: RFC 2898 key derivation function. Async version.\n * @example\n * await pbkdf2Async(sha256, 'password', 'salt', { dkLen: 32, c: 500_000 });\n */\nexport async function pbkdf2Async(hash, password, salt, opts) {\n    const { c, dkLen, asyncTick, DK, PRF, PRFSalt } = pbkdf2Init(hash, password, salt, opts);\n    let prfW; // Working copy\n    const arr = new Uint8Array(4);\n    const view = createView(arr);\n    const u = new Uint8Array(PRF.outputLen);\n    // DK = T1 + T2 + ⋯ + Tdklen/hlen\n    for (let ti = 1, pos = 0; pos < dkLen; ti++, pos += PRF.outputLen) {\n        // Ti = F(Password, Salt, c, i)\n        const Ti = DK.subarray(pos, pos + PRF.outputLen);\n        view.setInt32(0, ti, false);\n        // F(Password, Salt, c, i) = U1 ^ U2 ^ ⋯ ^ Uc\n        // U1 = PRF(Password, Salt + INT_32_BE(i))\n        (prfW = PRFSalt._cloneInto(prfW)).update(arr).digestInto(u);\n        Ti.set(u.subarray(0, Ti.length));\n        await asyncLoop(c - 1, asyncTick, () => {\n            // Uc = PRF(Password, Uc−1)\n            PRF._cloneInto(prfW).update(u).digestInto(u);\n            for (let i = 0; i < Ti.length; i++)\n                Ti[i] ^= u[i];\n        });\n    }\n    return pbkdf2Output(PRF, PRFSalt, DK, prfW, u);\n}\n//# sourceMappingURL=pbkdf2.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n// browserify by default only pulls in files that are hard coded in requires\n// In order of last to first in this file, the default wordlist will be chosen\n// based on what is present. (Bundles may remove wordlists they don't need)\nconst wordlists = {};\nexports.wordlists = wordlists;\nlet _default;\nexports._default = _default;\ntry {\n    exports._default = _default = require('./wordlists/czech.json');\n    wordlists.czech = _default;\n}\ncatch (err) { }\ntry {\n    exports._default = _default = require('./wordlists/chinese_simplified.json');\n    wordlists.chinese_simplified = _default;\n}\ncatch (err) { }\ntry {\n    exports._default = _default = require('./wordlists/chinese_traditional.json');\n    wordlists.chinese_traditional = _default;\n}\ncatch (err) { }\ntry {\n    exports._default = _default = require('./wordlists/korean.json');\n    wordlists.korean = _default;\n}\ncatch (err) { }\ntry {\n    exports._default = _default = require('./wordlists/french.json');\n    wordlists.french = _default;\n}\ncatch (err) { }\ntry {\n    exports._default = _default = require('./wordlists/italian.json');\n    wordlists.italian = _default;\n}\ncatch (err) { }\ntry {\n    exports._default = _default = require('./wordlists/spanish.json');\n    wordlists.spanish = _default;\n}\ncatch (err) { }\ntry {\n    exports._default = _default = require('./wordlists/japanese.json');\n    wordlists.japanese = _default;\n    wordlists.JA = _default;\n}\ncatch (err) { }\ntry {\n    exports._default = _default = require('./wordlists/portuguese.json');\n    wordlists.portuguese = _default;\n}\ncatch (err) { }\ntry {\n    exports._default = _default = require('./wordlists/english.json');\n    wordlists.english = _default;\n    wordlists.EN = _default;\n}\ncatch (err) { }\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst sha256_1 = require(\"@noble/hashes/sha256\");\nconst sha512_1 = require(\"@noble/hashes/sha512\");\nconst pbkdf2_1 = require(\"@noble/hashes/pbkdf2\");\nconst utils_1 = require(\"@noble/hashes/utils\");\nconst _wordlists_1 = require(\"./_wordlists\");\nlet DEFAULT_WORDLIST = _wordlists_1._default;\nconst INVALID_MNEMONIC = 'Invalid mnemonic';\nconst INVALID_ENTROPY = 'Invalid entropy';\nconst INVALID_CHECKSUM = 'Invalid mnemonic checksum';\nconst WORDLIST_REQUIRED = 'A wordlist is required but a default could not be found.\\n' +\n    'Please pass a 2048 word array explicitly.';\nfunction normalize(str) {\n    return (str || '').normalize('NFKD');\n}\nfunction lpad(str, padString, length) {\n    while (str.length < length) {\n        str = padString + str;\n    }\n    return str;\n}\nfunction binaryToByte(bin) {\n    return parseInt(bin, 2);\n}\nfunction bytesToBinary(bytes) {\n    return bytes.map((x) => lpad(x.toString(2), '0', 8)).join('');\n}\nfunction deriveChecksumBits(entropyBuffer) {\n    const ENT = entropyBuffer.length * 8;\n    const CS = ENT / 32;\n    const hash = sha256_1.sha256(Uint8Array.from(entropyBuffer));\n    return bytesToBinary(Array.from(hash)).slice(0, CS);\n}\nfunction salt(password) {\n    return 'mnemonic' + (password || '');\n}\nfunction mnemonicToSeedSync(mnemonic, password) {\n    const mnemonicBuffer = Uint8Array.from(Buffer.from(normalize(mnemonic), 'utf8'));\n    const saltBuffer = Uint8Array.from(Buffer.from(salt(normalize(password)), 'utf8'));\n    const res = pbkdf2_1.pbkdf2(sha512_1.sha512, mnemonicBuffer, saltBuffer, {\n        c: 2048,\n        dkLen: 64,\n    });\n    return Buffer.from(res);\n}\nexports.mnemonicToSeedSync = mnemonicToSeedSync;\nfunction mnemonicToSeed(mnemonic, password) {\n    const mnemonicBuffer = Uint8Array.from(Buffer.from(normalize(mnemonic), 'utf8'));\n    const saltBuffer = Uint8Array.from(Buffer.from(salt(normalize(password)), 'utf8'));\n    return pbkdf2_1.pbkdf2Async(sha512_1.sha512, mnemonicBuffer, saltBuffer, {\n        c: 2048,\n        dkLen: 64,\n    }).then((res) => Buffer.from(res));\n}\nexports.mnemonicToSeed = mnemonicToSeed;\nfunction mnemonicToEntropy(mnemonic, wordlist) {\n    wordlist = wordlist || DEFAULT_WORDLIST;\n    if (!wordlist) {\n        throw new Error(WORDLIST_REQUIRED);\n    }\n    const words = normalize(mnemonic).split(' ');\n    if (words.length % 3 !== 0) {\n        throw new Error(INVALID_MNEMONIC);\n    }\n    // convert word indices to 11 bit binary strings\n    const bits = words\n        .map((word) => {\n        const index = wordlist.indexOf(word);\n        if (index === -1) {\n            throw new Error(INVALID_MNEMONIC);\n        }\n        return lpad(index.toString(2), '0', 11);\n    })\n        .join('');\n    // split the binary string into ENT/CS\n    const dividerIndex = Math.floor(bits.length / 33) * 32;\n    const entropyBits = bits.slice(0, dividerIndex);\n    const checksumBits = bits.slice(dividerIndex);\n    // calculate the checksum and compare\n    const entropyBytes = entropyBits.match(/(.{1,8})/g).map(binaryToByte);\n    if (entropyBytes.length < 16) {\n        throw new Error(INVALID_ENTROPY);\n    }\n    if (entropyBytes.length > 32) {\n        throw new Error(INVALID_ENTROPY);\n    }\n    if (entropyBytes.length % 4 !== 0) {\n        throw new Error(INVALID_ENTROPY);\n    }\n    const entropy = Buffer.from(entropyBytes);\n    const newChecksum = deriveChecksumBits(entropy);\n    if (newChecksum !== checksumBits) {\n        throw new Error(INVALID_CHECKSUM);\n    }\n    return entropy.toString('hex');\n}\nexports.mnemonicToEntropy = mnemonicToEntropy;\nfunction entropyToMnemonic(entropy, wordlist) {\n    if (!Buffer.isBuffer(entropy)) {\n        entropy = Buffer.from(entropy, 'hex');\n    }\n    wordlist = wordlist || DEFAULT_WORDLIST;\n    if (!wordlist) {\n        throw new Error(WORDLIST_REQUIRED);\n    }\n    // 128 <= ENT <= 256\n    if (entropy.length < 16) {\n        throw new TypeError(INVALID_ENTROPY);\n    }\n    if (entropy.length > 32) {\n        throw new TypeError(INVALID_ENTROPY);\n    }\n    if (entropy.length % 4 !== 0) {\n        throw new TypeError(INVALID_ENTROPY);\n    }\n    const entropyBits = bytesToBinary(Array.from(entropy));\n    const checksumBits = deriveChecksumBits(entropy);\n    const bits = entropyBits + checksumBits;\n    const chunks = bits.match(/(.{1,11})/g);\n    const words = chunks.map((binary) => {\n        const index = binaryToByte(binary);\n        return wordlist[index];\n    });\n    return wordlist[0] === '\\u3042\\u3044\\u3053\\u304f\\u3057\\u3093' // Japanese wordlist\n        ? words.join('\\u3000')\n        : words.join(' ');\n}\nexports.entropyToMnemonic = entropyToMnemonic;\nfunction generateMnemonic(strength, rng, wordlist) {\n    strength = strength || 128;\n    if (strength % 32 !== 0) {\n        throw new TypeError(INVALID_ENTROPY);\n    }\n    rng = rng || ((size) => Buffer.from(utils_1.randomBytes(size)));\n    return entropyToMnemonic(rng(strength / 8), wordlist);\n}\nexports.generateMnemonic = generateMnemonic;\nfunction validateMnemonic(mnemonic, wordlist) {\n    try {\n        mnemonicToEntropy(mnemonic, wordlist);\n    }\n    catch (e) {\n        return false;\n    }\n    return true;\n}\nexports.validateMnemonic = validateMnemonic;\nfunction setDefaultWordlist(language) {\n    const result = _wordlists_1.wordlists[language];\n    if (result) {\n        DEFAULT_WORDLIST = result;\n    }\n    else {\n        throw new Error('Could not find wordlist for language \"' + language + '\"');\n    }\n}\nexports.setDefaultWordlist = setDefaultWordlist;\nfunction getDefaultWordlist() {\n    if (!DEFAULT_WORDLIST) {\n        throw new Error('No Default Wordlist set');\n    }\n    return Object.keys(_wordlists_1.wordlists).filter((lang) => {\n        if (lang === 'JA' || lang === 'EN') {\n            return false;\n        }\n        return _wordlists_1.wordlists[lang].every((word, index) => word === DEFAULT_WORDLIST[index]);\n    })[0];\n}\nexports.getDefaultWordlist = getDefaultWordlist;\nvar _wordlists_2 = require(\"./_wordlists\");\nexports.wordlists = _wordlists_2.wordlists;\n","/**\n * Helpers.\n */\n\nvar s = 1000;\nvar m = s * 60;\nvar h = m * 60;\nvar d = h * 24;\nvar w = d * 7;\nvar y = d * 365.25;\n\n/**\n * Parse or format the given `val`.\n *\n * Options:\n *\n *  - `long` verbose formatting [false]\n *\n * @param {String|Number} val\n * @param {Object} [options]\n * @throws {Error} throw an error if val is not a non-empty string or a number\n * @return {String|Number}\n * @api public\n */\n\nmodule.exports = function (val, options) {\n  options = options || {};\n  var type = typeof val;\n  if (type === 'string' && val.length > 0) {\n    return parse(val);\n  } else if (type === 'number' && isFinite(val)) {\n    return options.long ? fmtLong(val) : fmtShort(val);\n  }\n  throw new Error(\n    'val is not a non-empty string or a valid number. val=' +\n      JSON.stringify(val)\n  );\n};\n\n/**\n * Parse the given `str` and return milliseconds.\n *\n * @param {String} str\n * @return {Number}\n * @api private\n */\n\nfunction parse(str) {\n  str = String(str);\n  if (str.length > 100) {\n    return;\n  }\n  var match = /^(-?(?:\\d+)?\\.?\\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(\n    str\n  );\n  if (!match) {\n    return;\n  }\n  var n = parseFloat(match[1]);\n  var type = (match[2] || 'ms').toLowerCase();\n  switch (type) {\n    case 'years':\n    case 'year':\n    case 'yrs':\n    case 'yr':\n    case 'y':\n      return n * y;\n    case 'weeks':\n    case 'week':\n    case 'w':\n      return n * w;\n    case 'days':\n    case 'day':\n    case 'd':\n      return n * d;\n    case 'hours':\n    case 'hour':\n    case 'hrs':\n    case 'hr':\n    case 'h':\n      return n * h;\n    case 'minutes':\n    case 'minute':\n    case 'mins':\n    case 'min':\n    case 'm':\n      return n * m;\n    case 'seconds':\n    case 'second':\n    case 'secs':\n    case 'sec':\n    case 's':\n      return n * s;\n    case 'milliseconds':\n    case 'millisecond':\n    case 'msecs':\n    case 'msec':\n    case 'ms':\n      return n;\n    default:\n      return undefined;\n  }\n}\n\n/**\n * Short format for `ms`.\n *\n * @param {Number} ms\n * @return {String}\n * @api private\n */\n\nfunction fmtShort(ms) {\n  var msAbs = Math.abs(ms);\n  if (msAbs >= d) {\n    return Math.round(ms / d) + 'd';\n  }\n  if (msAbs >= h) {\n    return Math.round(ms / h) + 'h';\n  }\n  if (msAbs >= m) {\n    return Math.round(ms / m) + 'm';\n  }\n  if (msAbs >= s) {\n    return Math.round(ms / s) + 's';\n  }\n  return ms + 'ms';\n}\n\n/**\n * Long format for `ms`.\n *\n * @param {Number} ms\n * @return {String}\n * @api private\n */\n\nfunction fmtLong(ms) {\n  var msAbs = Math.abs(ms);\n  if (msAbs >= d) {\n    return plural(ms, msAbs, d, 'day');\n  }\n  if (msAbs >= h) {\n    return plural(ms, msAbs, h, 'hour');\n  }\n  if (msAbs >= m) {\n    return plural(ms, msAbs, m, 'minute');\n  }\n  if (msAbs >= s) {\n    return plural(ms, msAbs, s, 'second');\n  }\n  return ms + ' ms';\n}\n\n/**\n * Pluralization helper.\n */\n\nfunction plural(ms, msAbs, n, name) {\n  var isPlural = msAbs >= n * 1.5;\n  return Math.round(ms / n) + ' ' + name + (isPlural ? 's' : '');\n}\n","\n/**\n * This is the common logic for both the Node.js and web browser\n * implementations of `debug()`.\n */\n\nfunction setup(env) {\n\tcreateDebug.debug = createDebug;\n\tcreateDebug.default = createDebug;\n\tcreateDebug.coerce = coerce;\n\tcreateDebug.disable = disable;\n\tcreateDebug.enable = enable;\n\tcreateDebug.enabled = enabled;\n\tcreateDebug.humanize = require('ms');\n\tcreateDebug.destroy = destroy;\n\n\tObject.keys(env).forEach(key => {\n\t\tcreateDebug[key] = env[key];\n\t});\n\n\t/**\n\t* The currently active debug mode names, and names to skip.\n\t*/\n\n\tcreateDebug.names = [];\n\tcreateDebug.skips = [];\n\n\t/**\n\t* Map of special \"%n\" handling functions, for the debug \"format\" argument.\n\t*\n\t* Valid key names are a single, lower or upper-case letter, i.e. \"n\" and \"N\".\n\t*/\n\tcreateDebug.formatters = {};\n\n\t/**\n\t* Selects a color for a debug namespace\n\t* @param {String} namespace The namespace string for the debug instance to be colored\n\t* @return {Number|String} An ANSI color code for the given namespace\n\t* @api private\n\t*/\n\tfunction selectColor(namespace) {\n\t\tlet hash = 0;\n\n\t\tfor (let i = 0; i < namespace.length; i++) {\n\t\t\thash = ((hash << 5) - hash) + namespace.charCodeAt(i);\n\t\t\thash |= 0; // Convert to 32bit integer\n\t\t}\n\n\t\treturn createDebug.colors[Math.abs(hash) % createDebug.colors.length];\n\t}\n\tcreateDebug.selectColor = selectColor;\n\n\t/**\n\t* Create a debugger with the given `namespace`.\n\t*\n\t* @param {String} namespace\n\t* @return {Function}\n\t* @api public\n\t*/\n\tfunction createDebug(namespace) {\n\t\tlet prevTime;\n\t\tlet enableOverride = null;\n\t\tlet namespacesCache;\n\t\tlet enabledCache;\n\n\t\tfunction debug(...args) {\n\t\t\t// Disabled?\n\t\t\tif (!debug.enabled) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst self = debug;\n\n\t\t\t// Set `diff` timestamp\n\t\t\tconst curr = Number(new Date());\n\t\t\tconst ms = curr - (prevTime || curr);\n\t\t\tself.diff = ms;\n\t\t\tself.prev = prevTime;\n\t\t\tself.curr = curr;\n\t\t\tprevTime = curr;\n\n\t\t\targs[0] = createDebug.coerce(args[0]);\n\n\t\t\tif (typeof args[0] !== 'string') {\n\t\t\t\t// Anything else let's inspect with %O\n\t\t\t\targs.unshift('%O');\n\t\t\t}\n\n\t\t\t// Apply any `formatters` transformations\n\t\t\tlet index = 0;\n\t\t\targs[0] = args[0].replace(/%([a-zA-Z%])/g, (match, format) => {\n\t\t\t\t// If we encounter an escaped % then don't increase the array index\n\t\t\t\tif (match === '%%') {\n\t\t\t\t\treturn '%';\n\t\t\t\t}\n\t\t\t\tindex++;\n\t\t\t\tconst formatter = createDebug.formatters[format];\n\t\t\t\tif (typeof formatter === 'function') {\n\t\t\t\t\tconst val = args[index];\n\t\t\t\t\tmatch = formatter.call(self, val);\n\n\t\t\t\t\t// Now we need to remove `args[index]` since it's inlined in the `format`\n\t\t\t\t\targs.splice(index, 1);\n\t\t\t\t\tindex--;\n\t\t\t\t}\n\t\t\t\treturn match;\n\t\t\t});\n\n\t\t\t// Apply env-specific formatting (colors, etc.)\n\t\t\tcreateDebug.formatArgs.call(self, args);\n\n\t\t\tconst logFn = self.log || createDebug.log;\n\t\t\tlogFn.apply(self, args);\n\t\t}\n\n\t\tdebug.namespace = namespace;\n\t\tdebug.useColors = createDebug.useColors();\n\t\tdebug.color = createDebug.selectColor(namespace);\n\t\tdebug.extend = extend;\n\t\tdebug.destroy = createDebug.destroy; // XXX Temporary. Will be removed in the next major release.\n\n\t\tObject.defineProperty(debug, 'enabled', {\n\t\t\tenumerable: true,\n\t\t\tconfigurable: false,\n\t\t\tget: () => {\n\t\t\t\tif (enableOverride !== null) {\n\t\t\t\t\treturn enableOverride;\n\t\t\t\t}\n\t\t\t\tif (namespacesCache !== createDebug.namespaces) {\n\t\t\t\t\tnamespacesCache = createDebug.namespaces;\n\t\t\t\t\tenabledCache = createDebug.enabled(namespace);\n\t\t\t\t}\n\n\t\t\t\treturn enabledCache;\n\t\t\t},\n\t\t\tset: v => {\n\t\t\t\tenableOverride = v;\n\t\t\t}\n\t\t});\n\n\t\t// Env-specific initialization logic for debug instances\n\t\tif (typeof createDebug.init === 'function') {\n\t\t\tcreateDebug.init(debug);\n\t\t}\n\n\t\treturn debug;\n\t}\n\n\tfunction extend(namespace, delimiter) {\n\t\tconst newDebug = createDebug(this.namespace + (typeof delimiter === 'undefined' ? ':' : delimiter) + namespace);\n\t\tnewDebug.log = this.log;\n\t\treturn newDebug;\n\t}\n\n\t/**\n\t* Enables a debug mode by namespaces. This can include modes\n\t* separated by a colon and wildcards.\n\t*\n\t* @param {String} namespaces\n\t* @api public\n\t*/\n\tfunction enable(namespaces) {\n\t\tcreateDebug.save(namespaces);\n\t\tcreateDebug.namespaces = namespaces;\n\n\t\tcreateDebug.names = [];\n\t\tcreateDebug.skips = [];\n\n\t\tconst split = (typeof namespaces === 'string' ? namespaces : '')\n\t\t\t.trim()\n\t\t\t.replace(/\\s+/g, ',')\n\t\t\t.split(',')\n\t\t\t.filter(Boolean);\n\n\t\tfor (const ns of split) {\n\t\t\tif (ns[0] === '-') {\n\t\t\t\tcreateDebug.skips.push(ns.slice(1));\n\t\t\t} else {\n\t\t\t\tcreateDebug.names.push(ns);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Checks if the given string matches a namespace template, honoring\n\t * asterisks as wildcards.\n\t *\n\t * @param {String} search\n\t * @param {String} template\n\t * @return {Boolean}\n\t */\n\tfunction matchesTemplate(search, template) {\n\t\tlet searchIndex = 0;\n\t\tlet templateIndex = 0;\n\t\tlet starIndex = -1;\n\t\tlet matchIndex = 0;\n\n\t\twhile (searchIndex < search.length) {\n\t\t\tif (templateIndex < template.length && (template[templateIndex] === search[searchIndex] || template[templateIndex] === '*')) {\n\t\t\t\t// Match character or proceed with wildcard\n\t\t\t\tif (template[templateIndex] === '*') {\n\t\t\t\t\tstarIndex = templateIndex;\n\t\t\t\t\tmatchIndex = searchIndex;\n\t\t\t\t\ttemplateIndex++; // Skip the '*'\n\t\t\t\t} else {\n\t\t\t\t\tsearchIndex++;\n\t\t\t\t\ttemplateIndex++;\n\t\t\t\t}\n\t\t\t} else if (starIndex !== -1) { // eslint-disable-line no-negated-condition\n\t\t\t\t// Backtrack to the last '*' and try to match more characters\n\t\t\t\ttemplateIndex = starIndex + 1;\n\t\t\t\tmatchIndex++;\n\t\t\t\tsearchIndex = matchIndex;\n\t\t\t} else {\n\t\t\t\treturn false; // No match\n\t\t\t}\n\t\t}\n\n\t\t// Handle trailing '*' in template\n\t\twhile (templateIndex < template.length && template[templateIndex] === '*') {\n\t\t\ttemplateIndex++;\n\t\t}\n\n\t\treturn templateIndex === template.length;\n\t}\n\n\t/**\n\t* Disable debug output.\n\t*\n\t* @return {String} namespaces\n\t* @api public\n\t*/\n\tfunction disable() {\n\t\tconst namespaces = [\n\t\t\t...createDebug.names,\n\t\t\t...createDebug.skips.map(namespace => '-' + namespace)\n\t\t].join(',');\n\t\tcreateDebug.enable('');\n\t\treturn namespaces;\n\t}\n\n\t/**\n\t* Returns true if the given mode name is enabled, false otherwise.\n\t*\n\t* @param {String} name\n\t* @return {Boolean}\n\t* @api public\n\t*/\n\tfunction enabled(name) {\n\t\tfor (const skip of createDebug.skips) {\n\t\t\tif (matchesTemplate(name, skip)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\tfor (const ns of createDebug.names) {\n\t\t\tif (matchesTemplate(name, ns)) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t* Coerce `val`.\n\t*\n\t* @param {Mixed} val\n\t* @return {Mixed}\n\t* @api private\n\t*/\n\tfunction coerce(val) {\n\t\tif (val instanceof Error) {\n\t\t\treturn val.stack || val.message;\n\t\t}\n\t\treturn val;\n\t}\n\n\t/**\n\t* XXX DO NOT USE. This is a temporary stub function.\n\t* XXX It WILL be removed in the next major release.\n\t*/\n\tfunction destroy() {\n\t\tconsole.warn('Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.');\n\t}\n\n\tcreateDebug.enable(createDebug.load());\n\n\treturn createDebug;\n}\n\nmodule.exports = setup;\n","/* eslint-env browser */\n\n/**\n * This is the web browser implementation of `debug()`.\n */\n\nexports.formatArgs = formatArgs;\nexports.save = save;\nexports.load = load;\nexports.useColors = useColors;\nexports.storage = localstorage();\nexports.destroy = (() => {\n\tlet warned = false;\n\n\treturn () => {\n\t\tif (!warned) {\n\t\t\twarned = true;\n\t\t\tconsole.warn('Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.');\n\t\t}\n\t};\n})();\n\n/**\n * Colors.\n */\n\nexports.colors = [\n\t'#0000CC',\n\t'#0000FF',\n\t'#0033CC',\n\t'#0033FF',\n\t'#0066CC',\n\t'#0066FF',\n\t'#0099CC',\n\t'#0099FF',\n\t'#00CC00',\n\t'#00CC33',\n\t'#00CC66',\n\t'#00CC99',\n\t'#00CCCC',\n\t'#00CCFF',\n\t'#3300CC',\n\t'#3300FF',\n\t'#3333CC',\n\t'#3333FF',\n\t'#3366CC',\n\t'#3366FF',\n\t'#3399CC',\n\t'#3399FF',\n\t'#33CC00',\n\t'#33CC33',\n\t'#33CC66',\n\t'#33CC99',\n\t'#33CCCC',\n\t'#33CCFF',\n\t'#6600CC',\n\t'#6600FF',\n\t'#6633CC',\n\t'#6633FF',\n\t'#66CC00',\n\t'#66CC33',\n\t'#9900CC',\n\t'#9900FF',\n\t'#9933CC',\n\t'#9933FF',\n\t'#99CC00',\n\t'#99CC33',\n\t'#CC0000',\n\t'#CC0033',\n\t'#CC0066',\n\t'#CC0099',\n\t'#CC00CC',\n\t'#CC00FF',\n\t'#CC3300',\n\t'#CC3333',\n\t'#CC3366',\n\t'#CC3399',\n\t'#CC33CC',\n\t'#CC33FF',\n\t'#CC6600',\n\t'#CC6633',\n\t'#CC9900',\n\t'#CC9933',\n\t'#CCCC00',\n\t'#CCCC33',\n\t'#FF0000',\n\t'#FF0033',\n\t'#FF0066',\n\t'#FF0099',\n\t'#FF00CC',\n\t'#FF00FF',\n\t'#FF3300',\n\t'#FF3333',\n\t'#FF3366',\n\t'#FF3399',\n\t'#FF33CC',\n\t'#FF33FF',\n\t'#FF6600',\n\t'#FF6633',\n\t'#FF9900',\n\t'#FF9933',\n\t'#FFCC00',\n\t'#FFCC33'\n];\n\n/**\n * Currently only WebKit-based Web Inspectors, Firefox >= v31,\n * and the Firebug extension (any Firefox version) are known\n * to support \"%c\" CSS customizations.\n *\n * TODO: add a `localStorage` variable to explicitly enable/disable colors\n */\n\n// eslint-disable-next-line complexity\nfunction useColors() {\n\t// NB: In an Electron preload script, document will be defined but not fully\n\t// initialized. Since we know we're in Chrome, we'll just detect this case\n\t// explicitly\n\tif (typeof window !== 'undefined' && window.process && (window.process.type === 'renderer' || window.process.__nwjs)) {\n\t\treturn true;\n\t}\n\n\t// Internet Explorer and Edge do not support colors.\n\tif (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\\/(\\d+)/)) {\n\t\treturn false;\n\t}\n\n\tlet m;\n\n\t// Is webkit? http://stackoverflow.com/a/16459606/376773\n\t// document is undefined in react-native: https://github.com/facebook/react-native/pull/1632\n\t// eslint-disable-next-line no-return-assign\n\treturn (typeof document !== 'undefined' && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance) ||\n\t\t// Is firebug? http://stackoverflow.com/a/398120/376773\n\t\t(typeof window !== 'undefined' && window.console && (window.console.firebug || (window.console.exception && window.console.table))) ||\n\t\t// Is firefox >= v31?\n\t\t// https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages\n\t\t(typeof navigator !== 'undefined' && navigator.userAgent && (m = navigator.userAgent.toLowerCase().match(/firefox\\/(\\d+)/)) && parseInt(m[1], 10) >= 31) ||\n\t\t// Double check webkit in userAgent just in case we are in a worker\n\t\t(typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\\/(\\d+)/));\n}\n\n/**\n * Colorize log arguments if enabled.\n *\n * @api public\n */\n\nfunction formatArgs(args) {\n\targs[0] = (this.useColors ? '%c' : '') +\n\t\tthis.namespace +\n\t\t(this.useColors ? ' %c' : ' ') +\n\t\targs[0] +\n\t\t(this.useColors ? '%c ' : ' ') +\n\t\t'+' + module.exports.humanize(this.diff);\n\n\tif (!this.useColors) {\n\t\treturn;\n\t}\n\n\tconst c = 'color: ' + this.color;\n\targs.splice(1, 0, c, 'color: inherit');\n\n\t// The final \"%c\" is somewhat tricky, because there could be other\n\t// arguments passed either before or after the %c, so we need to\n\t// figure out the correct index to insert the CSS into\n\tlet index = 0;\n\tlet lastC = 0;\n\targs[0].replace(/%[a-zA-Z%]/g, match => {\n\t\tif (match === '%%') {\n\t\t\treturn;\n\t\t}\n\t\tindex++;\n\t\tif (match === '%c') {\n\t\t\t// We only are interested in the *last* %c\n\t\t\t// (the user may have provided their own)\n\t\t\tlastC = index;\n\t\t}\n\t});\n\n\targs.splice(lastC, 0, c);\n}\n\n/**\n * Invokes `console.debug()` when available.\n * No-op when `console.debug` is not a \"function\".\n * If `console.debug` is not available, falls back\n * to `console.log`.\n *\n * @api public\n */\nexports.log = console.debug || console.log || (() => {});\n\n/**\n * Save `namespaces`.\n *\n * @param {String} namespaces\n * @api private\n */\nfunction save(namespaces) {\n\ttry {\n\t\tif (namespaces) {\n\t\t\texports.storage.setItem('debug', namespaces);\n\t\t} else {\n\t\t\texports.storage.removeItem('debug');\n\t\t}\n\t} catch (error) {\n\t\t// Swallow\n\t\t// XXX (@Qix-) should we be logging these?\n\t}\n}\n\n/**\n * Load `namespaces`.\n *\n * @return {String} returns the previously persisted debug modes\n * @api private\n */\nfunction load() {\n\tlet r;\n\ttry {\n\t\tr = exports.storage.getItem('debug') || exports.storage.getItem('DEBUG') ;\n\t} catch (error) {\n\t\t// Swallow\n\t\t// XXX (@Qix-) should we be logging these?\n\t}\n\n\t// If debug isn't set in LS, and we're in Electron, try to load $DEBUG\n\tif (!r && typeof process !== 'undefined' && 'env' in process) {\n\t\tr = process.env.DEBUG;\n\t}\n\n\treturn r;\n}\n\n/**\n * Localstorage attempts to return the localstorage.\n *\n * This is necessary because safari throws\n * when a user disables cookies/localstorage\n * and you attempt to access it.\n *\n * @return {LocalStorage}\n * @api private\n */\n\nfunction localstorage() {\n\ttry {\n\t\t// TVMLKit (Apple TV JS Runtime) does not have a window object, just localStorage in the global context\n\t\t// The Browser also has localStorage in the global context.\n\t\treturn localStorage;\n\t} catch (error) {\n\t\t// Swallow\n\t\t// XXX (@Qix-) should we be logging these?\n\t}\n}\n\nmodule.exports = require('./common')(exports);\n\nconst {formatters} = module.exports;\n\n/**\n * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.\n */\n\nformatters.j = function (v) {\n\ttry {\n\t\treturn JSON.stringify(v);\n\t} catch (error) {\n\t\treturn '[UnexpectedJSONParseError]: ' + error.message;\n\t}\n};\n","var empty = null;\n\nexport { empty as default };\n//# sourceMappingURL=empty.js.map\n","// https://github.com/maxogden/websocket-stream/blob/48dc3ddf943e5ada668c31ccd94e9186f02fafbd/ws-fallback.js\n\nvar ws = null\n\nif (typeof WebSocket !== 'undefined') {\n  ws = WebSocket\n} else if (typeof MozWebSocket !== 'undefined') {\n  ws = MozWebSocket\n} else if (typeof global !== 'undefined') {\n  ws = global.WebSocket || global.MozWebSocket\n} else if (typeof window !== 'undefined') {\n  ws = window.WebSocket || window.MozWebSocket\n} else if (typeof self !== 'undefined') {\n  ws = self.WebSocket || self.MozWebSocket\n}\n\nmodule.exports = ws\n","/**\n * Test whether a string contains an integer number\n */\nexport function isInteger(value) {\n  return INTEGER_REGEX.test(value);\n}\nvar INTEGER_REGEX = /^-?[0-9]+$/;\n\n/**\n * Test whether a string contains a number\n * http://stackoverflow.com/questions/13340717/json-numbers-regular-expression\n */\nexport function isNumber(value) {\n  return NUMBER_REGEX.test(value);\n}\nvar NUMBER_REGEX = /^-?(?:0|[1-9]\\d*)(?:\\.\\d+)?(?:[eE][+-]?\\d+)?$/;\n\n/**\n * Test whether a string can be safely represented with a number\n * without information loss.\n *\n * When approx is true, floating point numbers that lose a few digits but\n * are still approximately equal in value are considered safe too.\n * Integer numbers must still be exactly equal.\n */\nexport function isSafeNumber(value, config) {\n  var num = parseFloat(value);\n  var str = String(num);\n  var v = extractSignificantDigits(value);\n  var s = extractSignificantDigits(str);\n  if (v === s) {\n    return true;\n  }\n  if ((config === null || config === void 0 ? void 0 : config.approx) === true) {\n    // A value is approximately equal when:\n    // 1. it is a floating point number, not an integer\n    // 2. it has at least 14 digits\n    // 3. the first 14 digits are equal\n    var requiredDigits = 14;\n    if (!isInteger(value) && s.length >= requiredDigits && v.startsWith(s.substring(0, requiredDigits))) {\n      return true;\n    }\n  }\n  return false;\n}\nexport var UnsafeNumberReason = /*#__PURE__*/function (UnsafeNumberReason) {\n  UnsafeNumberReason[\"underflow\"] = \"underflow\";\n  UnsafeNumberReason[\"overflow\"] = \"overflow\";\n  UnsafeNumberReason[\"truncate_integer\"] = \"truncate_integer\";\n  UnsafeNumberReason[\"truncate_float\"] = \"truncate_float\";\n  return UnsafeNumberReason;\n}({});\n\n/**\n * When the provided value is an unsafe number, describe what the reason is:\n * overflow, underflow, truncate_integer, or truncate_float.\n * Returns undefined when the value is safe.\n */\nexport function getUnsafeNumberReason(value) {\n  if (isSafeNumber(value, {\n    approx: false\n  })) {\n    return undefined;\n  }\n  if (isInteger(value)) {\n    return UnsafeNumberReason.truncate_integer;\n  }\n  var num = parseFloat(value);\n  if (!isFinite(num)) {\n    return UnsafeNumberReason.overflow;\n  }\n  if (num === 0) {\n    return UnsafeNumberReason.underflow;\n  }\n  return UnsafeNumberReason.truncate_float;\n}\n\n/**\n * Convert a string into a number when it is safe to do so.\n * Throws an error otherwise, explaining the reason.\n */\nexport function toSafeNumberOrThrow(value, config) {\n  var number = parseFloat(value);\n  var unsafeReason = getUnsafeNumberReason(value);\n  if ((config === null || config === void 0 ? void 0 : config.approx) === true ? unsafeReason && unsafeReason !== UnsafeNumberReason.truncate_float : unsafeReason) {\n    var unsafeReasonText = unsafeReason.replace(/_\\w+$/, '');\n    throw new Error('Cannot safely convert to number: ' + \"the value '\".concat(value, \"' would \").concat(unsafeReasonText, \" and become \").concat(number));\n  }\n  return number;\n}\n\n/**\n * Get the significant digits of a number.\n *\n * For example:\n *   '2.34' returns '234'\n *   '-77' returns '77'\n *   '0.003400' returns '34'\n *   '120.5e+30' returns '1205'\n **/\nexport function extractSignificantDigits(value) {\n  return value\n  // from \"-0.250e+30\" to \"-0.250\"\n  .replace(EXPONENTIAL_PART_REGEX, '')\n\n  // from \"-0.250\" to \"-0250\"\n  .replace(DOT_REGEX, '')\n\n  // from \"-0250\" to \"-025\"\n  .replace(TRAILING_ZEROS_REGEX, '')\n\n  // from \"-025\" to \"25\"\n  .replace(LEADING_MINUS_AND_ZEROS_REGEX, '');\n}\nvar EXPONENTIAL_PART_REGEX = /[eE][+-]?\\d+$/;\nvar LEADING_MINUS_AND_ZEROS_REGEX = /^-?(0*)?/;\nvar DOT_REGEX = /\\./;\nvar TRAILING_ZEROS_REGEX = /0+$/;\n//# sourceMappingURL=utils.js.map","function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return _typeof(key) === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (_typeof(res) !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nimport { extractSignificantDigits, getUnsafeNumberReason, isInteger, isNumber, UnsafeNumberReason } from './utils.js';\n\n/**\n * A lossless number. Stores its numeric value as string\n */\nexport var LosslessNumber = /*#__PURE__*/function () {\n  function LosslessNumber(value) {\n    _classCallCheck(this, LosslessNumber);\n    // numeric value as string\n    // type information\n    _defineProperty(this, \"isLosslessNumber\", true);\n    if (!isNumber(value)) {\n      throw new Error('Invalid number (value: \"' + value + '\")');\n    }\n    this.value = value;\n  }\n\n  /**\n   * Get the value of the LosslessNumber as number or bigint.\n   *\n   * - a number is returned for safe numbers and decimal values that only lose some insignificant digits\n   * - a bigint is returned for big integer numbers\n   * - an Error is thrown for values that will overflow or underflow\n   *\n   * Note that you can implement your own strategy for conversion by just getting the value as string\n   * via .toString(), and using util functions like isInteger, isSafeNumber, getUnsafeNumberReason,\n   * and toSafeNumberOrThrow to convert it to a numeric value.\n   */\n  _createClass(LosslessNumber, [{\n    key: \"valueOf\",\n    value: function valueOf() {\n      var unsafeReason = getUnsafeNumberReason(this.value);\n\n      // safe or truncate_float\n      if (unsafeReason === undefined || unsafeReason === UnsafeNumberReason.truncate_float) {\n        return parseFloat(this.value);\n      }\n\n      // truncate_integer\n      if (isInteger(this.value)) {\n        return BigInt(this.value);\n      }\n\n      // overflow or underflow\n      throw new Error('Cannot safely convert to number: ' + \"the value '\".concat(this.value, \"' would \").concat(unsafeReason, \" and become \").concat(parseFloat(this.value)));\n    }\n\n    /**\n     * Get the value of the LosslessNumber as string.\n     */\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return this.value;\n    }\n\n    // Note: we do NOT implement a .toJSON() method, and you should not implement\n    // or use that, it cannot safely turn the numeric value in the string into\n    // stringified JSON since it has to be parsed into a number first.\n  }]);\n  return LosslessNumber;\n}();\n\n/**\n * Test whether a value is a LosslessNumber\n */\nexport function isLosslessNumber(value) {\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-ignore\n  return value && _typeof(value) === 'object' && value.isLosslessNumber === true || false;\n}\n\n/**\n * Convert a number into a LosslessNumber if this is possible in a safe way\n * If the value has too many digits, or is NaN or Infinity, an error will be thrown\n */\nexport function toLosslessNumber(value) {\n  if (extractSignificantDigits(value + '').length > 15) {\n    throw new Error('Invalid number: contains more than 15 digits and is most likely truncated and unsafe by itself ' + \"(value: \".concat(value, \")\"));\n  }\n  if (isNaN(value)) {\n    throw new Error('Invalid number: NaN');\n  }\n  if (!isFinite(value)) {\n    throw new Error('Invalid number: ' + value);\n  }\n  return new LosslessNumber(String(value));\n}\n//# sourceMappingURL=LosslessNumber.js.map","import { LosslessNumber } from './LosslessNumber.js';\nimport { isInteger } from './utils.js';\nexport function parseLosslessNumber(value) {\n  return new LosslessNumber(value);\n}\nexport function parseNumberAndBigInt(value) {\n  return isInteger(value) ? BigInt(value) : parseFloat(value);\n}\n//# sourceMappingURL=numberParsers.js.map","function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\nimport { isLosslessNumber } from './LosslessNumber.js';\n/**\n * Revive a json object.\n * Applies the reviver function recursively on all values in the JSON object.\n * @param json   A JSON Object, Array, or value\n * @param reviver\n *              A reviver function invoked with arguments `key` and `value`,\n *              which must return a replacement value. The function context\n *              (`this`) is the Object or Array that contains the currently\n *              handled value.\n */\nexport function revive(json, reviver) {\n  return reviveValue({\n    '': json\n  }, '', json, reviver);\n}\n\n/**\n * Revive a value\n */\nfunction reviveValue(context, key, value, reviver) {\n  if (Array.isArray(value)) {\n    return reviver.call(context, key, reviveArray(value, reviver));\n  } else if (value && _typeof(value) === 'object' && !isLosslessNumber(value)) {\n    // note the special case for LosslessNumber,\n    // we don't want to iterate over the internals of a LosslessNumber\n    return reviver.call(context, key, reviveObject(value, reviver));\n  } else {\n    return reviver.call(context, key, value);\n  }\n}\n\n/**\n * Revive the properties of an object\n */\nfunction reviveObject(object, reviver) {\n  Object.keys(object).forEach(function (key) {\n    var value = reviveValue(object, key, object[key], reviver);\n    if (value !== undefined) {\n      object[key] = value;\n    } else {\n      delete object[key];\n    }\n  });\n  return object;\n}\n\n/**\n * Revive the properties of an Array\n */\nfunction reviveArray(array, reviver) {\n  for (var i = 0; i < array.length; i++) {\n    array[i] = reviveValue(array, i + '', array[i], reviver);\n  }\n  return array;\n}\n//# sourceMappingURL=revive.js.map","function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter); }\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nimport { parseLosslessNumber } from './numberParsers.js';\nimport { revive } from './revive.js';\n/**\n * The LosslessJSON.parse() method parses a string as JSON, optionally transforming\n * the value produced by parsing.\n *\n * The parser is based on the parser of Tan Li Hou shared in\n * https://lihautan.com/json-parser-with-javascript/\n *\n * @param text\n * The string to parse as JSON. See the JSON object for a description of JSON syntax.\n *\n * @param [reviver]\n * If a function, prescribes how the value originally produced by parsing is\n * transformed, before being returned.\n *\n * @param [parseNumber=parseLosslessNumber]\n * Pass a custom number parser. Input is a string, and the output can be unknown\n * numeric value: number, bigint, LosslessNumber, or a custom BigNumber library.\n *\n * @returns Returns the Object corresponding to the given JSON text.\n *\n * @throws Throws a SyntaxError exception if the string to parse is not valid JSON.\n */\nexport function parse(text, reviver) {\n  var parseNumber = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : parseLosslessNumber;\n  var i = 0;\n  var value = parseValue();\n  expectValue(value);\n  expectEndOfInput();\n  return reviver ? revive(value, reviver) : value;\n  function parseObject() {\n    if (text.charCodeAt(i) === codeOpeningBrace) {\n      i++;\n      skipWhitespace();\n      var object = {};\n      var initial = true;\n      while (i < text.length && text.charCodeAt(i) !== codeClosingBrace) {\n        if (!initial) {\n          eatComma();\n          skipWhitespace();\n        } else {\n          initial = false;\n        }\n        var start = i;\n        var key = parseString();\n        if (key === undefined) {\n          throwObjectKeyExpected();\n        }\n        skipWhitespace();\n        eatColon();\n        var _value = parseValue();\n        if (_value === undefined) {\n          throwObjectValueExpected();\n        }\n\n        // TODO: test deep equal instead of strict equal\n        if (Object.prototype.hasOwnProperty.call(object, key) && !isDeepEqual(_value, object[key])) {\n          // Note that we could also test `if(key in object) {...}`\n          // or `if (object[key] !== 'undefined') {...}`, but that is slower.\n          throwDuplicateKey(key, start + 1);\n        }\n        object[key] = _value;\n      }\n      if (text.charCodeAt(i) !== codeClosingBrace) {\n        throwObjectKeyOrEndExpected();\n      }\n      i++;\n      return object;\n    }\n  }\n  function parseArray() {\n    if (text.charCodeAt(i) === codeOpeningBracket) {\n      i++;\n      skipWhitespace();\n      var array = [];\n      var initial = true;\n      while (i < text.length && text.charCodeAt(i) !== codeClosingBracket) {\n        if (!initial) {\n          eatComma();\n        } else {\n          initial = false;\n        }\n        var _value2 = parseValue();\n        expectArrayItem(_value2);\n        array.push(_value2);\n      }\n      if (text.charCodeAt(i) !== codeClosingBracket) {\n        throwArrayItemOrEndExpected();\n      }\n      i++;\n      return array;\n    }\n  }\n  function parseValue() {\n    var _ref, _ref2, _ref3, _ref4, _ref5, _parseString;\n    skipWhitespace();\n    var value = (_ref = (_ref2 = (_ref3 = (_ref4 = (_ref5 = (_parseString = parseString()) !== null && _parseString !== void 0 ? _parseString : parseNumeric()) !== null && _ref5 !== void 0 ? _ref5 : parseObject()) !== null && _ref4 !== void 0 ? _ref4 : parseArray()) !== null && _ref3 !== void 0 ? _ref3 : parseKeyword('true', true)) !== null && _ref2 !== void 0 ? _ref2 : parseKeyword('false', false)) !== null && _ref !== void 0 ? _ref : parseKeyword('null', null);\n    skipWhitespace();\n    return value;\n  }\n  function parseKeyword(name, value) {\n    if (text.slice(i, i + name.length) === name) {\n      i += name.length;\n      return value;\n    }\n  }\n  function skipWhitespace() {\n    while (isWhitespace(text.charCodeAt(i))) {\n      i++;\n    }\n  }\n  function parseString() {\n    if (text.charCodeAt(i) === codeDoubleQuote) {\n      i++;\n      var result = '';\n      while (i < text.length && text.charCodeAt(i) !== codeDoubleQuote) {\n        if (text.charCodeAt(i) === codeBackslash) {\n          var char = text[i + 1];\n          var escapeChar = escapeCharacters[char];\n          if (escapeChar !== undefined) {\n            result += escapeChar;\n            i++;\n          } else if (char === 'u') {\n            if (isHex(text.charCodeAt(i + 2)) && isHex(text.charCodeAt(i + 3)) && isHex(text.charCodeAt(i + 4)) && isHex(text.charCodeAt(i + 5))) {\n              result += String.fromCharCode(parseInt(text.slice(i + 2, i + 6), 16));\n              i += 5;\n            } else {\n              throwInvalidUnicodeCharacter(i);\n            }\n          } else {\n            throwInvalidEscapeCharacter(i);\n          }\n        } else {\n          if (isValidStringCharacter(text.charCodeAt(i))) {\n            result += text[i];\n          } else {\n            throwInvalidCharacter(text[i]);\n          }\n        }\n        i++;\n      }\n      expectEndOfString();\n      i++;\n      return result;\n    }\n  }\n  function parseNumeric() {\n    var start = i;\n    if (text.charCodeAt(i) === codeMinus) {\n      i++;\n      expectDigit(start);\n    }\n    if (text.charCodeAt(i) === codeZero) {\n      i++;\n    } else if (isNonZeroDigit(text.charCodeAt(i))) {\n      i++;\n      while (isDigit(text.charCodeAt(i))) {\n        i++;\n      }\n    }\n    if (text.charCodeAt(i) === codeDot) {\n      i++;\n      expectDigit(start);\n      while (isDigit(text.charCodeAt(i))) {\n        i++;\n      }\n    }\n    if (text.charCodeAt(i) === codeLowercaseE || text.charCodeAt(i) === codeUppercaseE) {\n      i++;\n      if (text.charCodeAt(i) === codeMinus || text.charCodeAt(i) === codePlus) {\n        i++;\n      }\n      expectDigit(start);\n      while (isDigit(text.charCodeAt(i))) {\n        i++;\n      }\n    }\n    if (i > start) {\n      return parseNumber(text.slice(start, i));\n    }\n  }\n  function eatComma() {\n    if (text.charCodeAt(i) !== codeComma) {\n      throw new SyntaxError(\"Comma ',' expected after value \".concat(gotAt()));\n    }\n    i++;\n  }\n  function eatColon() {\n    if (text.charCodeAt(i) !== codeColon) {\n      throw new SyntaxError(\"Colon ':' expected after property name \".concat(gotAt()));\n    }\n    i++;\n  }\n  function expectValue(value) {\n    if (value === undefined) {\n      throw new SyntaxError(\"JSON value expected \".concat(gotAt()));\n    }\n  }\n  function expectArrayItem(value) {\n    if (value === undefined) {\n      throw new SyntaxError(\"Array item expected \".concat(gotAt()));\n    }\n  }\n  function expectEndOfInput() {\n    if (i < text.length) {\n      throw new SyntaxError(\"Expected end of input \".concat(gotAt()));\n    }\n  }\n  function expectDigit(start) {\n    if (!isDigit(text.charCodeAt(i))) {\n      var numSoFar = text.slice(start, i);\n      throw new SyntaxError(\"Invalid number '\".concat(numSoFar, \"', expecting a digit \").concat(gotAt()));\n    }\n  }\n  function expectEndOfString() {\n    if (text.charCodeAt(i) !== codeDoubleQuote) {\n      throw new SyntaxError(\"End of string '\\\"' expected \".concat(gotAt()));\n    }\n  }\n  function throwObjectKeyExpected() {\n    throw new SyntaxError(\"Quoted object key expected \".concat(gotAt()));\n  }\n  function throwDuplicateKey(key, pos) {\n    throw new SyntaxError(\"Duplicate key '\".concat(key, \"' encountered at position \").concat(pos));\n  }\n  function throwObjectKeyOrEndExpected() {\n    throw new SyntaxError(\"Quoted object key or end of object '}' expected \".concat(gotAt()));\n  }\n  function throwArrayItemOrEndExpected() {\n    throw new SyntaxError(\"Array item or end of array ']' expected \".concat(gotAt()));\n  }\n  function throwInvalidCharacter(char) {\n    throw new SyntaxError(\"Invalid character '\".concat(char, \"' \").concat(pos()));\n  }\n  function throwInvalidEscapeCharacter(start) {\n    var chars = text.slice(start, start + 2);\n    throw new SyntaxError(\"Invalid escape character '\".concat(chars, \"' \").concat(pos()));\n  }\n  function throwObjectValueExpected() {\n    throw new SyntaxError(\"Object value expected after ':' \".concat(pos()));\n  }\n  function throwInvalidUnicodeCharacter(start) {\n    var end = start + 2;\n    while (/\\w/.test(text[end])) {\n      end++;\n    }\n    var chars = text.slice(start, end);\n    throw new SyntaxError(\"Invalid unicode character '\".concat(chars, \"' \").concat(pos()));\n  }\n\n  // zero based character position\n  function pos() {\n    return \"at position \".concat(i);\n  }\n  function got() {\n    return i < text.length ? \"but got '\".concat(text[i], \"'\") : 'but reached end of input';\n  }\n  function gotAt() {\n    return got() + ' ' + pos();\n  }\n}\nfunction isWhitespace(code) {\n  return code === codeSpace || code === codeNewline || code === codeTab || code === codeReturn;\n}\nfunction isHex(code) {\n  return code >= codeZero && code <= codeNine || code >= codeUppercaseA && code <= codeUppercaseF || code >= codeLowercaseA && code <= codeLowercaseF;\n}\nfunction isDigit(code) {\n  return code >= codeZero && code <= codeNine;\n}\nfunction isNonZeroDigit(code) {\n  return code >= codeOne && code <= codeNine;\n}\nexport function isValidStringCharacter(code) {\n  return code >= 0x20 && code <= 0x10ffff;\n}\nexport function isDeepEqual(a, b) {\n  if (a === b) {\n    return true;\n  }\n  if (Array.isArray(a) && Array.isArray(b)) {\n    return a.length === b.length && a.every(function (item, index) {\n      return isDeepEqual(item, b[index]);\n    });\n  }\n  if (isObject(a) && isObject(b)) {\n    var keys = _toConsumableArray(new Set([].concat(_toConsumableArray(Object.keys(a)), _toConsumableArray(Object.keys(b)))));\n    return keys.every(function (key) {\n      return isDeepEqual(a[key], b[key]);\n    });\n  }\n  return false;\n}\nfunction isObject(value) {\n  return _typeof(value) === 'object' && value !== null;\n}\n\n// map with all escape characters\nvar escapeCharacters = {\n  '\"': '\"',\n  '\\\\': '\\\\',\n  '/': '/',\n  b: '\\b',\n  f: '\\f',\n  n: '\\n',\n  r: '\\r',\n  t: '\\t'\n  // note that \\u is handled separately in parseString()\n};\n\nvar codeBackslash = 0x5c; // \"\\\"\nvar codeOpeningBrace = 0x7b; // \"{\"\nvar codeClosingBrace = 0x7d; // \"}\"\nvar codeOpeningBracket = 0x5b; // \"[\"\nvar codeClosingBracket = 0x5d; // \"]\"\nvar codeSpace = 0x20; // \" \"\nvar codeNewline = 0xa; // \"\\n\"\nvar codeTab = 0x9; // \"\\t\"\nvar codeReturn = 0xd; // \"\\r\"\nvar codeDoubleQuote = 0x0022; // \"\nvar codePlus = 0x2b; // \"+\"\nvar codeMinus = 0x2d; // \"-\"\nvar codeZero = 0x30;\nvar codeOne = 0x31;\nvar codeNine = 0x39;\nvar codeComma = 0x2c; // \",\"\nvar codeDot = 0x2e; // \".\" (dot, period)\nvar codeColon = 0x3a; // \":\"\nexport var codeUppercaseA = 0x41; // \"A\"\nexport var codeLowercaseA = 0x61; // \"a\"\nexport var codeUppercaseE = 0x45; // \"E\"\nexport var codeLowercaseE = 0x65; // \"e\"\nexport var codeUppercaseF = 0x46; // \"F\"\nexport var codeLowercaseF = 0x66; // \"f\"\n//# sourceMappingURL=parse.js.map","import { debug as debug$1 } from 'debug';\nimport { EventEmitter } from 'events';\nimport tls from 'tls';\nimport net from 'net';\nimport WebSocket from 'isomorphic-ws';\nimport { parse, isInteger, isSafeNumber, stringify } from 'lossless-json';\nimport { Mutex } from 'async-mutex';\n\n// Create the debug logs.\r\nconst debug = {\r\n    client: debug$1('electrum-cash:client '),\r\n    cluster: debug$1('electrum-cash:cluster'),\r\n    errors: debug$1('electrum-cash:error  '),\r\n    warning: debug$1('electrum-cash:warning'),\r\n    network: debug$1('electrum-cash:network'),\r\n    ping: debug$1('electrum-cash:pulses '),\r\n};\r\n// Set log colors.\r\ndebug.client.color = '2';\r\ndebug.cluster.color = '3';\r\ndebug.errors.color = '9';\r\ndebug.warning.color = '13';\r\ndebug.network.color = '4';\r\ndebug.ping.color = '8';\n\n/**\r\n * Grouping of utilities that simplifies implementation of the Electrum protocol.\r\n *\r\n * @ignore\r\n */\r\nclass ElectrumProtocol {\r\n    /**\r\n     * Helper function that builds an Electrum request object.\r\n     *\r\n     * @param {string} method       method to call.\r\n     * @param {array}  parameters   method parameters for the call.\r\n     * @param {string} requestId    unique string or number referencing this request.\r\n     *\r\n     * @returns a properly formatted Electrum request string.\r\n     */\r\n    static buildRequestObject(method, parameters, requestId) {\r\n        // Return the formatted request object.\r\n        // NOTE: Electrum either uses JsonRPC strictly or loosely.\r\n        //       If we specify protocol identifier without being 100% compliant, we risk being disconnected/blacklisted.\r\n        //       For this reason, we omit the protocol identifier to avoid issues.\r\n        return JSON.stringify({ method: method, params: parameters, id: requestId });\r\n    }\r\n    /**\r\n     * Constant used to verify if a provided string is a valid version number.\r\n     *\r\n     * @returns a regular expression that matches valid version numbers.\r\n     */\r\n    static get versionRegexp() {\r\n        return /^\\d+(\\.\\d+)+$/;\r\n    }\r\n    /**\r\n     * Constant used to separate statements/messages in a stream of data.\r\n     *\r\n     * @returns the delimiter used by Electrum to separate statements.\r\n     */\r\n    static get statementDelimiter() {\r\n        return '\\n';\r\n    }\r\n}\n\nconst isVersionRejected = function (object) {\r\n    return 'error' in object;\r\n};\r\nconst isVersionNegotiated = function (object) {\r\n    return 'software' in object && 'protocol' in object;\r\n};\n\n// Disable indent rule for this file because it is broken (https://github.com/typescript-eslint/typescript-eslint/issues/1824)\r\n/* eslint-disable @typescript-eslint/indent */\r\n/**\r\n * Enum that denotes the ordering to use in an ElectrumCluster.\r\n * @enum {number}\r\n * @property {0} RANDOM     Send requests to randomly selected servers in the cluster.\r\n * @property {1} PRIORITY   Send requests to servers in the cluster in the order they were added.\r\n */\r\nvar ClusterOrder;\r\n(function (ClusterOrder) {\r\n    ClusterOrder[ClusterOrder[\"RANDOM\"] = 0] = \"RANDOM\";\r\n    ClusterOrder[ClusterOrder[\"PRIORITY\"] = 1] = \"PRIORITY\";\r\n})(ClusterOrder || (ClusterOrder = {}));\r\n/**\r\n * Enum that denotes the distribution setting to use in an ElectrumCluster.\r\n * @enum {number}\r\n * @property {0} ALL   Send requests to all servers in the cluster.\r\n */\r\nvar ClusterDistribution;\r\n(function (ClusterDistribution) {\r\n    ClusterDistribution[ClusterDistribution[\"ALL\"] = 0] = \"ALL\";\r\n})(ClusterDistribution || (ClusterDistribution = {}));\r\n/**\r\n * Enum that denotes the ready status of an ElectrumCluster.\r\n * @enum {number}\r\n * @property {0} DISABLED    The cluster is disabled and unusable.\r\n * @property {1} DEGRADED    The cluster is degraded but still usable.\r\n * @property {2} READY       The cluster is healthy and ready for use.\r\n */\r\nvar ClusterStatus;\r\n(function (ClusterStatus) {\r\n    ClusterStatus[ClusterStatus[\"DISABLED\"] = 0] = \"DISABLED\";\r\n    ClusterStatus[ClusterStatus[\"DEGRADED\"] = 1] = \"DEGRADED\";\r\n    ClusterStatus[ClusterStatus[\"READY\"] = 2] = \"READY\";\r\n})(ClusterStatus || (ClusterStatus = {}));\r\n/**\r\n * Enum that denotes the availability of an ElectrumClient.\r\n * @enum {number}\r\n * @property {0} UNAVAILABLE   The client is currently not available.\r\n * @property {1} AVAILABLE     The client is available for use.\r\n */\r\nvar ClientState;\r\n(function (ClientState) {\r\n    ClientState[ClientState[\"UNAVAILABLE\"] = 0] = \"UNAVAILABLE\";\r\n    ClientState[ClientState[\"AVAILABLE\"] = 1] = \"AVAILABLE\";\r\n})(ClientState || (ClientState = {}));\r\n/**\r\n * Enum that denotes the connection status of an ElectrumConnection.\r\n * @enum {number}\r\n * @property {0} DISCONNECTED    The connection is disconnected.\r\n * @property {1} AVAILABLE       The connection is connected.\r\n * @property {2} DISCONNECTING   The connection is disconnecting.\r\n * @property {3} CONNECTING      The connection is connecting.\r\n * @property {4} RECONNECTING    The connection is restarting.\r\n */\r\nvar ConnectionStatus;\r\n(function (ConnectionStatus) {\r\n    ConnectionStatus[ConnectionStatus[\"DISCONNECTED\"] = 0] = \"DISCONNECTED\";\r\n    ConnectionStatus[ConnectionStatus[\"CONNECTED\"] = 1] = \"CONNECTED\";\r\n    ConnectionStatus[ConnectionStatus[\"DISCONNECTING\"] = 2] = \"DISCONNECTING\";\r\n    ConnectionStatus[ConnectionStatus[\"CONNECTING\"] = 3] = \"CONNECTING\";\r\n    ConnectionStatus[ConnectionStatus[\"RECONNECTING\"] = 4] = \"RECONNECTING\";\r\n})(ConnectionStatus || (ConnectionStatus = {}));\n\n/**\r\n * Object containing the commonly used ports and schemes for specific Transports.\r\n * @example const electrum = new ElectrumClient('Electrum client example', '1.4.1', 'bch.imaginary.cash', Transport.WSS.Port, Transport.WSS.Scheme);\r\n *\r\n * @property {object} TCP       Port and Scheme to use unencrypted TCP sockets.\r\n * @property {object} TCP_TLS   Port and Scheme to use TLS-encrypted TCP sockets.\r\n * @property {object} WS        Port and Scheme to use unencrypted WebSockets.\r\n * @property {object} WSS       Port and Scheme to use TLS-encrypted WebSockets.\r\n */\r\nconst ElectrumTransport = {\r\n    TCP: { Port: 50001, Scheme: 'tcp' },\r\n    TCP_TLS: { Port: 50002, Scheme: 'tcp_tls' },\r\n    WS: { Port: 50003, Scheme: 'ws' },\r\n    WSS: { Port: 50004, Scheme: 'wss' },\r\n};\r\nconst DefaultParameters = {\r\n    // Port number for TCP TLS connections\r\n    PORT: ElectrumTransport.TCP_TLS.Port,\r\n    // Transport to connect to the Electrum server\r\n    TRANSPORT_SCHEME: ElectrumTransport.TCP_TLS.Scheme,\r\n    // How long to wait before attempting to reconnect, in milliseconds.\r\n    RECONNECT: 15 * 1000,\r\n    // How long to wait for network operations before following up, in milliseconds.\r\n    TIMEOUT: 120 * 1000,\r\n    // Time between ping messages, in milliseconds. Pinging keeps the connection alive.\r\n    // The reason for pinging this frequently is to detect connection problems early.\r\n    PING_INTERVAL: 3 * 1000,\r\n    // How many servers are required before we trust information provided.\r\n    CLUSTER_CONFIDENCE: 1,\r\n    // How many servers we send requests to.\r\n    CLUSTER_DISTRIBUTION: ClusterDistribution.ALL,\r\n    // What order we select servers to send requests to.\r\n    CLUSTER_ORDER: ClusterOrder.RANDOM,\r\n    // If we use lossless json lib to parse json response.\r\n    LOSSLESS_JSON_PARSER: false,\r\n};\n\n/**\r\n * Isomorphic Socket interface supporting TCP sockets and WebSockets (Node and browser).\r\n * The interface is a subset of the TLSSocket interface with some slight modifications.\r\n * It can be expanded when more socket functionality is needed in the rest of the\r\n * electrum-cash code. Changes from the TLSSocket interface (besides it being a subset):\r\n * - Event 'close' -> 'disconnect'\r\n * - New function socket.disconnect()\r\n *\r\n * @ignore\r\n */\r\nclass ElectrumSocket extends EventEmitter {\r\n    // Declare an empty TCP socket.\r\n    tcpSocket;\r\n    // Declare an empty WebSocket.\r\n    webSocket;\r\n    // Declare timers for keep-alive pings and reconnection\r\n    timers = {};\r\n    // Initialize boolean that indicates whether the onConnect function has run (initialize to false).\r\n    onConnectHasRun = false;\r\n    // Initialize event forwarding functions.\r\n    eventForwarders = {\r\n        disconnect: () => this.emit('disconnect'),\r\n        tcpData: (data) => this.emit('data', data),\r\n        wsData: (event) => this.emit('data', `${event.data}\\n`),\r\n        tcpError: (err) => this.emit('error', err),\r\n        wsError: (event) => this.emit('error', event.error),\r\n    };\r\n    /**\r\n     * Connect to host:port using the specified transport\r\n     *\r\n     * @param {string} host              Fully qualified domain name or IP address of the host\r\n     * @param {number} port              Network port for the host to connect to\r\n     * @param {TransportScheme} scheme   Transport scheme to use\r\n     * @param {number} timeout           If no connection is established after `timeout` ms, the connection is terminated\r\n     *\r\n     * @throws {Error} if an incorrect transport scheme is specified\r\n     */\r\n    connect(host, port, scheme, timeout) {\r\n        // Check that no existing socket exists before initiating a new connection.\r\n        if (this.tcpSocket || this.webSocket) {\r\n            throw (new Error('Cannot initiate a new socket connection when an existing connection exists'));\r\n        }\r\n        // Set a timer to force disconnect after `timeout` seconds\r\n        this.timers.disconnect = setTimeout(() => this.disconnectOnTimeout(host, port, timeout), timeout);\r\n        // Remove the timer if a connection is successfully established\r\n        this.once('connect', this.clearDisconnectTimerOnTimeout);\r\n        // Define how to refer to the connection scheme in debug output.\r\n        const socketTypes = {\r\n            [ElectrumTransport.TCP.Scheme]: 'a TCP Socket',\r\n            [ElectrumTransport.TCP_TLS.Scheme]: 'an encrypted TCP socket',\r\n            [ElectrumTransport.WS.Scheme]: 'a WebSocket',\r\n            [ElectrumTransport.WSS.Scheme]: 'an encrypted WebSocket',\r\n        };\r\n        // Log that we are trying to establish a connection.\r\n        debug.network(`Initiating ${socketTypes[scheme]} connection to '${host}:${port}'.`);\r\n        if (scheme === ElectrumTransport.TCP.Scheme || scheme === ElectrumTransport.TCP_TLS.Scheme) {\r\n            if (scheme === ElectrumTransport.TCP_TLS.Scheme) {\r\n                // Initialize connection options.\r\n                const connectionOptions = { rejectUnauthorized: false };\r\n                // If the hostname is not an IP address..\r\n                if (!net.isIP(host)) {\r\n                    // Set the servername option which enables support for SNI.\r\n                    // NOTE: SNI enables a server that hosts multiple domains to provide the appropriate TLS certificate.\r\n                    connectionOptions.serverName = host;\r\n                }\r\n                // Initialize this.tcpSocket (allowing self-signed certificates).\r\n                this.tcpSocket = tls.connect(port, host, connectionOptions);\r\n                // Add a 'secureConnect' listener that checks the authorization status of\r\n                // the socket, and logs a warning when it uses a self signed certificate.\r\n                this.tcpSocket.once('secureConnect', () => {\r\n                    // Cannot happen, since this event callback *only* exists on TLSSocket\r\n                    if (!(this.tcpSocket instanceof tls.TLSSocket))\r\n                        return;\r\n                    // Force cast authorizationError from Error to string (through unknown)\r\n                    // because it is incorrectly typed as an Error\r\n                    const authorizationError = this.tcpSocket.authorizationError;\r\n                    if (authorizationError === 'DEPTH_ZERO_SELF_SIGNED_CERT') {\r\n                        debug.warning(`Connection to ${host}:${port} uses a self-signed certificate`);\r\n                    }\r\n                });\r\n                // Trigger successful connection events.\r\n                this.tcpSocket.on('secureConnect', this.onConnect.bind(this, socketTypes[scheme], host, port));\r\n            }\r\n            else {\r\n                // Initialize this.tcpSocket.\r\n                this.tcpSocket = net.connect({ host, port });\r\n                // Trigger successful connection events.\r\n                this.tcpSocket.on('connect', this.onConnect.bind(this, socketTypes[scheme], host, port));\r\n            }\r\n            // Configure encoding.\r\n            this.tcpSocket.setEncoding('utf8');\r\n            // Enable persistent connections with an initial delay of 0.\r\n            this.tcpSocket.setKeepAlive(true, 0);\r\n            // Disable buffering of outgoing data.\r\n            this.tcpSocket.setNoDelay(true);\r\n            // Forward the encountered errors.\r\n            this.tcpSocket.on('error', this.eventForwarders.tcpError);\r\n        }\r\n        else if (scheme === ElectrumTransport.WS.Scheme || scheme === ElectrumTransport.WSS.Scheme) {\r\n            if (scheme === ElectrumTransport.WSS.Scheme) {\r\n                // Initialize this.webSocket (rejecting self-signed certificates).\r\n                // We reject self-signed certificates to match functionality of browsers.\r\n                this.webSocket = new WebSocket(`wss://${host}:${port}`);\r\n            }\r\n            else {\r\n                // Initialize this.webSocket.\r\n                this.webSocket = new WebSocket(`ws://${host}:${port}`);\r\n            }\r\n            // Trigger successful connection events.\r\n            this.webSocket.addEventListener('open', this.onConnect.bind(this, socketTypes[scheme], host, port));\r\n            // Forward the encountered errors.\r\n            this.webSocket.addEventListener('error', this.eventForwarders.wsError);\r\n        }\r\n        else {\r\n            // Throw an error if an incorrect transport is specified\r\n            throw (new Error('Incorrect transport specified'));\r\n        }\r\n    }\r\n    /**\r\n     * Sets up forwarding of events related to the connection.\r\n     *\r\n     * @param {string} connectionType   Name of the connection/transport type, used for logging.\r\n     * @param {string} host             Fully qualified domain name or IP address of the host\r\n     * @param {number} port             Network port for the host to connect to\r\n     */\r\n    onConnect(connectionType, host, port) {\r\n        // If the onConnect function has already run, do not execute it again.\r\n        if (this.onConnectHasRun)\r\n            return;\r\n        // Log that the connection has been established.\r\n        debug.network(`Established ${connectionType} connection with '${host}:${port}'.`);\r\n        if (typeof this.tcpSocket !== 'undefined') {\r\n            // Forward the socket events\r\n            this.tcpSocket.addListener('close', this.eventForwarders.disconnect);\r\n            this.tcpSocket.addListener('data', this.eventForwarders.tcpData);\r\n        }\r\n        else if (typeof this.webSocket !== 'undefined') {\r\n            // Forward the socket events\r\n            this.webSocket.addEventListener('close', this.eventForwarders.disconnect);\r\n            this.webSocket.addEventListener('message', this.eventForwarders.wsData);\r\n        }\r\n        // Indicate that the onConnect function has run.\r\n        this.onConnectHasRun = true;\r\n        // Emit the connect event.\r\n        this.emit('connect');\r\n    }\r\n    /**\r\n     * Clears the disconnect timer if it is still active.\r\n     */\r\n    clearDisconnectTimerOnTimeout() {\r\n        // Clear the retry timer if it is still active.\r\n        if (this.timers.disconnect) {\r\n            clearTimeout(this.timers.disconnect);\r\n        }\r\n    }\r\n    /**\r\n     * Forcibly terminate the connection.\r\n     *\r\n     * @throws {Error} if no connection was found\r\n     */\r\n    disconnect() {\r\n        // Clear the disconnect timer so that the socket does not try to disconnect again later.\r\n        this.clearDisconnectTimerOnTimeout();\r\n        // Handle disconnect based differently depending on socket type.\r\n        if (this.tcpSocket) {\r\n            // Remove all event forwarders.\r\n            this.tcpSocket.removeListener('close', this.eventForwarders.disconnect);\r\n            this.tcpSocket.removeListener('data', this.eventForwarders.tcpData);\r\n            this.tcpSocket.removeListener('error', this.eventForwarders.tcpError);\r\n            // Terminate the connection.\r\n            this.tcpSocket.destroy();\r\n            // Remove the stored socket.\r\n            this.tcpSocket = undefined;\r\n        }\r\n        else if (this.webSocket) {\r\n            try {\r\n                // Remove all event forwarders.\r\n                this.webSocket.removeEventListener('close', this.eventForwarders.disconnect);\r\n                this.webSocket.removeEventListener('message', this.eventForwarders.wsData);\r\n                this.webSocket.removeEventListener('error', this.eventForwarders.wsError);\r\n                // Gracefully terminate the connection.\r\n                this.webSocket.close();\r\n            }\r\n            catch (ignored) {\r\n                // close() will throw an error if the connection has not been established yet.\r\n                // We ignore this error, since no similar error gets thrown in the TLS Socket.\r\n            }\r\n            finally {\r\n                // Remove the stored socket regardless of any thrown errors.\r\n                this.webSocket = undefined;\r\n            }\r\n        }\r\n        // Indicate that the onConnect function has not run and it has to be run again.\r\n        this.onConnectHasRun = false;\r\n        // Emit a disconnect event\r\n        this.emit('disconnect');\r\n    }\r\n    /**\r\n     * Write data to the socket\r\n     *\r\n     * @param {Uint8Array | string} data   Data to be written to the socket\r\n     * @param {function} callback          Callback function to be called when the write has completed\r\n     *\r\n     * @throws {Error} if no connection was found\r\n     * @returns true if the message was fully flushed to the socket, false if part of the message\r\n     * is queued in the user memory\r\n     */\r\n    write(data, callback) {\r\n        if (this.tcpSocket) {\r\n            // Write data to the TLS Socket and return the status indicating whether the\r\n            // full message was flushed to the socket\r\n            return this.tcpSocket.write(data, callback);\r\n        }\r\n        if (this.webSocket) {\r\n            // Write data to the WebSocket\r\n            this.webSocket.send(data, callback);\r\n            // WebSockets always fit everything in a single request, so we return true\r\n            return true;\r\n        }\r\n        // Throw an error if no active connection is found\r\n        throw (new Error('Cannot write to socket when there is no active connection'));\r\n    }\r\n    /**\r\n     * Force a disconnection if no connection is established after `timeout` milliseconds.\r\n     *\r\n     * @param {string} host      Host of the connection that timed out\r\n     * @param {number} port      Port of the connection that timed out\r\n     * @param {number} timeout   Elapsed milliseconds\r\n     */\r\n    disconnectOnTimeout(host, port, timeout) {\r\n        // Remove the connect listener.\r\n        this.removeListener('connect', this.clearDisconnectTimerOnTimeout);\r\n        // Create a new timeout error.\r\n        const timeoutError = { code: 'ETIMEDOUT', message: `Connection to '${host}:${port}' timed out after ${timeout} milliseconds` };\r\n        // Emit an error event so that connect is rejected upstream.\r\n        this.emit('error', timeoutError);\r\n        // Forcibly disconnect to clean up the connection on timeout\r\n        this.disconnect();\r\n    }\r\n}\n\n/**\r\n * Wrapper around TLS/WSS sockets that gracefully separates a network stream into Electrum protocol messages.\r\n *\r\n * @ignore\r\n */\r\nclass ElectrumConnection extends EventEmitter {\r\n    application;\r\n    version;\r\n    host;\r\n    port;\r\n    scheme;\r\n    timeout;\r\n    pingInterval;\r\n    useLosslessJsonParser;\r\n    // Declare an empty socket.\r\n    socket;\r\n    // Declare empty timestamps\r\n    lastReceivedTimestamp;\r\n    // Declare timers for keep-alive pings and reconnection\r\n    timers = {};\r\n    // Initialize an empty array of connection verification timers.\r\n    // eslint-disable-next-line no-undef\r\n    verifications = [];\r\n    // Initialize the connected flag to false to indicate that there is no connection\r\n    status = ConnectionStatus.DISCONNECTED;\r\n    // Initialize messageBuffer to an empty string\r\n    messageBuffer = '';\r\n    /**\r\n     * Sets up network configuration for an Electrum client connection.\r\n     *\r\n     * @param {string} application            your application name, used to identify to the electrum host.\r\n     * @param {string} version                protocol version to use with the host.\r\n     * @param {string} host                   fully qualified domain name or IP number of the host.\r\n     * @param {number} port                   the network port of the host.\r\n     * @param {TransportScheme} scheme        the transport scheme to use for connection\r\n     * @param {number} timeout                how long network delays we will wait for before taking action, in milliseconds.\r\n     * @param {number} pingInterval           the time between sending pings to the electrum host, in milliseconds.\r\n     * @param {boolean} useLosslessJsonParser whether to use lossless json library to handle bigint in response.\r\n     *\r\n     * @throws {Error} if `version` is not a valid version string.\r\n     */\r\n    constructor(application, version, host, port = DefaultParameters.PORT, scheme = DefaultParameters.TRANSPORT_SCHEME, timeout = DefaultParameters.TIMEOUT, pingInterval = DefaultParameters.PING_INTERVAL, useLosslessJsonParser = DefaultParameters.LOSSLESS_JSON_PARSER) {\r\n        // Initialize the event emitter.\r\n        super();\r\n        this.application = application;\r\n        this.version = version;\r\n        this.host = host;\r\n        this.port = port;\r\n        this.scheme = scheme;\r\n        this.timeout = timeout;\r\n        this.pingInterval = pingInterval;\r\n        this.useLosslessJsonParser = useLosslessJsonParser;\r\n        // Check if the provided version is a valid version number.\r\n        if (!ElectrumProtocol.versionRegexp.test(version)) {\r\n            // Throw an error since the version number was not valid.\r\n            throw (new Error(`Provided version string (${version}) is not a valid protocol version number.`));\r\n        }\r\n        // Create an initial network socket.\r\n        this.createSocket();\r\n    }\r\n    /**\r\n     * Returns a string for the host identifier for usage in debug messages.\r\n     */\r\n    get hostIdentifier() {\r\n        return `${this.host}:${this.port}`;\r\n    }\r\n    /**\r\n     * Create and configures a fresh socket and attaches all relevant listeners.\r\n     */\r\n    createSocket() {\r\n        // Initialize a new ElectrumSocket\r\n        this.socket = new ElectrumSocket();\r\n        // Set up handlers for connection and disconnection.\r\n        this.socket.on('connect', this.onSocketConnect.bind(this));\r\n        this.socket.on('disconnect', this.onSocketDisconnect.bind(this));\r\n        // Set up handler for incoming data.\r\n        this.socket.on('data', this.parseMessageChunk.bind(this));\r\n    }\r\n    /**\r\n     * Shuts down and destroys the current socket.\r\n     */\r\n    destroySocket() {\r\n        // Close the socket connection and destroy the socket.\r\n        this.socket.disconnect();\r\n    }\r\n    /**\r\n     * Assembles incoming data into statements and hands them off to the message parser.\r\n     *\r\n     * @param {string} data   data to append to the current message buffer, as a string.\r\n     *\r\n     * @throws {SyntaxError} if the passed statement parts are not valid JSON.\r\n     */\r\n    parseMessageChunk(data) {\r\n        // Update the timestamp for when we last received data.\r\n        this.lastReceivedTimestamp = Date.now();\r\n        // Clear and remove all verification timers.\r\n        this.verifications.forEach((timer) => clearTimeout(timer));\r\n        this.verifications.length = 0;\r\n        // Add the message to the current message buffer.\r\n        this.messageBuffer += data;\r\n        // Check if the new message buffer contains the statement delimiter.\r\n        while (this.messageBuffer.includes(ElectrumProtocol.statementDelimiter)) {\r\n            // Split message buffer into statements.\r\n            const statementParts = this.messageBuffer.split(ElectrumProtocol.statementDelimiter);\r\n            // For as long as we still have statements to parse..\r\n            while (statementParts.length > 1) {\r\n                // Move the first statement to its own variable.\r\n                const currentStatementList = String(statementParts.shift());\r\n                // Parse the statement into an object or list of objects.\r\n                let statementList;\r\n                if (this.useLosslessJsonParser) {\r\n                    statementList = parse(currentStatementList, undefined, (value) => {\r\n                        return isInteger(value) && (!isSafeNumber(value) || parseInt(value) > Number.MAX_SAFE_INTEGER) ? BigInt(value) : parseFloat(value);\r\n                    });\r\n                }\r\n                else {\r\n                    statementList = JSON.parse(currentStatementList);\r\n                }\r\n                // Wrap the statement in an array if it is not already a batched statement list.\r\n                if (!Array.isArray(statementList)) {\r\n                    statementList = [statementList];\r\n                }\r\n                // For as long as there is statements in the result set..\r\n                while (statementList.length > 0) {\r\n                    // Move the first statement from the batch to its own variable.\r\n                    const currentStatement = statementList.shift();\r\n                    // If the current statement is a version negotiation response..\r\n                    if (currentStatement.id === 'versionNegotiation') {\r\n                        if (currentStatement.error) {\r\n                            // Then emit a failed version negotiation response signal.\r\n                            this.emit('version', { error: currentStatement.error });\r\n                        }\r\n                        else {\r\n                            // Emit a successful version negotiation response signal.\r\n                            this.emit('version', { software: currentStatement.result[0], protocol: currentStatement.result[1] });\r\n                        }\r\n                        // Consider this statement handled.\r\n                        continue;\r\n                    }\r\n                    // If the current statement is a keep-alive response..\r\n                    if (currentStatement.id === 'keepAlive') {\r\n                        // Do nothing and consider this statement handled.\r\n                        continue;\r\n                    }\r\n                    // Emit the statements for handling higher up in the stack.\r\n                    this.emit('statement', currentStatement);\r\n                }\r\n            }\r\n            // Store the remaining statement as the current message buffer.\r\n            this.messageBuffer = statementParts.shift() || '';\r\n        }\r\n    }\r\n    /**\r\n     * Sends a keep-alive message to the host.\r\n     *\r\n     * @returns true if the ping message was fully flushed to the socket, false if\r\n     * part of the message is queued in the user memory\r\n     */\r\n    ping() {\r\n        // Write a log message.\r\n        debug.ping(`Sending keep-alive ping to '${this.hostIdentifier}'`);\r\n        // Craft a keep-alive message.\r\n        const message = ElectrumProtocol.buildRequestObject('server.ping', [], 'keepAlive');\r\n        // Send the keep-alive message.\r\n        const status = this.send(message);\r\n        // Return the ping status.\r\n        return status;\r\n    }\r\n    /**\r\n     * Initiates the network connection negotiates a protocol version. Also emits the 'connect' signal if successful.\r\n     *\r\n     * @throws {Error} if the socket connection fails.\r\n     * @returns a promise resolving when the connection is established\r\n     */\r\n    async connect() {\r\n        // If we are already connected return true.\r\n        if (this.status === ConnectionStatus.CONNECTED) {\r\n            return;\r\n        }\r\n        // Indicate that the connection is connecting\r\n        this.status = ConnectionStatus.CONNECTING;\r\n        // Define a function to wrap connection as a promise.\r\n        const connectionResolver = (resolve, reject) => {\r\n            const rejector = (error) => {\r\n                // Set the status back to disconnected\r\n                this.status = ConnectionStatus.DISCONNECTED;\r\n                // Reject with the error as reason\r\n                reject(error);\r\n            };\r\n            // Replace previous error handlers to reject the promise on failure.\r\n            this.socket.removeAllListeners('error');\r\n            this.socket.once('error', rejector);\r\n            // Define a function to wrap version negotiation as a callback.\r\n            const versionNegotiator = () => {\r\n                // Write a log message to show that we have started version negotiation.\r\n                debug.network(`Requesting protocol version ${this.version} with '${this.hostIdentifier}'.`);\r\n                // remove the one-time error handler since no error was detected.\r\n                this.socket.removeListener('error', rejector);\r\n                // Build a version negotiation message.\r\n                const versionMessage = ElectrumProtocol.buildRequestObject('server.version', [this.application, this.version], 'versionNegotiation');\r\n                // Define a function to wrap version validation as a function.\r\n                const versionValidator = (version) => {\r\n                    // Check if version negotiation failed.\r\n                    if (isVersionRejected(version)) {\r\n                        // Disconnect from the host.\r\n                        this.disconnect(true);\r\n                        // Declare an error message.\r\n                        const errorMessage = 'unsupported protocol version.';\r\n                        // Log the error.\r\n                        debug.errors(`Failed to connect with ${this.hostIdentifier} due to ${errorMessage}`);\r\n                        // Reject the connection with false since version negotiation failed.\r\n                        reject(errorMessage);\r\n                    }\r\n                    // Check if the host supports our requested protocol version.\r\n                    else if (version.protocol !== this.version) {\r\n                        // Disconnect from the host.\r\n                        this.disconnect(true);\r\n                        // Declare an error message.\r\n                        const errorMessage = `incompatible protocol version negotiated (${version.protocol} !== ${this.version}).`;\r\n                        // Log the error.\r\n                        debug.errors(`Failed to connect with ${this.hostIdentifier} due to ${errorMessage}`);\r\n                        // Reject the connection with false since version negotiation failed.\r\n                        reject(errorMessage);\r\n                    }\r\n                    else {\r\n                        // Write a log message.\r\n                        debug.network(`Negotiated protocol version ${version.protocol} with '${this.hostIdentifier}', powered by ${version.software}.`);\r\n                        // Set connection status to connected\r\n                        this.status = ConnectionStatus.CONNECTED;\r\n                        // Emit a connect event now that the connection is usable.\r\n                        this.emit('connect');\r\n                        // Resolve the connection promise since we successfully connected and negotiated protocol version.\r\n                        resolve();\r\n                    }\r\n                };\r\n                // Listen for version negotiation once.\r\n                this.once('version', versionValidator);\r\n                // Send the version negotiation message.\r\n                this.send(versionMessage);\r\n            };\r\n            // Prepare the version negotiation.\r\n            this.socket.once('connect', versionNegotiator);\r\n            // Set up handler for network errors.\r\n            this.socket.on('error', this.onSocketError.bind(this));\r\n            // Connect to the server.\r\n            this.socket.connect(this.host, this.port, this.scheme, this.timeout);\r\n        };\r\n        // Wait until connection is established and version negotiation succeeds.\r\n        await new Promise(connectionResolver);\r\n    }\r\n    /**\r\n     * Restores the network connection.\r\n     */\r\n    async reconnect() {\r\n        // If a reconnect timer is set, remove it\r\n        await this.clearReconnectTimer();\r\n        // Write a log message.\r\n        debug.network(`Trying to reconnect to '${this.hostIdentifier}'..`);\r\n        // Set the status to reconnecting for more accurate log messages.\r\n        this.status = ConnectionStatus.RECONNECTING;\r\n        // Destroy and recreate the socket to get a clean slate.\r\n        this.destroySocket();\r\n        this.createSocket();\r\n        try {\r\n            // Try to connect again.\r\n            await this.connect();\r\n        }\r\n        catch (error) {\r\n            // Do nothing as the error should be handled via the disconnect and error signals.\r\n        }\r\n    }\r\n    /**\r\n     * Removes the current reconnect timer.\r\n     */\r\n    clearReconnectTimer() {\r\n        // If a reconnect timer is set, remove it\r\n        if (this.timers.reconnect) {\r\n            clearTimeout(this.timers.reconnect);\r\n        }\r\n        // Reset the timer reference.\r\n        this.timers.reconnect = undefined;\r\n    }\r\n    /**\r\n     * Removes the current keep-alive timer.\r\n     */\r\n    clearKeepAliveTimer() {\r\n        // If a keep-alive timer is set, remove it\r\n        if (this.timers.keepAlive) {\r\n            clearTimeout(this.timers.keepAlive);\r\n        }\r\n        // Reset the timer reference.\r\n        this.timers.keepAlive = undefined;\r\n    }\r\n    /**\r\n     * Initializes the keep alive timer loop.\r\n     */\r\n    setupKeepAliveTimer() {\r\n        // If the keep-alive timer loop is not currently set up..\r\n        if (!this.timers.keepAlive) {\r\n            // Set a new keep-alive timer.\r\n            this.timers.keepAlive = setTimeout(this.ping.bind(this), this.pingInterval);\r\n        }\r\n    }\r\n    /**\r\n     * Tears down the current connection and removes all event listeners on disconnect.\r\n     *\r\n     * @param {boolean} force   disconnect even if the connection has not been fully established yet.\r\n     *\r\n     * @returns true if successfully disconnected, or false if there was no connection.\r\n     */\r\n    async disconnect(force = false) {\r\n        // Return early when there is nothing to disconnect from\r\n        if (this.status === ConnectionStatus.DISCONNECTED && !force) {\r\n            // Return false to indicate that there was nothing to disconnect from.\r\n            return false;\r\n        }\r\n        // Set connection status to null to indicate tear-down is currently happening.\r\n        this.status = ConnectionStatus.DISCONNECTING;\r\n        // If a keep-alive timer is set, remove it.\r\n        await this.clearKeepAliveTimer();\r\n        // If a reconnect timer is set, remove it\r\n        await this.clearReconnectTimer();\r\n        const disconnectResolver = (resolve) => {\r\n            // Resolve to true after the connection emits a disconnect\r\n            this.once('disconnect', () => resolve(true));\r\n            // Close the connection and destroy the socket.\r\n            this.destroySocket();\r\n        };\r\n        // Return true to indicate that we disconnected.\r\n        return new Promise(disconnectResolver);\r\n    }\r\n    /**\r\n     * Sends an arbitrary message to the server.\r\n     *\r\n     * @param {string} message   json encoded request object to send to the server, as a string.\r\n     *\r\n     * @returns true if the message was fully flushed to the socket, false if part of the message\r\n     * is queued in the user memory\r\n     */\r\n    send(message) {\r\n        // Remove the current keep-alive timer if it exists.\r\n        this.clearKeepAliveTimer();\r\n        // Get the current timestamp in milliseconds.\r\n        const currentTime = Date.now();\r\n        // Follow up and verify that the message got sent..\r\n        const verificationTimer = setTimeout(this.verifySend.bind(this, currentTime), this.timeout);\r\n        // Store the verification timer locally so that it can be cleared when data has been received.\r\n        this.verifications.push(verificationTimer);\r\n        // Set a new keep-alive timer.\r\n        this.setupKeepAliveTimer();\r\n        // Write the message to the network socket.\r\n        return this.socket.write(message + ElectrumProtocol.statementDelimiter);\r\n    }\r\n    // --- Event managers. --- //\r\n    /**\r\n     * Marks the connection as timed out and schedules reconnection if we have not\r\n     * received data within the expected time frame.\r\n     */\r\n    verifySend(sentTimestamp) {\r\n        // If we haven't received any data since we last sent data out..\r\n        if (Number(this.lastReceivedTimestamp) < sentTimestamp) {\r\n            // If this connection is already disconnected, we do not change anything\r\n            if ((this.status === ConnectionStatus.DISCONNECTED) || (this.status === ConnectionStatus.DISCONNECTING)) {\r\n                debug.errors(`Tried to verify already disconnected connection to '${this.hostIdentifier}'`);\r\n                return;\r\n            }\r\n            // Remove the current keep-alive timer if it exists.\r\n            this.clearKeepAliveTimer();\r\n            // Write a notification to the logs.\r\n            debug.network(`Connection to '${this.hostIdentifier}' timed out.`);\r\n            // Close the connection to avoid re-use.\r\n            // NOTE: This initiates reconnection routines if the connection has not\r\n            //       been marked as intentionally disconnected.\r\n            this.socket.disconnect();\r\n        }\r\n    }\r\n    /**\r\n     * Updates the connection status when a connection is confirmed.\r\n     */\r\n    onSocketConnect() {\r\n        // If a reconnect timer is set, remove it.\r\n        this.clearReconnectTimer();\r\n        // Set up the initial timestamp for when we last received data from the server.\r\n        this.lastReceivedTimestamp = Date.now();\r\n        // Set up the initial keep-alive timer.\r\n        this.setupKeepAliveTimer();\r\n        // Clear all temporary error listeners.\r\n        this.socket.removeAllListeners('error');\r\n        // Set up handler for network errors.\r\n        this.socket.on('error', this.onSocketError.bind(this));\r\n    }\r\n    /**\r\n     * Updates the connection status when a connection is ended.\r\n     */\r\n    onSocketDisconnect() {\r\n        // Send a disconnect signal higher up the stack.\r\n        this.emit('disconnect');\r\n        // Remove the current keep-alive timer if it exists.\r\n        this.clearKeepAliveTimer();\r\n        // If this is a connection we're trying to tear down..\r\n        if (this.status === ConnectionStatus.DISCONNECTING) {\r\n            // If a reconnect timer is set, remove it.\r\n            this.clearReconnectTimer();\r\n            // Remove all event listeners\r\n            this.removeAllListeners();\r\n            // Mark the connection as disconnected.\r\n            this.status = ConnectionStatus.DISCONNECTED;\r\n            // Write a log message.\r\n            debug.network(`Disconnected from '${this.hostIdentifier}'.`);\r\n        }\r\n        else {\r\n            // If this is for an established connection..\r\n            if (this.status === ConnectionStatus.CONNECTED) {\r\n                // Write a notification to the logs.\r\n                debug.errors(`Connection with '${this.hostIdentifier}' was closed, trying to reconnect in ${DefaultParameters.RECONNECT / 1000} seconds.`);\r\n            }\r\n            // Mark the connection as disconnected for now..\r\n            this.status = ConnectionStatus.DISCONNECTED;\r\n            // If we don't have a pending reconnection timer..\r\n            if (!this.timers.reconnect) {\r\n                // Attempt to reconnect after one keep-alive duration.\r\n                this.timers.reconnect = setTimeout(this.reconnect.bind(this), DefaultParameters.RECONNECT);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Notify administrator of any unexpected errors.\r\n     */\r\n    onSocketError(error) {\r\n        // Report a generic error if no error information is present.\r\n        // NOTE: When using WSS, the error event explicitly\r\n        //       only allows to send a \"simple\" event without data.\r\n        //       https://stackoverflow.com/a/18804298\r\n        if (typeof error === 'undefined') {\r\n            // Do nothing, and instead rely on the socket disconnect event for further information.\r\n            return;\r\n        }\r\n        // If the DNS lookup failed.\r\n        if (error.code === 'EAI_AGAIN') {\r\n            debug.errors(`Failed to look up DNS records for '${this.host}'.`);\r\n            return;\r\n        }\r\n        // If the connection timed out..\r\n        if (error.code === 'ETIMEDOUT') {\r\n            // Log the provided timeout message.\r\n            debug.errors(error.message);\r\n            return;\r\n        }\r\n        // Log unknown error\r\n        debug.errors(`Unknown network error ('${this.hostIdentifier}'): `, error);\r\n    }\r\n}\n\nconst isRPCErrorResponse = function (message) {\r\n    return 'id' in message && 'error' in message;\r\n};\r\nconst isRPCNotification = function (message) {\r\n    return !('id' in message) && 'method' in message;\r\n};\n\n/**\r\n * Triggers when the underlying connection is established.\r\n *\r\n * @event ElectrumClient#connected\r\n */\r\n/**\r\n * Triggers when the underlying connection is lost.\r\n *\r\n * @event ElectrumClient#disconnected\r\n */\r\n/**\r\n * High-level Electrum client that lets applications send requests and subscribe to notification events from a server.\r\n */\r\nclass ElectrumClient extends EventEmitter {\r\n    // Declare instance variables\r\n    connection;\r\n    // Initialize an empty list of subscription metadata.\r\n    subscriptionMethods = {};\r\n    subscriptionCallbacks = new WeakMap();\r\n    // Start counting the request IDs from 0\r\n    requestId = 0;\r\n    // Initialize an empty dictionary for keeping track of request resolvers\r\n    requestResolvers = {};\r\n    /**\r\n     * Initializes an Electrum client.\r\n     *\r\n     * @param {string} application            your application name, used to identify to the electrum host.\r\n     * @param {string} version                protocol version to use with the host.\r\n     * @param {string} host                   fully qualified domain name or IP number of the host.\r\n     * @param {number} port                   the TCP network port of the host.\r\n     * @param {TransportScheme} scheme        the transport scheme to use for connection\r\n     * @param {number} timeout                how long network delays we will wait for before taking action, in milliseconds.\r\n     * @param {number} pingInterval           the time between sending pings to the electrum host, in milliseconds.\r\n     * @param {boolean} useLosslessJsonParser whether to use lossless json library to handle bigint in response.\r\n     *\r\n     * @throws {Error} if `version` is not a valid version string.\r\n     */\r\n    constructor(application, version, host, port = DefaultParameters.PORT, scheme = DefaultParameters.TRANSPORT_SCHEME, timeout = DefaultParameters.TIMEOUT, pingInterval = DefaultParameters.PING_INTERVAL, useLosslessJsonParser = DefaultParameters.LOSSLESS_JSON_PARSER) {\r\n        // Initialize the event emitter.\r\n        super();\r\n        // Set up a connection to an electrum server.\r\n        this.connection = new ElectrumConnection(application, version, host, port, scheme, timeout, pingInterval, useLosslessJsonParser);\r\n    }\r\n    /**\r\n     * Connects to the remote server.\r\n     *\r\n     * @throws {Error} if the socket connection fails.\r\n     * @returns a promise resolving when the connection is established.\r\n     */\r\n    async connect() {\r\n        // Listen for parsed statements.\r\n        this.connection.on('statement', this.response.bind(this));\r\n        // Hook up resubscription on connection.\r\n        this.connection.on('connect', this.resubscribeOnConnect.bind(this));\r\n        // Relay connect and disconnect events.\r\n        this.connection.on('connect', this.emit.bind(this, 'connected'));\r\n        this.connection.on('disconnect', this.onConnectionDisconnect.bind(this));\r\n        // Relay error events.\r\n        this.connection.on('error', this.emit.bind(this, 'error'));\r\n        // Connect with the server.\r\n        await this.connection.connect();\r\n    }\r\n    /**\r\n     * Disconnects from the remote server and removes all event listeners/subscriptions and open requests.\r\n     *\r\n     * @param {boolean} force                 disconnect even if the connection has not been fully established yet.\r\n     * @param {boolean} retainSubscriptions   retain subscription data so they will be restored on reconnection.\r\n     *\r\n     * @returns true if successfully disconnected, or false if there was no connection.\r\n     */\r\n    async disconnect(force = false, retainSubscriptions = false) {\r\n        if (!retainSubscriptions) {\r\n            // Cancel all event listeners.\r\n            this.removeAllListeners();\r\n            // Remove all subscription data\r\n            this.subscriptionMethods = {};\r\n        }\r\n        // For each pending request..\r\n        for (const index in this.requestResolvers) {\r\n            // Reject the request.\r\n            const requestResolver = this.requestResolvers[index];\r\n            requestResolver(new Error('Manual disconnection'));\r\n            // Remove the request.\r\n            delete this.requestResolvers[index];\r\n        }\r\n        // Disconnect from the remove server.\r\n        return this.connection.disconnect(force);\r\n    }\r\n    /**\r\n     * Calls a method on the remote server with the supplied parameters.\r\n     *\r\n     * @param {string} method          name of the method to call.\r\n     * @param {...string} parameters   one or more parameters for the method.\r\n     *\r\n     * @throws {Error} if the client is disconnected.\r\n     * @returns a promise that resolves with the result of the method or an Error.\r\n     */\r\n    async request(method, ...parameters) {\r\n        // If we are not connected to a server..\r\n        if (this.connection.status !== ConnectionStatus.CONNECTED) {\r\n            // Reject the request with a disconnected error message.\r\n            throw (new Error(`Unable to send request to a disconnected server '${this.connection.host}'.`));\r\n        }\r\n        // Increase the request ID by one.\r\n        this.requestId += 1;\r\n        // Store a copy of the request id.\r\n        const id = this.requestId;\r\n        // Format the arguments as an electrum request object.\r\n        const message = ElectrumProtocol.buildRequestObject(method, parameters, id);\r\n        // Define a function to wrap the request in a promise.\r\n        const requestResolver = (resolve) => {\r\n            // Add a request resolver for this promise to the list of requests.\r\n            this.requestResolvers[id] = (error, data) => {\r\n                // If the resolution failed..\r\n                if (error) {\r\n                    // Resolve the promise with the error for the application to handle.\r\n                    resolve(error);\r\n                }\r\n                else {\r\n                    // Resolve the promise with the request results.\r\n                    resolve(data);\r\n                }\r\n            };\r\n            // Send the request message to the remote server.\r\n            this.connection.send(message);\r\n        };\r\n        // Write a log message.\r\n        debug.network(`Sending request '${method}' to '${this.connection.host}'`);\r\n        // return a promise to deliver results later.\r\n        return new Promise(requestResolver);\r\n    }\r\n    /**\r\n     * Subscribes to the method at the server and attaches the callback function to the event feed.\r\n     *\r\n     * @param {function}  callback     a function that should get notification messages.\r\n     * @param {string}    method       one of the subscribable methods the server supports.\r\n     * @param {...string} parameters   one or more parameters for the method.\r\n     *\r\n     * @throws {Error} if the client is disconnected.\r\n     * @returns a promise resolving to true when the subscription is set up.\r\n     */\r\n    async subscribe(callback, method, ...parameters) {\r\n        // Define a function resolve the subscription setup process.\r\n        const subscriptionResolver = async (resolve) => {\r\n            // If this method is not yet being listened on with this callback..\r\n            if (!this.listeners(method).includes(callback)) {\r\n                // Set up event listener for this subscription.\r\n                this.addListener(method, callback);\r\n            }\r\n            // If this method has never been subscribed to before..\r\n            if (!this.subscriptionMethods[method]) {\r\n                // Initialize an empty subscription payload list for this method.\r\n                this.subscriptionMethods[method] = [];\r\n            }\r\n            // Store the subscription parameters to track what data we have subscribed to.\r\n            this.subscriptionMethods[method].push(JSON.stringify(parameters));\r\n            // Get the currently subscribed payloads for this callback, or an empty array if none exist.\r\n            const subscriptionCallbackPayloads = this.subscriptionCallbacks.get(callback) || [];\r\n            // Update the subscription parameters to track what data this callback is listening on.\r\n            subscriptionCallbackPayloads.push({ method, payload: JSON.stringify(parameters) });\r\n            // Store the subscription parameters.\r\n            this.subscriptionCallbacks.set(callback, subscriptionCallbackPayloads);\r\n            // Send initial subscription request.\r\n            const requestData = await this.request(method, ...parameters);\r\n            // Manually send the initial request data to the callback.\r\n            callback(requestData);\r\n            // Resolve the subscription promise.\r\n            resolve(true);\r\n        };\r\n        // Return a promise that resolves when the subscription is set up.\r\n        return new Promise(subscriptionResolver);\r\n    }\r\n    /**\r\n     * Unsubscribes to the method at the server and removes any callback functions\r\n     * when there are no more subscriptions for the method.\r\n     *\r\n     * @param {function}  callback     a function that has previously been subscribed for this method.\r\n     * @param {string}    method       a previously subscribed to method.\r\n     * @param {...string} parameters   one or more parameters for the method.\r\n     *\r\n     * @throws {Error} if no subscriptions exist for the combination of the passed `callback`, `method` and `parameters.\r\n     * @throws {Error} if the client is disconnected.\r\n     * @returns a promise that resolves to true when the subscription has been cancelled.\r\n     */\r\n    async unsubscribe(callback, method, ...parameters) {\r\n        // Throw an error if the client is disconnected.\r\n        if (this.connection.status !== ConnectionStatus.CONNECTED) {\r\n            throw (new Error(`Unable to send unsubscribe request to a disconnected server '${this.connection.host}'.`));\r\n        }\r\n        // Define a function resolve the subscription setup process.\r\n        const subscriptionResolver = async (resolve) => {\r\n            // Pack up the parameters as a long string.\r\n            const subscriptionParameters = JSON.stringify(parameters);\r\n            // If this method has no subscriptions..\r\n            if (!this.subscriptionMethods[method]) {\r\n                // Reject this promise with an explanation.\r\n                throw (new Error(`Cannot unsubscribe from '${method}' since the method has no subscriptions.`));\r\n            }\r\n            // If this callback has no subscriptions..\r\n            if (!this.subscriptionCallbacks.has(callback)) {\r\n                // Reject this promise with an explanation.\r\n                throw (new Error(`Cannot unsubscribe with '${callback.name}' since the callback has no subscriptions.`));\r\n            }\r\n            // Count the number of methods subscribed to this payload.\r\n            const serverMethodPayloadCount = Object.values(this.subscriptionMethods[method])\r\n                .filter((payload) => payload === subscriptionParameters).length;\r\n            // Count the number of callbacks attached to this method.\r\n            const callbackMethodPayloadCount = (this.subscriptionCallbacks.get(callback) || [])\r\n                .filter((value) => value.method === method).length;\r\n            // Locate the method and callback subscription index.\r\n            const serverMethodPayloadIndex = this.subscriptionMethods[method].indexOf(subscriptionParameters);\r\n            const callbackMethodPayloadIndex = (this.subscriptionCallbacks.get(callback) || [])\r\n                .findIndex((value) => (value.method === method && value.payload === subscriptionParameters));\r\n            // If the method payload could not be located..\r\n            if (serverMethodPayloadIndex < 0) {\r\n                // Reject this promise with an explanation.\r\n                throw (new Error(`Cannot unsubscribe from '${method}' since it has no subscription with the given parameters.`));\r\n            }\r\n            // If the callback payload could not be located..\r\n            if (callbackMethodPayloadIndex < 0) {\r\n                // Reject this promise with an explanation.\r\n                throw (new Error(`Cannot unsubscribe with '${callback.name}' since it has no subscription with the given method and parameters.`));\r\n            }\r\n            // If this is the last payload that any callback has for this method..\r\n            if (serverMethodPayloadCount === 1) {\r\n                // Remove this specific subscription payload from internal tracking.\r\n                this.subscriptionMethods[method].splice(serverMethodPayloadIndex, 1);\r\n                // If the subscription conforms to expected naming standards..\r\n                if (method.endsWith('.subscribe')) {\r\n                    // Send unsubscription request to the server.\r\n                    await this.request(method.replace('.subscribe', '.unsubscribe'), ...parameters);\r\n                }\r\n            }\r\n            // If this is the last payload that this specific callback has to this method..\r\n            if (callbackMethodPayloadCount === 1) {\r\n                // Remove the current callback from listening to given method.\r\n                this.removeListener(method, callback);\r\n            }\r\n            // Get the currently subscribed payloads for this callback, or an empty array if none exist.\r\n            const subscriptionCallbackPayloads = this.subscriptionCallbacks.get(callback) || [];\r\n            // Remove the internal tracking of this callbacks specific method and payload combination.\r\n            this.subscriptionCallbacks.set(callback, subscriptionCallbackPayloads.splice(callbackMethodPayloadIndex, 1));\r\n            // Write a log message.\r\n            debug.client(`Unsubscribed callback '${callback.name}' from '${String(method)}' for the '${subscriptionParameters}' parameters.`);\r\n            // Resolve the subscription promise.\r\n            resolve(true);\r\n        };\r\n        // Return a promise that resolves when the subscription is torn down.\r\n        return new Promise(subscriptionResolver);\r\n    }\r\n    /**\r\n     * Restores existing subscriptions without updating status or triggering manual callbacks.\r\n     *\r\n     * @throws {Error} if subscription data cannot be found for all stored event names.\r\n     * @throws {Error} if the client is disconnected.\r\n     * @returns a promise resolving to true when the subscriptions are restored.\r\n     *\r\n     * @ignore\r\n     */\r\n    async resubscribeOnConnect() {\r\n        // Write a log message.\r\n        debug.client(`Connected to '${this.connection.hostIdentifier}'.`);\r\n        // For each method we have a listener for..\r\n        for (const method of this.eventNames()) {\r\n            // Ignore the connected, disconnected and error method/signals..\r\n            if (method === 'connected' || method === 'disconnected' || method === 'error') {\r\n                continue;\r\n            }\r\n            // Check that we really have a subscription to restore.\r\n            if (!this.subscriptionMethods[String(method)]) {\r\n                // Throw an error since this breaks our expectations.\r\n                throw (new Error(`Unable to resubscribe to ${String(method)} at ${this.connection.hostIdentifier} due to missing subscription data.`));\r\n            }\r\n            // .. and for each parameter we have previously been subscribed to..\r\n            for (const parameterJSON of this.subscriptionMethods[String(method)]) {\r\n                // restore the parameters from JSON.\r\n                const parameters = JSON.parse(parameterJSON);\r\n                // Send a subscription request.\r\n                await this.request(String(method), ...parameters);\r\n            }\r\n            // Write a log message.\r\n            debug.client(`Restored ${this.subscriptionMethods[String(method)].length} previous '${String(method)}' subscriptions for '${this.connection.hostIdentifier}'`);\r\n        }\r\n        // Resolve the subscription promise.\r\n        return true;\r\n    }\r\n    /**\r\n     * Parser messages from the remote server to resolve request promises and emit subscription events.\r\n     *\r\n     * @param {RPCNotification | RPCResponse} message   the response message\r\n     *\r\n     * @throws {Error} if the message ID does not match an existing request.\r\n     * @ignore\r\n     */\r\n    response(message) {\r\n        // If the received message is a notification, we forward it to all event listeners\r\n        if (isRPCNotification(message)) {\r\n            // Write a log message.\r\n            debug.client(`Received notification for '${message.method}' from '${this.connection.host}'`);\r\n            // Forward the message content to all event listeners.\r\n            this.emit(message.method, message.params);\r\n            // Return since it does not have an associated request resolver\r\n            return;\r\n        }\r\n        // If the response ID is null we cannot use it to index our request resolvers\r\n        if (message.id === null) {\r\n            // Throw an internal error, this should not happen.\r\n            throw (new Error('Internal error: Received an RPC response with ID null.'));\r\n        }\r\n        // Look up which request promise we should resolve this.\r\n        const requestResolver = this.requestResolvers[message.id];\r\n        // If we do not have a request resolver for this response message..\r\n        if (!requestResolver) {\r\n            // Throw an internal error, this should not happen.\r\n            throw (new Error('Internal error: Callback for response not available.'));\r\n        }\r\n        // Remove the promise from the request list.\r\n        delete this.requestResolvers[message.id];\r\n        // If the message contains an error..\r\n        if (isRPCErrorResponse(message)) {\r\n            // Forward the message error to the request resolver and omit the `result` parameter.\r\n            requestResolver(new Error(message.error.message));\r\n        }\r\n        else {\r\n            // Forward the message content to the request resolver and omit the `error` parameter\r\n            // (by setting it to undefined).\r\n            requestResolver(undefined, message.result);\r\n        }\r\n    }\r\n    /**\r\n     * Callback function that is called when connection to the Electrum server is lost.\r\n     * Aborts all active requests with an error message indicating that connection was lost.\r\n     *\r\n     * @ignore\r\n     */\r\n    onConnectionDisconnect() {\r\n        // Emit a disconnection signal to any listeners.\r\n        this.emit('disconnected');\r\n        // Loop over active requests\r\n        for (const resolverId in this.requestResolvers) {\r\n            // Extract request resolver for readability\r\n            const requestResolver = this.requestResolvers[resolverId];\r\n            // Resolve the active request with an error indicating that the connection was lost.\r\n            requestResolver(new Error('Connection lost'));\r\n            // Remove the promise from the request list.\r\n            delete this.requestResolvers[resolverId];\r\n        }\r\n    }\r\n}\n\n/**\r\n * Triggers when the cluster connects to enough servers to satisfy both the cluster confidence and distribution policies.\r\n *\r\n * @event ElectrumCluster#ready\r\n */\r\n/**\r\n * Triggers when the cluster loses a connection and can no longer satisfy the cluster distribution policy.\r\n *\r\n * @event ElectrumCluster#degraded\r\n */\r\n/**\r\n * Triggers when the cluster loses a connection and can no longer satisfy the cluster confidence policy.\r\n *\r\n * @event ElectrumCluster#disabled\r\n */\r\n/**\r\n * High-level electrum client that provides transparent load balancing, confidence checking and/or low-latency polling.\r\n */\r\nclass ElectrumCluster extends EventEmitter {\r\n    application;\r\n    version;\r\n    timeout;\r\n    pingInterval;\r\n    useLosslessJsonParser;\r\n    // Declare instance variables\r\n    strategy;\r\n    // Initialize an empty dictionary of clients in the cluster\r\n    clients = {};\r\n    // Start at 0 connected clients\r\n    connections = 0;\r\n    // Set up an empty set of notification data.\r\n    notifications = {};\r\n    // Start the cluster in DISABLED state\r\n    status = ClusterStatus.DISABLED;\r\n    // Start counting request IDs at 0\r\n    requestCounter = 0;\r\n    // Initialize an empty dictionary for keeping track of request resolvers\r\n    requestPromises = {};\r\n    // Lock to prevent concurrency race conditions when sending requests.\r\n    requestLock = new Mutex();\r\n    // Lock to prevent concurrency race conditions when receiving responses.\r\n    responseLock = new Mutex();\r\n    /**\r\n     * @param {string} application    your application name, used to identify to the electrum hosts.\r\n     * @param {string} version        protocol version to use with the hosts.\r\n     * @param {number} confidence     wait for this number of hosts to provide identical results.\r\n     * @param {number} distribution   request information from this number of hosts.\r\n     * @param {ClusterOrder} order    select hosts to communicate with in this order.\r\n     * @param {number} timeout        how long network delays we will wait for before taking action, in milliseconds.\r\n     * @param {number} pingInterval      the time between sending pings to the electrum host, in milliseconds.\r\n     * @param {boolean} useLosslessJsonParser whether to use lossless json library to handle bigint in response.\r\n     */\r\n    constructor(application, version, confidence = DefaultParameters.CLUSTER_CONFIDENCE, distribution = DefaultParameters.CLUSTER_DISTRIBUTION, order = DefaultParameters.CLUSTER_ORDER, timeout = DefaultParameters.TIMEOUT, pingInterval = DefaultParameters.PING_INTERVAL, useLosslessJsonParser = DefaultParameters.LOSSLESS_JSON_PARSER) {\r\n        // Initialize the event emitter.\r\n        super();\r\n        this.application = application;\r\n        this.version = version;\r\n        this.timeout = timeout;\r\n        this.pingInterval = pingInterval;\r\n        this.useLosslessJsonParser = useLosslessJsonParser;\r\n        // Initialize strategy.\r\n        this.strategy =\r\n            {\r\n                distribution: distribution,\r\n                confidence: confidence,\r\n                order: order,\r\n            };\r\n        // Write a log message.\r\n        debug.cluster(`Initialized empty cluster (${confidence} of ${distribution || 'ALL'})`);\r\n        // Print out a warning if we cannot guarantee consensus for subscription notifications.\r\n        // Case 1: we don't know how many servers will be used, so warning just to be safe\r\n        // Case 2: we know the number of servers needed to trust a response is less than 50%.\r\n        if ((distribution === ClusterDistribution.ALL) || (confidence / distribution <= 0.50)) {\r\n            debug.warning(`Subscriptions might return multiple valid responses when confidence (${confidence}) is less than 51% of distribution.`);\r\n        }\r\n    }\r\n    /**\r\n     * Adds a server to the cluster.\r\n     *\r\n     * @param {string} host              fully qualified domain name or IP number of the host.\r\n     * @param {number} port              the TCP network port of the host.\r\n     * @param {TransportScheme} scheme   the transport scheme to use for connection\r\n     * @param {boolean} autoConnect      flag indicating whether the server should automatically connect (default true)\r\n     *\r\n     * @throws {Error} if the cluster's version is not a valid version string.\r\n     * @returns a promise that resolves when the connection has been initiated.\r\n     */\r\n    async addServer(host, port = DefaultParameters.PORT, scheme = DefaultParameters.TRANSPORT_SCHEME, autoConnect = true) {\r\n        // Set up a new electrum client.\r\n        const client = new ElectrumClient(this.application, this.version, host, port, scheme, this.timeout, this.pingInterval, this.useLosslessJsonParser);\r\n        // Store this client.\r\n        this.clients[`${host}:${port}`] =\r\n            {\r\n                state: ClientState.UNAVAILABLE,\r\n                connection: client,\r\n            };\r\n        /**\r\n         * Define a helper function to evaluate and log cluster status.\r\n         *\r\n         * @fires ElectrumCluster#ready\r\n         * @fires ElectrumCluster#degraded\r\n         * @fires ElectrumCluster#disabled\r\n         */\r\n        const updateClusterStatus = () => {\r\n            // Calculate the required distribution, taking into account that distribution to all is represented with 0.\r\n            const distribution = Math.max(this.strategy.confidence, this.strategy.distribution);\r\n            // Check if we have enough connections to saturate distribution.\r\n            if (this.connections >= distribution) {\r\n                // If the cluster is not currently considered ready..\r\n                if (this.status !== ClusterStatus.READY) {\r\n                    // Mark the cluster as ready.\r\n                    this.status = ClusterStatus.READY;\r\n                    // Emit the ready signal to indicate the cluster is running in a ready mode.\r\n                    this.emit('ready');\r\n                    // Write a log message with an update on the current cluster status.\r\n                    debug.cluster(`Cluster status is ready (currently ${this.connections} of ${distribution} connections available.)`);\r\n                }\r\n            }\r\n            // If we still have enough available connections to reach confidence..\r\n            else if (this.connections >= this.strategy.confidence) {\r\n                // If the cluster is not currently considered degraded..\r\n                if (this.status !== ClusterStatus.DEGRADED) {\r\n                    // Mark the cluster as degraded.\r\n                    this.status = ClusterStatus.DEGRADED;\r\n                    // Emit the degraded signal to indicate the cluster is running in a degraded mode.\r\n                    this.emit('degraded');\r\n                    // Write a log message with an update on the current cluster status.\r\n                    debug.cluster(`Cluster status is degraded (only ${this.connections} of ${distribution} connections available.)`);\r\n                }\r\n            }\r\n            // If we don't have enough connections to reach confidence..\r\n            // .. and the cluster is not currently considered disabled..\r\n            else if (this.status !== ClusterStatus.DISABLED) {\r\n                // Mark the cluster as disabled.\r\n                this.status = ClusterStatus.DISABLED;\r\n                // Emit the degraded signal to indicate the cluster is disabled.\r\n                this.emit('disabled');\r\n                // Write a log message with an update on the current cluster status.\r\n                debug.cluster(`Cluster status is disabled (only ${this.connections} of the ${distribution} connections are available.)`);\r\n            }\r\n        };\r\n        // Define a function to run when client has connects.\r\n        const onConnect = async () => {\r\n            // Wrap in a try-catch so we can ignore errors.\r\n            try {\r\n                // Check connection status\r\n                const connectionStatus = client.connection.status;\r\n                // If the connection is fine..\r\n                if (connectionStatus === ConnectionStatus.CONNECTED) {\r\n                    // If this was from an unavailable connection..\r\n                    if (this.clients[`${host}:${port}`].state === ClientState.UNAVAILABLE) {\r\n                        // Update connection counter.\r\n                        this.connections += 1;\r\n                    }\r\n                    // Set client state to available.\r\n                    this.clients[`${host}:${port}`].state = ClientState.AVAILABLE;\r\n                    // update the cluster status.\r\n                    updateClusterStatus();\r\n                }\r\n            }\r\n            catch (error) {\r\n                // Do nothing.\r\n            }\r\n        };\r\n        // Define a function to run when client disconnects.\r\n        const onDisconnect = () => {\r\n            // If this was from an established connection..\r\n            if (this.clients[`${host}:${port}`].state === ClientState.AVAILABLE) {\r\n                // Update connection counter.\r\n                this.connections -= 1;\r\n            }\r\n            // Set client state to unavailable.\r\n            this.clients[`${host}:${port}`].state = ClientState.UNAVAILABLE;\r\n            // update the cluster status.\r\n            updateClusterStatus();\r\n        };\r\n        // Set up handlers for connection and disconnection.\r\n        client.connection.on('connect', onConnect.bind(this));\r\n        client.connection.on('disconnect', onDisconnect.bind(this));\r\n        // Connect if auto-connect is set to true, returning the connection result.\r\n        if (autoConnect) {\r\n            // Set up the connection.\r\n            await client.connect();\r\n        }\r\n    }\r\n    /**\r\n     * Calls a method on the remote server with the supplied parameters.\r\n     *\r\n     * @param {string}    method       name of the method to call.\r\n     * @param {...string} parameters   one or more parameters for the method.\r\n     *\r\n     * @throws {Error} if not enough clients are connected\r\n     * @throws {Error} if no response is received with sufficient integrity\r\n     * @returns a promise that resolves with the result of the method.\r\n     */\r\n    async request(method, ...parameters) {\r\n        // Check if the cluster is unable to serve requests.\r\n        if (this.status === ClusterStatus.DISABLED) {\r\n            throw (new Error(`Cannot request '${method}' when available clients (${this.connections}) is less than required confidence (${this.strategy.confidence}).`));\r\n        }\r\n        // Lock this request method temporarily.\r\n        const unlock = await this.requestLock.acquire();\r\n        // Declare requestId outside of try-catch scope.\r\n        let requestId = 0;\r\n        // NOTE: If this async method is called very rapidly, it's theoretically possible that the parts below could interfere.\r\n        try {\r\n            // Increase the current request counter.\r\n            this.requestCounter += 1;\r\n            // Copy the request counter so we can work with the copy and know it won't change\r\n            // even if the request counter is raised from concurrent requests.\r\n            requestId = this.requestCounter;\r\n        }\r\n        finally {\r\n            // Unlock this request method now that the concurrency sensitive condition is completed.\r\n            unlock();\r\n        }\r\n        // Initialize an empty list of request promises.\r\n        this.requestPromises[requestId] = [];\r\n        // Extract all available client IDs\r\n        const availableClientIDs = Object.keys(this.clients)\r\n            .filter((clientID) => this.clients[clientID].state === ClientState.AVAILABLE);\r\n        // Initialize a sent counter.\r\n        let sentCounter = 0;\r\n        // Determine the number of clients we need to send to, taking ClusterDistribution.ALL (=0) into account.\r\n        let requiredDistribution = (this.strategy.distribution || availableClientIDs.length);\r\n        // If the cluster is in degraded status, we do not have enough available clients to\r\n        // match distribution, but still enough to reach consensus, so we use the clients we have.\r\n        if (this.status === ClusterStatus.DEGRADED) {\r\n            requiredDistribution = availableClientIDs.length;\r\n        }\r\n        // Repeat until we have sent the request to the desired number of clients.\r\n        while (sentCounter < requiredDistribution) {\r\n            // Pick an array index according to our ordering strategy.\r\n            let currentIndex = 0;\r\n            // Use a random array index when cluster order is set to RANDOM\r\n            if (this.strategy.order === ClusterOrder.RANDOM) {\r\n                currentIndex = Math.floor(Math.random() * availableClientIDs.length);\r\n            }\r\n            // Move a client identity from the client list to its own variable.\r\n            const [currentClient] = availableClientIDs.splice(currentIndex, 1);\r\n            // Send the request to the client and store the request promise.\r\n            const requestPromise = this.clients[currentClient].connection.request(method, ...parameters);\r\n            this.requestPromises[requestId].push(requestPromise);\r\n            // Increase the sent counter.\r\n            sentCounter += 1;\r\n        }\r\n        // Define a function to poll for request responses.\r\n        const pollResponse = (resolve, reject) => {\r\n            // Define a function to resolve request responses based on integrity.\r\n            const resolveRequest = async () => {\r\n                // Set up an empty set of response data.\r\n                const responseData = {};\r\n                // Set up a counter to keep track of how many responses we have checked.\r\n                let checkedResponses = 0;\r\n                // For each server we issued a request to..\r\n                for (const currentPromise in this.requestPromises[requestId]) {\r\n                    // Race the request promise against a pre-resolved request to determine promise status.\r\n                    const promises = [this.requestPromises[requestId][currentPromise], Promise.resolve(undefined)];\r\n                    const response = await Promise.race(promises);\r\n                    // If the promise is settled..\r\n                    if (response !== undefined) {\r\n                        // Calculate a unique identifier for this notification data.\r\n                        const responseDataIdentifier = this.useLosslessJsonParser ? stringify(response) : JSON.stringify(response);\r\n                        // Increase the counter for checked responses.\r\n                        checkedResponses += 1;\r\n                        // Either set the response data counter or increase it.\r\n                        if (responseData[responseDataIdentifier] === undefined) {\r\n                            responseData[responseDataIdentifier] = 1;\r\n                        }\r\n                        else {\r\n                            responseData[responseDataIdentifier] += 1;\r\n                        }\r\n                        // Check if this response has enough integrity according to our confidence strategy.\r\n                        if (responseData[responseDataIdentifier] === this.strategy.confidence) {\r\n                            // Write log entry.\r\n                            debug.cluster(`Validated response for '${method}' with sufficient integrity (${this.strategy.confidence}).`);\r\n                            // Resolve the request with this response.\r\n                            resolve(response);\r\n                            // Return after resolving since we do not want to continue the execution.\r\n                            return;\r\n                        }\r\n                    }\r\n                }\r\n                // If all clients have responded but we failed to reach desired integrity..\r\n                if (checkedResponses === this.requestPromises[requestId].length) {\r\n                    // Reject this request with an error message.\r\n                    reject(new Error(`Unable to complete request for '${method}', response failed to reach sufficient integrity (${this.strategy.confidence}).`));\r\n                    // Return after rejecting since we do not want to continue the execution.\r\n                    return;\r\n                }\r\n                // If we are not ready, but have not timed out and should wait more..\r\n                setTimeout(resolveRequest, 1000);\r\n            };\r\n            // Attempt the initial resolution of the request.\r\n            resolveRequest();\r\n        };\r\n        // return some kind of promise that resolves when integrity number of clients results match.\r\n        return new Promise(pollResponse);\r\n    }\r\n    /**\r\n     * Subscribes to the method at the cluster and attaches the callback function to the event feed.\r\n     *\r\n     * @param {function}  callback     a function that should get notification messages.\r\n     * @param {string}    method       one of the subscribable methods the server supports.\r\n     * @param {...string} parameters   one or more parameters for the method.\r\n     *\r\n     * @throws {Error} if not enough clients are connected\r\n     * @throws {Error} if no response is received with sufficient integrity for the initial request\r\n     * @returns a promise resolving to true when the subscription is set up.\r\n     */\r\n    async subscribe(callback, method, ...parameters) {\r\n        // Define a function resolve the subscription setup process.\r\n        const subscriptionResolver = async (resolve) => {\r\n            // Define a callback function to validate server notifications and pass\r\n            // them to the subscribe callback.\r\n            const subscriptionResponder = async (data) => {\r\n                // Lock this response method temporarily.\r\n                const unlock = await this.responseLock.acquire();\r\n                try {\r\n                    // Calculate a unique identifier for this notification data.\r\n                    const responseDataIdentifier = JSON.stringify(data);\r\n                    // Either set the notification counter or increase it.\r\n                    if (this.notifications[responseDataIdentifier] === undefined) {\r\n                        this.notifications[responseDataIdentifier] = 1;\r\n                    }\r\n                    else {\r\n                        this.notifications[responseDataIdentifier] += 1;\r\n                    }\r\n                    // Check if this notification has enough integrity according to our confidence strategy.\r\n                    if (this.notifications[responseDataIdentifier] === this.strategy.confidence) {\r\n                        // Write log entry.\r\n                        debug.cluster(`Validated notification for '${method}' with sufficient integrity (${this.strategy.confidence}).`);\r\n                        // Send the notification data to the callback function.\r\n                        callback(data);\r\n                    }\r\n                }\r\n                finally {\r\n                    // Unlock the response method so it can handle the next set of data.\r\n                    unlock();\r\n                }\r\n            };\r\n            // Set up event listener for this subscription.\r\n            for (const currentClient in this.clients) {\r\n                // Copy the current client for brevity.\r\n                const client = this.clients[currentClient].connection;\r\n                // If this method is not yet being listened on..\r\n                if (!client.listeners(method).includes(subscriptionResponder)) {\r\n                    // Set up event listener for this subscription.\r\n                    client.addListener(method, subscriptionResponder);\r\n                }\r\n                // If this method has never been subscribed to before..\r\n                if (!client.subscriptionMethods[method]) {\r\n                    // Initialize an empty subscription payload list for this method.\r\n                    client.subscriptionMethods[method] = [];\r\n                }\r\n                // Store the subscription parameters to track what data we have subscribed to.\r\n                client.subscriptionMethods[method].push(JSON.stringify(parameters));\r\n                // Get the currently subscribed payloads for this callback, or an empty array if none exist.\r\n                const subscriptionCallbackPayloads = client.subscriptionCallbacks.get(callback) || [];\r\n                // Update the subscription parameters to track what data this callback is listening on.\r\n                subscriptionCallbackPayloads.push({ method, payload: JSON.stringify(parameters) });\r\n                // Store the subscription parameters.\r\n                client.subscriptionCallbacks.set(callback, subscriptionCallbackPayloads);\r\n            }\r\n            // Send initial subscription request.\r\n            const requestData = await this.request(method, ...parameters);\r\n            // Manually send the initial request data to the callback.\r\n            callback(requestData);\r\n            // Resolve the subscription promise.\r\n            resolve(true);\r\n        };\r\n        // Return a promise that resolves when the subscription is set up.\r\n        return new Promise(subscriptionResolver);\r\n    }\r\n    /**\r\n     * Unsubscribes to the method at the cluster and removes any callback functions\r\n     * when there are no more subscriptions for the method.\r\n     *\r\n     * @param {function}  callback     a function that has previously been subscribed for this method.\r\n     * @param {string}    method       one of the subscribable methods the server supports.\r\n     * @param {...string} parameters   one or more parameters for the method.\r\n     *\r\n     * @throws {Error} if, for any of the clients, no subscriptions exist for the combination of the\r\n     * passed `callback`, `method` and `parameters.\r\n     * @returns a promise resolving to true when the subscription has been cancelled.\r\n     */\r\n    async unsubscribe(callback, method, ...parameters) {\r\n        // Define a function resolve the subscription setup process.\r\n        const subscriptionResolver = async (resolve) => {\r\n            // For each client..\r\n            for (const currentClient in this.clients) {\r\n                // Store client in variable for brevity\r\n                const client = this.clients[currentClient].connection;\r\n                // Log a warning if one of the clients is disconnected, but don't throw an error\r\n                if (client.connection.status !== ConnectionStatus.CONNECTED) {\r\n                    debug.warning(`Client with server ${client.connection.host} could not be reached to unsubscribe`);\r\n                    continue;\r\n                }\r\n                // unsubscribe this client.\r\n                client.unsubscribe(callback, method, ...parameters);\r\n            }\r\n            // Resolve the subscription promise.\r\n            resolve(true);\r\n        };\r\n        // Return a promise that resolves when the subscription is set up.\r\n        return new Promise(subscriptionResolver);\r\n    }\r\n    /**\r\n     * Provides a method to check or wait for the cluster to become ready.\r\n     *\r\n     * @returns a promise that resolves when the required servers are available.\r\n     */\r\n    async ready() {\r\n        // Store the current timestamp.\r\n        const readyTimestamp = Date.now();\r\n        // Define a function to poll for availability of the cluster.\r\n        const availabilityPoller = (resolve) => {\r\n            // Define a function to check if the cluster is ready to be used.\r\n            const connectionAvailabilityVerifier = () => {\r\n                // Check if the cluster is active..\r\n                if (this.status === ClusterStatus.READY) {\r\n                    // Resolve with true to indicate that the cluster is ready to use.\r\n                    resolve(true);\r\n                    // Return after resolving since we do not want to continue the execution.\r\n                    return;\r\n                }\r\n                // Calculate how long we have waited, in milliseconds.\r\n                const timeWaited = (Date.now() - readyTimestamp);\r\n                // Check if we have waited longer than our timeout setting.\r\n                if (timeWaited > this.timeout) {\r\n                    // Resolve with false to indicate that we did not get ready in time.\r\n                    resolve(false);\r\n                    // Return after resolving since we do not want to continue the execution.\r\n                    return;\r\n                }\r\n                // If we are not ready, but have not timed out and should wait more..\r\n                setTimeout(connectionAvailabilityVerifier, 50);\r\n            };\r\n            // Run the initial verification.\r\n            connectionAvailabilityVerifier();\r\n        };\r\n        // Return a promise that resolves when the available clients is sufficient.\r\n        return new Promise(availabilityPoller);\r\n    }\r\n    /**\r\n     * Connects all servers from the cluster and attaches event listeners and handlers\r\n     * for all underlying clients and connections.\r\n     *\r\n     * @throws {Error} if the cluster's version is not a valid version string.\r\n     */\r\n    async startup() {\r\n        // Write a log message.\r\n        debug.cluster('Starting up cluster.');\r\n        // Keep track of all connections\r\n        const connections = [];\r\n        // Loop over all clients and reconnect them if they're disconnected\r\n        for (const clientKey in this.clients) {\r\n            // Retrieve connection information for the client\r\n            const { host, port, scheme } = this.clients[clientKey].connection.connection;\r\n            // Only connect currently unavailable/disconnected clients\r\n            if (this.clients[clientKey].state === ClientState.AVAILABLE) {\r\n                // Warn when a server is already connected when calling startup()\r\n                debug.warning(`Called startup(), but server ${host}:${port} is already connected`);\r\n            }\r\n            else {\r\n                // Call the addServer() function with the existing connection data\r\n                // This effectively reconnects the server and re-instates all event listeners\r\n                connections.push(this.addServer(host, port, scheme));\r\n            }\r\n        }\r\n        // Await all connections\r\n        return Promise.all(connections);\r\n    }\r\n    /**\r\n     * Disconnects all servers from the cluster. Removes all event listeners and\r\n     * handlers from all underlying clients and connections. This includes all\r\n     * active subscriptions, unless retainSubscriptions is set to true.\r\n     *\r\n     * @param {boolean} retainSubscriptions   retain subscription data so they will be restored on reconnection.\r\n     *\r\n     * @returns a list with the disconnection result for every client\r\n     */\r\n    async shutdown(retainSubscriptions = false) {\r\n        // Write a log message.\r\n        debug.cluster('Shutting down cluster.');\r\n        // Set up a list of disconnections to wait for.\r\n        const disconnections = [];\r\n        const disconnectResolver = (resolve) => {\r\n            // Resolve once the cluster is marked as disabled\r\n            this.once('disabled', () => resolve(Promise.all(disconnections)));\r\n            // For each client in this cluster..\r\n            for (const clientIndex in this.clients) {\r\n                // Force disconnection regardless of current status.\r\n                disconnections.push(this.clients[clientIndex].connection.disconnect(true, retainSubscriptions));\r\n            }\r\n        };\r\n        // Return a list of booleans indicating disconnections from all clients\r\n        return new Promise(disconnectResolver);\r\n    }\r\n}\n\nexport { ClientState, ClusterDistribution, ClusterOrder, ClusterStatus, ConnectionStatus, DefaultParameters, ElectrumClient, ElectrumCluster, ElectrumTransport, isVersionNegotiated, isVersionRejected };\n","// https://github.com/maxogden/websocket-stream/blob/48dc3ddf943e5ada668c31ccd94e9186f02fafbd/ws-fallback.js\n\nvar ws = null\n\nif (typeof WebSocket !== 'undefined') {\n  ws = WebSocket\n} else if (typeof MozWebSocket !== 'undefined') {\n  ws = MozWebSocket\n} else if (typeof global !== 'undefined') {\n  ws = global.WebSocket || global.MozWebSocket\n} else if (typeof window !== 'undefined') {\n  ws = window.WebSocket || window.MozWebSocket\n} else if (typeof self !== 'undefined') {\n  ws = self.WebSocket || self.MozWebSocket\n}\n\nexport default ws\n","import $hgUW1$isomorphicws from \"isomorphic-ws\";\n\n\nclass $1dee54fbcb867378$export$2e2bcd8739ae039 {\n    static{\n        this.encoder = new TextEncoder();\n    }\n    static{\n        this.decoder = new TextDecoder();\n    }\n    static generateSecret() {\n        let array = new Uint8Array(16);\n        crypto.getRandomValues(array);\n        return Array.from(array).map((b)=>b.toString(16).padStart(2, '0')).join('');\n    }\n    static async encrypt(message, secret) {\n        let salt = crypto.getRandomValues(new Uint8Array(16));\n        let iv = crypto.getRandomValues(new Uint8Array(12));\n        let key = await this.deriveKey(secret, salt);\n        let encodedMessage = this.encoder.encode(message);\n        let ciphertext = await crypto.subtle.encrypt({\n            name: 'AES-GCM',\n            iv: iv\n        }, key, encodedMessage);\n        let combined = this.concatBuffers([\n            salt,\n            iv,\n            new Uint8Array(ciphertext)\n        ]);\n        return this.base64Encode(combined);\n    }\n    static async decrypt(encMessage, secret) {\n        let data = this.base64Decode(encMessage);\n        let salt = data.slice(0, 16);\n        let iv = data.slice(16, 28);\n        let ciphertext = data.slice(28);\n        let key = await this.deriveKey(secret, salt);\n        let decrypted = await crypto.subtle.decrypt({\n            name: 'AES-GCM',\n            iv: iv\n        }, key, ciphertext);\n        return this.decoder.decode(decrypted);\n    }\n    static async deriveKey(secret, salt) {\n        let encodedSecret = this.encoder.encode(secret);\n        let baseKey = await crypto.subtle.importKey('raw', encodedSecret, 'PBKDF2', false, [\n            'deriveKey'\n        ]);\n        return crypto.subtle.deriveKey({\n            name: 'PBKDF2',\n            salt: salt,\n            iterations: 100000,\n            hash: 'SHA-256'\n        }, baseKey, {\n            name: 'AES-GCM',\n            length: 256\n        }, false, [\n            'encrypt',\n            'decrypt'\n        ]);\n    }\n    static concatBuffers(buffers) {\n        let totalLength = buffers.reduce((sum, b)=>sum + b.length, 0);\n        let result = new Uint8Array(totalLength);\n        let offset = 0;\n        for (let b of buffers){\n            result.set(b, offset);\n            offset += b.length;\n        }\n        return result;\n    }\n    static base64Encode(data) {\n        return btoa(String.fromCharCode(...data));\n    }\n    static base64Decode(b64) {\n        let binary = atob(b64);\n        let len = binary.length;\n        let bytes = new Uint8Array(len);\n        for(let i = 0; i < len; i++)bytes[i] = binary.charCodeAt(i);\n        return bytes;\n    }\n}\n\n\nvar $abb7f0d6cff128a3$export$4baa4fd50b453ebf = /*#__PURE__*/ function(JsonRpcErrorCode) {\n    // Standard JSON-RPC error codes\n    JsonRpcErrorCode[JsonRpcErrorCode[\"ParseError\"] = -32700] = \"ParseError\";\n    JsonRpcErrorCode[JsonRpcErrorCode[\"InvalidRequest\"] = -32600] = \"InvalidRequest\";\n    JsonRpcErrorCode[JsonRpcErrorCode[\"MethodNotFound\"] = -32601] = \"MethodNotFound\";\n    JsonRpcErrorCode[JsonRpcErrorCode[\"InvalidParams\"] = -32602] = \"InvalidParams\";\n    JsonRpcErrorCode[JsonRpcErrorCode[\"InternalError\"] = -32603] = \"InternalError\";\n    // Custom error codes\n    JsonRpcErrorCode[JsonRpcErrorCode[\"RequestFailed\"] = -32000] = \"RequestFailed\";\n    JsonRpcErrorCode[JsonRpcErrorCode[\"RequestCancelled\"] = -32001] = \"RequestCancelled\";\n    JsonRpcErrorCode[JsonRpcErrorCode[\"RequestRejected\"] = -32003] = \"RequestRejected\";\n    JsonRpcErrorCode[JsonRpcErrorCode[\"SessionNotFound\"] = -32004] = \"SessionNotFound\";\n    JsonRpcErrorCode[JsonRpcErrorCode[\"RequestTimeout\"] = -32008] = \"RequestTimeout\";\n    JsonRpcErrorCode[JsonRpcErrorCode[\"SessionConflict\"] = -32009] = \"SessionConflict\";\n    JsonRpcErrorCode[JsonRpcErrorCode[\"ConnectionClosed\"] = -32010] = \"ConnectionClosed\";\n    JsonRpcErrorCode[JsonRpcErrorCode[\"InvalidResponse\"] = -32052] = \"InvalidResponse\";\n    return JsonRpcErrorCode;\n}({});\nclass $abb7f0d6cff128a3$export$67bbc29c133d62a1 extends Error {\n    constructor(code, message){\n        super(message), this.code = code;\n        this.name = \"JsonRpcError\";\n    }\n}\n\n\nclass $770bd20b531dfe71$export$2e2bcd8739ae039 {\n    constructor(url, secret){\n        this.url = url;\n        this.secret = secret;\n        this.pending = new Map();\n        this.handlers = new Map();\n        this.nextId = 1;\n        this.pingInterval = 15000;\n    }\n    initializeWebSocket() {\n        this.ws = new (0, $hgUW1$isomorphicws)(this.url);\n        this.ws.onmessage = async (event)=>{\n            let msg;\n            try {\n                msg = await (0, $1dee54fbcb867378$export$2e2bcd8739ae039).decrypt(event.data, this.secret);\n            } catch  {\n                // If decrypt fails, assume it's unencrypted JSON (i.e., relay message)\n                msg = event.data;\n            }\n            this.handleMessage(msg);\n        };\n        this.ws.onclose = ()=>{\n            this.clearKeepAliveTimer();\n            for (let [, { reject: reject }] of this.pending.entries())reject(new (0, $abb7f0d6cff128a3$export$67bbc29c133d62a1)((0, $abb7f0d6cff128a3$export$4baa4fd50b453ebf).ConnectionClosed, 'Connection closed.'));\n            this.pending.clear();\n            if (this.onCloseHandler) this.onCloseHandler();\n        };\n        this.ws.onerror = ()=>{\n            this.ws.close();\n        };\n    }\n    async connect(timeout) {\n        this.initializeWebSocket();\n        if (this.ws.readyState !== (0, $hgUW1$isomorphicws).OPEN) await new Promise((resolve, reject)=>{\n            const timeoutId = setTimeout(()=>{\n                this.ws.onopen = null;\n                this.ws.onerror = null;\n                if (this.ws.readyState !== (0, $hgUW1$isomorphicws).CLOSED) this.ws.close();\n                reject(new (0, $abb7f0d6cff128a3$export$67bbc29c133d62a1)((0, $abb7f0d6cff128a3$export$4baa4fd50b453ebf).RequestTimeout, `Connection timeout.`));\n            }, timeout);\n            const originalOnError = this.ws.onerror;\n            this.ws.onopen = ()=>{\n                clearTimeout(timeoutId);\n                this.ws.onerror = originalOnError;\n                resolve();\n            };\n            this.ws.onerror = ()=>{\n                clearTimeout(timeoutId);\n                this.ws.onerror = originalOnError;\n                reject(new (0, $abb7f0d6cff128a3$export$67bbc29c133d62a1)((0, $abb7f0d6cff128a3$export$4baa4fd50b453ebf).RequestFailed, 'Connection failed.'));\n            };\n        });\n    }\n    disconnect() {\n        this.clearKeepAliveTimer();\n        if (this.ws && this.ws.readyState === (0, $hgUW1$isomorphicws).OPEN) this.ws.close();\n    }\n    onClose(handler) {\n        this.onCloseHandler = handler;\n    }\n    setupKeepAliveTimer() {\n        if (this.keepAliveTimer) return;\n        this.keepAliveTimer = setTimeout(()=>{\n            this.send(JSON.stringify({\n                jsonrpc: '2.0',\n                id: \"keepAlive\",\n                method: 'wl_ping'\n            }));\n        }, this.pingInterval);\n    }\n    clearKeepAliveTimer() {\n        if (this.keepAliveTimer) {\n            clearTimeout(this.keepAliveTimer);\n            this.keepAliveTimer = undefined;\n        }\n    }\n    send(data) {\n        this.clearKeepAliveTimer();\n        if (this.ws.readyState !== (0, $hgUW1$isomorphicws).OPEN) throw new (0, $abb7f0d6cff128a3$export$67bbc29c133d62a1)((0, $abb7f0d6cff128a3$export$4baa4fd50b453ebf).ConnectionClosed, 'Connection closed.');\n        this.setupKeepAliveTimer();\n        this.ws.send(data);\n    }\n    async request(method, params, options) {\n        let id = (this.nextId++).toString();\n        let payload = {\n            jsonrpc: '2.0',\n            id: id,\n            method: method,\n            params: params\n        };\n        let raw = JSON.stringify(payload);\n        let msg = options?.encrypted === false ? raw : await (0, $1dee54fbcb867378$export$2e2bcd8739ae039).encrypt(raw, this.secret);\n        this.send(msg);\n        return new Promise((resolve, reject)=>{\n            const cleanUp = ()=>{\n                clearTimeout(timeoutId);\n                options.signal?.removeEventListener('abort', onAbort);\n                this.pending.delete(id);\n            };\n            const onAbort = ()=>{\n                cleanUp();\n                reject(new (0, $abb7f0d6cff128a3$export$67bbc29c133d62a1)((0, $abb7f0d6cff128a3$export$4baa4fd50b453ebf).RequestCancelled, 'Request was cancelled.'));\n            };\n            const timeoutId = setTimeout(()=>{\n                cleanUp();\n                reject(new (0, $abb7f0d6cff128a3$export$67bbc29c133d62a1)((0, $abb7f0d6cff128a3$export$4baa4fd50b453ebf).RequestTimeout, 'Request timeout.'));\n            }, options.timeout);\n            // If already aborted, cancel immediately\n            if (options?.signal?.aborted) {\n                onAbort();\n                return;\n            }\n            options.signal?.addEventListener('abort', onAbort);\n            this.pending.set(id, {\n                resolve: (result)=>{\n                    cleanUp();\n                    resolve(result);\n                },\n                reject: (err)=>{\n                    cleanUp();\n                    reject(err);\n                }\n            });\n        });\n    }\n    async notify(method, params) {\n        let payload = {\n            jsonrpc: '2.0',\n            method: method,\n            params: params\n        };\n        let encrypted = await (0, $1dee54fbcb867378$export$2e2bcd8739ae039).encrypt(JSON.stringify(payload), this.secret);\n        this.send(encrypted);\n    }\n    on(method, handler) {\n        this.handlers.set(method, handler);\n    }\n    off(method) {\n        this.handlers.delete(method);\n    }\n    async handleMessage(raw) {\n        let msg = JSON.parse(raw);\n        if (this.isJsonRpcResponse(msg)) {\n            let cb = this.pending.get(msg.id);\n            if (cb) {\n                this.pending.delete(msg.id);\n                if (msg.error) cb.reject(new (0, $abb7f0d6cff128a3$export$67bbc29c133d62a1)(msg.error.code, msg.error.message));\n                else cb.resolve(msg.result);\n            }\n        } else if (this.isJsonRpcRequest(msg) || this.isJsonRpcNotification(msg)) {\n            let handler = this.handlers.get(msg.method);\n            if (handler) {\n                let { result: result, error: error } = await this.processMessage(msg, handler);\n                if (!this.isJsonRpcRequest(msg)) return; // Notifications do not require a response\n                if (!result && !error) error = {\n                    code: (0, $abb7f0d6cff128a3$export$4baa4fd50b453ebf).InvalidResponse,\n                    message: \"Handler returned neither result nor error\"\n                };\n                let response = {\n                    jsonrpc: '2.0',\n                    id: msg.id,\n                    result: result,\n                    error: error\n                };\n                let encrypted = await (0, $1dee54fbcb867378$export$2e2bcd8739ae039).encrypt(JSON.stringify(response), this.secret);\n                this.send(encrypted);\n            }\n        }\n    }\n    async processMessage(msg, handler) {\n        let result, error;\n        try {\n            if (Array.isArray(msg.params)) result = await handler(...msg.params);\n            else if (msg.params && typeof msg.params === 'object') result = await handler(msg.params);\n            else result = await handler(); // handles undefined/null\n            if (this.isJsonRpcErrorData(result)) {\n                error = {\n                    code: result.code,\n                    message: result.message\n                };\n                result = undefined;\n            }\n        } catch (err) {\n            if (this.isJsonRpcErrorData(err)) error = {\n                code: err.code,\n                message: err.message\n            };\n            else error = {\n                code: (0, $abb7f0d6cff128a3$export$4baa4fd50b453ebf).RequestFailed,\n                message: `Request failed. ${err instanceof Error ? err.message : ''}`\n            };\n        }\n        return {\n            result: result,\n            error: error\n        };\n    }\n    isJsonRpcResponse(msg) {\n        return typeof msg === 'object' && msg !== null && 'jsonrpc' in msg && msg.jsonrpc === '2.0' && 'id' in msg && ('result' in msg || 'error' in msg);\n    }\n    isJsonRpcRequest(msg) {\n        return typeof msg === 'object' && msg !== null && 'jsonrpc' in msg && msg.jsonrpc === '2.0' && 'id' in msg && 'method' in msg;\n    }\n    isJsonRpcNotification(msg) {\n        return typeof msg === 'object' && msg !== null && 'jsonrpc' in msg && msg.jsonrpc === '2.0' && 'method' in msg && !('id' in msg);\n    }\n    isJsonRpcErrorData(data) {\n        return typeof data === 'object' && data !== null && 'code' in data && typeof data.code === 'number' && 'message' in data && typeof data.message === 'string';\n    }\n}\n\n\nclass $69598d18f252c5a5$export$2e2bcd8739ae039 {\n    /**\r\n   * Creates an instance of PeerProvider.\r\n   * \r\n   * @param version - The protocol version.\r\n   * @param relayUrl - The URL of the relay server.\r\n   * @param secret - The shared secret for encryption.\r\n   * @param sessionId - The session ID. Defaults to an empty string.\r\n   */ constructor(version, relayUrl, secret, sessionId = \"\"){\n        this.version = version;\n        this.relayUrl = relayUrl;\n        this.secret = secret;\n        this.sessionId = sessionId;\n        this.client = new (0, $770bd20b531dfe71$export$2e2bcd8739ae039)(this.relayUrl, this.secret);\n    }\n    getSessionInfo() {\n        return {\n            version: this.version,\n            relayUrl: this.relayUrl,\n            sessionId: this.sessionId,\n            secret: this.secret\n        };\n    }\n    /**\r\n   * Connects to the relay server.\r\n   * \r\n   * @param timeoutMs - The connection timeout in milliseconds. Default is 10,000ms.\r\n   * @returns A promise that resolves when the connection is established.\r\n   */ async connect(timeoutMs = 10000) {\n        return this.client.connect(timeoutMs);\n    }\n    disconnect() {\n        this.client.disconnect();\n    }\n    /**\r\n   * Sends a JSON-RPC request to the peer.\r\n   * \r\n   * @param method - The RPC method name.\r\n   * @param params - The RPC method parameters.\r\n   * @param options - The request options, including timeout. Default timeout is 30,000ms.\r\n   * @returns A promise that resolves with the result of the RPC method.\r\n   */ async sendRequest(method, params, options = {\n        timeout: 30000\n    }) {\n        return this.client.request(method, params, options);\n    }\n    /**\r\n   * Sends a JSON-RPC notification to the peer.\r\n   * \r\n   * @param method - The RPC method name.\r\n   * @param params - The RPC method parameters.\r\n   */ async sendNotification(method, params) {\n        await this.client.notify(method, params);\n    }\n    /**\r\n   * Registers a handler for a specific RPC method.\r\n   * \r\n   * @param method - The RPC method name.\r\n   * @param handler - The function to handle the RPC request.\r\n   */ on(method, handler) {\n        this.client.on(method, handler);\n    }\n    /**\r\n   * Removes a handler for a specific RPC method.\r\n   * \r\n   * @param method - The RPC method name.\r\n   */ off(method) {\n        this.client.off(method);\n    }\n    /**\r\n   * Registers a handler for when the peer disconnects from the session.\r\n   * \r\n   * @param handler - The function to handle the peer disconnection.\r\n   */ onPeerDisconnect(handler) {\n        this.on('wl_sessionLeft', handler);\n    }\n    /**\r\n   * Registers a handler for when the WebSocket connection is closed.\r\n   * \r\n   * @param handler - The function to handle the connection close event.\r\n   */ onClose(handler) {\n        this.client.onClose(handler);\n    }\n}\n\n\nclass $fe6ed033804c8bce$export$2e2bcd8739ae039 extends (0, $69598d18f252c5a5$export$2e2bcd8739ae039) {\n    /**\r\n   * Creates an instance of DAppProvider.\r\n   * \r\n   * @param pairingURI - The dApp pairing URI, usually scanned from a QR code.\r\n   */ constructor(pairingURI){\n        let { version: version, relayUrl: relayUrl, secret: secret, sessionId: sessionId } = $fe6ed033804c8bce$export$2e2bcd8739ae039.parsePairingURI(pairingURI);\n        super(version, relayUrl, secret, sessionId);\n    }\n    /**\r\n   * Parses a pairing URI to extract session details.\r\n   * \r\n   * @param uri - The pairing URI.\r\n   * @returns The session details.\r\n   * @throws If the URI is invalid.\r\n   * @internal\r\n   */ static parsePairingURI(uri) {\n        if (!uri.startsWith(\"wl:\")) throw new Error(\"Invalid pairing uri prefix\");\n        const uriBody = uri.substring(3);\n        const atIndex = uriBody.indexOf('@');\n        if (atIndex < 0) throw new Error(\"Invalid pairing uri: missing version\");\n        const version = uriBody.substring(0, atIndex);\n        const relayPart = uriBody.substring(atIndex + 1);\n        const url = new URL(relayPart);\n        const sessionId = url.searchParams.get(\"session\");\n        const secret = url.searchParams.get(\"secret\");\n        if (!sessionId || !secret) throw new Error(\"Missing session or secret\");\n        return {\n            version: version,\n            relayUrl: url.origin + url.pathname,\n            secret: secret,\n            sessionId: sessionId\n        };\n    }\n    /**\r\n   * Connects to the relay server and retrieves the dApp info from the wallet.\r\n   * \r\n   * @param timeoutMs - The connection timeout in milliseconds. Default 10_000ms\r\n   * @returns A promise that resolves with the dApp information.\r\n   * @throws If the connection fails or no app info is received.\r\n   */ async connect(timeoutMs = 10000) {\n        try {\n            await super.connect(timeoutMs);\n            let appInfo = await this.sendRequest(\"wl_getAppInfo\", [\n                this.sessionId\n            ], {\n                encrypted: false,\n                timeout: timeoutMs\n            });\n            if (!appInfo) throw new Error(\"No app info received\");\n            return appInfo;\n        } catch (e) {\n            super.disconnect();\n            throw e;\n        }\n    }\n    /**\r\n   * Notifies the dApp that the wallet has joined the session.\r\n   * \r\n   * @param walletAddress - The address of the wallet joining the session.\r\n   * @param timeoutMs - The request timeout in milliseconds. Default 10_000ms\r\n   * @returns A promise that resolves to true if the notification was sent successfully.\r\n   * @throws If the operation fails.\r\n   */ async joinSession(walletAddress, timeoutMs = 10000) {\n        // Notify the relay (unencrypted)\n        let success = await this.sendRequest(\"wl_joinSession\", [\n            this.sessionId\n        ], {\n            encrypted: false,\n            timeout: timeoutMs\n        });\n        if (!success) throw new Error(\"Failed to join session\");\n        // Notify the dApp (encrypted)\n        await this.sendNotification(\"wl_sessionJoined\", [\n            walletAddress\n        ]);\n        return success;\n    }\n    /**\r\n   * Registers a handler for the \"wallet_signMessage\" request from the dApp.\r\n   * \r\n   * @param handler - The function to handle the sign message request.\r\n   */ onSignMessage(handler) {\n        this.on(\"wallet_signMessage\", handler);\n    }\n    /**\r\n   * Registers a handler for the \"wallet_getAccount\" request from the dApp.\r\n   * \r\n   * @param handler - The function to handle the get account request.\r\n   */ onGetAccount(handler) {\n        this.on(\"wallet_getAccount\", handler);\n    }\n    /**\r\n   * Registers a handler for the \"wallet_addToken\" request from the dApp.\r\n   * \r\n   * @param handler - The function to handle the add token request.\r\n   */ onAddToken(handler) {\n        this.on(\"wallet_addToken\", handler);\n    }\n    /**\r\n   * Registers a handler for the \"wallet_signTransaction\" request from the dApp.\r\n   * \r\n   * @param handler - The function to handle the sign transaction request.\r\n   */ onSignTransaction(handler) {\n        this.on(\"wallet_signTransaction\", handler);\n    }\n    /**\r\n   * Registers a handler for the \"wallet_sendTransaction\" request from the dApp.\r\n   * \r\n   * @param handler - The function to handle the send transaction request.\r\n   */ onSendTransaction(handler) {\n        this.on(\"wallet_sendTransaction\", handler);\n    }\n    /**\r\n   * Registers a handler for the \"wallet_switchNetwork\" request from the dApp.\r\n   * \r\n   * @param handler - The function to handle the switch network request.\r\n   */ onSwitchNetwork(handler) {\n        this.on(\"wallet_switchNetwork\", handler);\n    }\n}\n\n\n\n\nclass $ff9d81fc068ff3b6$export$2e2bcd8739ae039 extends (0, $69598d18f252c5a5$export$2e2bcd8739ae039) {\n    /**\r\n   * Creates an instance of WalletProvider.\r\n   * \r\n   * @param relayUrl - The URL of the relay server.\r\n   * @param appInfo - Information about the dApp.\r\n   * @param version - The protocol version. Default is \"1\".\r\n   */ constructor(relayUrl, appInfo, version = \"1\"){\n        super(version, relayUrl, (0, $1dee54fbcb867378$export$2e2bcd8739ae039).generateSecret()), this.appInfo = appInfo;\n    }\n    /**\r\n   * Connects to the relay server and creates a new session.\r\n   * \r\n   * @param timeoutMs - The connection timeout in milliseconds. Default is 10,000ms.\r\n   * @returns A promise that resolves when the connection is established and the session is created.\r\n   * @throws If the connection or session creation fails.\r\n   */ async connect(timeoutMs = 10000) {\n        try {\n            await super.connect(timeoutMs);\n            let sessionId = await this.sendRequest('wl_createSession', [\n                this.appInfo\n            ], {\n                encrypted: false,\n                timeout: timeoutMs\n            });\n            if (typeof sessionId !== 'string') throw new Error('Invalid session ID received from relay');\n            this.sessionId = sessionId;\n        } catch (e) {\n            super.disconnect();\n            throw e;\n        }\n    }\n    /**\r\n   * Disconnects from the relay server and cancels any pending wallet connection waits.\r\n   */ disconnect() {\n        this.cancelWaitForWallet();\n        super.disconnect();\n    }\n    /**\r\n   * Gets the pairing URI for the current session.\r\n   * \r\n   * This URI should be displayed as a QR code for the wallet to scan.\r\n   * \r\n   * @returns The pairing URI.\r\n   */ getPairingURI() {\n        return `wl:${this.version}@${this.relayUrl}?session=${this.sessionId}&secret=${this.secret}`;\n    }\n    /**\r\n   * Waits for a wallet to join the session.\r\n   * \r\n   * @param timeoutMs - The timeout in milliseconds to wait for the wallet. Default is 30,000ms.\r\n   * @returns A promise that resolves with the wallet's address.\r\n   * @throws If the operation times out or is canceled.\r\n   */ async waitForWallet(timeoutMs = 30000) {\n        if (this.walletWaiterAbortController) throw new Error('Already waiting for wallet');\n        this.walletWaiterAbortController = new AbortController();\n        let { signal: signal } = this.walletWaiterAbortController;\n        return new Promise((resolve, reject)=>{\n            let timer = setTimeout(()=>{\n                cleanup();\n                reject(new Error('Wallet connection timeout'));\n            }, timeoutMs);\n            const handler = (address)=>{\n                cleanup();\n                resolve(address);\n            };\n            const cleanup = ()=>{\n                clearTimeout(timer);\n                this.off('wl_sessionJoined');\n                this.walletWaiterAbortController = undefined;\n            };\n            this.on('wl_sessionJoined', handler);\n            signal.addEventListener('abort', ()=>{\n                cleanup();\n                reject(new Error('Wallet wait canceled'));\n            });\n        });\n    }\n    /**\r\n   * Cancels the wait for a wallet to connect.\r\n   */ cancelWaitForWallet() {\n        this.walletWaiterAbortController?.abort();\n    }\n    /**\r\n   * Requests the connected wallet to sign a message.\r\n   * \r\n   * @param account - The account address to use for signing.\r\n   * @param message - The message to sign - as utf8 string hex representation.\r\n   * @param timeoutMs - The request timeout in milliseconds. Default is 30,000ms.\r\n   * @param signal - An AbortSignal to cancel the request.\r\n   * @returns A promise that resolves with the signed message.\r\n   * @throws If the wallet is not connected or the request fails.\r\n   */ async signMessage(account, message, timeoutMs = 30000, signal) {\n        if (!this.sessionId) throw new Error('Not connected to a wallet');\n        return this.sendRequest('wallet_signMessage', {\n            account: account,\n            message: message\n        }, {\n            timeout: timeoutMs,\n            signal: signal\n        });\n    }\n    /**\r\n   * Requests the connected wallet's account address.\r\n   * \r\n   * @param timeoutMs - The request timeout in milliseconds. Default is 30,000ms.\r\n   * @param signal - An AbortSignal to cancel the request.\r\n   * @returns A promise that resolves with the account address.\r\n   * @throws If the wallet is not connected or the request fails.\r\n   */ async getAccount(timeoutMs = 30000, signal) {\n        if (!this.sessionId) throw new Error('Not connected to a wallet');\n        return this.sendRequest('wallet_getAccount', [], {\n            timeout: timeoutMs,\n            signal: signal\n        });\n    }\n    /**\r\n   * Requests the connected wallet to add a token to its tokens list.\r\n   * \r\n   * @param account - The account address.\r\n   * @param token - The token identifier to add.\r\n   * @param timeoutMs - The request timeout in milliseconds. Default is 30,000ms.\r\n   * @param signal - An AbortSignal to cancel the request.\r\n   * @returns A promise that resolves to true if the token was added successfully.\r\n   * @throws If the wallet is not connected or the request fails.\r\n   */ async addToken(account, token, timeoutMs = 30000, signal) {\n        if (!this.sessionId) throw new Error('Not connected to a wallet');\n        return this.sendRequest('wallet_addToken', {\n            account: account,\n            token: token\n        }, {\n            timeout: timeoutMs,\n            signal: signal\n        });\n    }\n    /**\r\n   * Requests the connected wallet to sign a transaction.\r\n   *\r\n   * @param account - The account address to use for signing.\r\n   * @param hex - The transaction hex to sign.\r\n   * @param broadcast - Whether to broadcast the transaction after signing.\r\n   * @param timeoutMs - The request timeout in milliseconds. Default is 30,000ms.\r\n   * @param signal - An AbortSignal to cancel the request.\r\n   * @returns A promise that resolves with the signed transaction hex, or transaction ID if broadcast is `true`.\r\n   * @throws If the wallet is not connected or the request fails.\r\n   */ async signTransaction(account, hex, broadcast, timeoutMs = 30000, signal) {\n        if (!this.sessionId) throw new Error('Not connected to a wallet');\n        return this.sendRequest('wallet_signTransaction', {\n            account: account,\n            hex: hex,\n            broadcast: broadcast\n        }, {\n            timeout: timeoutMs,\n            signal: signal\n        });\n    }\n    /**\r\n   * Requests the connected wallet to send a transaction.\r\n   *\r\n   * @param from - The sender's address.\r\n   * @param to - The recipient and amount.\r\n   * @param feePerByte - The fee per byte for the transaction.\r\n   * @param data - Optional data to include in the transaction.\r\n   * @param timeoutMs - The request timeout in milliseconds. Default is 30,000ms.\r\n   * @param signal - An AbortSignal to cancel the request.\r\n   * @returns A promise that resolves with the transaction ID.\r\n   * @throws If the wallet is not connected or the request fails.\r\n   */ async sendTransaction(from, to, feePerByte, data, timeoutMs = 30000, signal) {\n        if (!this.sessionId) throw new Error('Not connected to a wallet');\n        return this.sendRequest('wallet_sendTransaction', {\n            from: from,\n            to: to,\n            feePerByte: feePerByte,\n            data: data\n        }, {\n            timeout: timeoutMs,\n            signal: signal\n        });\n    }\n    /**\r\n   * Requests the connected wallet to switch to a different network.\r\n   * \r\n   * @param network - The network to switch to.\r\n   * @param timeoutMs - The request timeout in milliseconds. Default is 30,000ms.\r\n   * @param signal - An AbortSignal to cancel the request.\r\n   * @returns A promise that resolves to true if the network was switched successfully.\r\n   * @throws If the wallet is not connected or the request fails.\r\n   */ async switchNetwork(network, timeoutMs = 30000, signal) {\n        if (!this.sessionId) throw new Error('Not connected to a wallet');\n        return this.sendRequest('wallet_switchNetwork', {\n            network: network\n        }, {\n            timeout: timeoutMs,\n            signal: signal\n        });\n    }\n}\n\n\n\n\n\nexport {$fe6ed033804c8bce$export$2e2bcd8739ae039 as DAppProvider, $ff9d81fc068ff3b6$export$2e2bcd8739ae039 as WalletProvider, $abb7f0d6cff128a3$export$67bbc29c133d62a1 as JsonRpcError, $abb7f0d6cff128a3$export$4baa4fd50b453ebf as JsonRpcErrorCode};\n//# sourceMappingURL=index.mjs.map\n","import {SighashType as $149c1bd638913645$re_export$SighashType, Networks as $hgUW1$Networks, HDPrivateKey as $hgUW1$HDPrivateKey, TransactionBuilder as $hgUW1$TransactionBuilder, Message as $hgUW1$Message, AddressType as $hgUW1$AddressType, Address as $hgUW1$Address, CommonUtils as $hgUW1$CommonUtils, BufferWriter as $hgUW1$BufferWriter, Hash as $hgUW1$Hash, GroupToken as $hgUW1$GroupToken, TxSigner as $hgUW1$TxSigner, TxSignature as $hgUW1$TxSignature, ScriptTemplateInput as $hgUW1$ScriptTemplateInput, ScriptFactory as $hgUW1$ScriptFactory, Script as $hgUW1$Script, UnitUtils as $hgUW1$UnitUtils, Transaction as $hgUW1$Transaction, BNExtended as $hgUW1$BNExtended, BufferUtils as $hgUW1$BufferUtils, Opcode as $hgUW1$Opcode, Output as $hgUW1$Output} from \"libnexa-ts\";\nimport {generateMnemonic as $hgUW1$generateMnemonic, wordlists as $hgUW1$wordlists, mnemonicToSeedSync as $hgUW1$mnemonicToSeedSync, validateMnemonic as $hgUW1$validateMnemonic} from \"bip39\";\nimport {isNil as $hgUW1$isNil, isString as $hgUW1$isString, isBuffer as $hgUW1$isBuffer, isArray as $hgUW1$isArray, parseInt as $hgUW1$parseInt, isObject as $hgUW1$isObject} from \"lodash-es\";\nimport {ConnectionStatus as $hgUW1$ConnectionStatus, ElectrumClient as $hgUW1$ElectrumClient} from \"@vgrunner/electrum-cash\";\nimport $hgUW1$jsbigdecimal from \"js-big-decimal\";\nimport {DAppProvider as $hgUW1$DAppProvider, JsonRpcError as $hgUW1$JsonRpcError, JsonRpcErrorCode as $hgUW1$JsonRpcErrorCode, WalletProvider as $hgUW1$WalletProvider} from \"wallet-comms-sdk\";\n\n\n      var $parcel$global = globalThis;\n    // @ts-ignore\nvar $df64573ef6d51081$exports = {};\n$df64573ef6d51081$exports = JSON.parse(\"{\\\"name\\\":\\\"nexa-wallet-sdk\\\",\\\"version\\\":\\\"0.5.3\\\",\\\"type\\\":\\\"module\\\",\\\"source\\\":\\\"src/index.ts\\\",\\\"types\\\":\\\"dist/index.d.ts\\\",\\\"main\\\":\\\"dist/index.cjs\\\",\\\"module\\\":\\\"dist/index.mjs\\\",\\\"browser\\\":\\\"dist/index.web.mjs\\\",\\\"exports\\\":{\\\"types\\\":\\\"./dist/index.d.ts\\\",\\\"node\\\":{\\\"import\\\":\\\"./dist/index.mjs\\\",\\\"require\\\":\\\"./dist/index.cjs\\\"},\\\"browser\\\":\\\"./dist/index.web.mjs\\\",\\\"default\\\":\\\"./dist/index.mjs\\\"},\\\"scripts\\\":{\\\"build\\\":\\\"parcel build\\\",\\\"lint\\\":\\\"eslint .\\\",\\\"fix-lint\\\":\\\"eslint --fix .\\\",\\\"dev\\\":\\\"parcel watch\\\",\\\"test\\\":\\\"vitest run\\\",\\\"clean\\\":\\\"rm -rf dist .parcel-cache\\\",\\\"docs\\\":\\\"typedoc\\\",\\\"docs:serve\\\":\\\"typedoc && npx serve docs -l 8080\\\",\\\"docs:mkdocs\\\":\\\"typedoc && mkdocs serve\\\",\\\"docs:build\\\":\\\"typedoc && mkdocs build\\\",\\\"docs:setup\\\":\\\"./scripts/setup-docs.sh\\\",\\\"wallet-cli\\\":\\\"node examples/wallet-cli.cjs\\\"},\\\"repository\\\":{\\\"type\\\":\\\"git\\\",\\\"url\\\":\\\"git+ssh://git@gitlab.com/nexa/wallet-sdk-ts.git\\\"},\\\"keywords\\\":[\\\"nexa\\\",\\\"wallet\\\",\\\"web3\\\",\\\"crypto\\\",\\\"dapp\\\",\\\"walletcomms\\\",\\\"walletsdk\\\"],\\\"contributors\\\":[{\\\"name\\\":\\\"Dolaned\\\"},{\\\"name\\\":\\\"Griffith\\\"},{\\\"name\\\":\\\"Vgrunner\\\"},{\\\"name\\\":\\\"myendy\\\"}],\\\"author\\\":\\\"Dolaned\\\",\\\"license\\\":\\\"MIT\\\",\\\"bugs\\\":{\\\"url\\\":\\\"https://gitlab.com/nexa/wallet-sdk-ts/issues\\\"},\\\"homepage\\\":\\\"https://gitlab.com/nexa/wallet-sdk-ts#readme\\\",\\\"description\\\":\\\"Wallet SDK for the Nexa blockchain\\\",\\\"devDependencies\\\":{\\\"@parcel/packager-ts\\\":\\\"^2.15.4\\\",\\\"@parcel/transformer-typescript-types\\\":\\\"^2.15.4\\\",\\\"@types/lodash-es\\\":\\\"^4.17.12\\\",\\\"@types/node\\\":\\\"^22.13.1\\\",\\\"eslint\\\":\\\"^9.20.1\\\",\\\"parcel\\\":\\\"^2.15.4\\\",\\\"typedoc\\\":\\\"^0.28.7\\\",\\\"typedoc-plugin-markdown\\\":\\\"^4.7.0\\\",\\\"typedoc-plugin-rename-defaults\\\":\\\"^0.7.3\\\",\\\"typescript\\\":\\\"^5.8.3\\\",\\\"typescript-eslint\\\":\\\"^8.24.1\\\",\\\"vitest\\\":\\\"^3.0.8\\\"},\\\"targets\\\":{\\\"main\\\":{\\\"context\\\":\\\"node\\\",\\\"outputFormat\\\":\\\"commonjs\\\",\\\"distDir\\\":\\\"dist\\\",\\\"isLibrary\\\":true,\\\"includeNodeModules\\\":[\\\"lodash-es\\\"]},\\\"module\\\":{\\\"context\\\":\\\"node\\\",\\\"outputFormat\\\":\\\"esmodule\\\",\\\"distDir\\\":\\\"dist\\\",\\\"isLibrary\\\":true},\\\"browser\\\":{\\\"context\\\":\\\"browser\\\",\\\"outputFormat\\\":\\\"esmodule\\\",\\\"distDir\\\":\\\"dist\\\",\\\"isLibrary\\\":true}},\\\"dependencies\\\":{\\\"@vgrunner/electrum-cash\\\":\\\"^2.0.12\\\",\\\"bip39\\\":\\\"^3.1.0\\\",\\\"js-big-decimal\\\":\\\"^2.2.0\\\",\\\"libnexa-ts\\\":\\\"^1.0.5\\\",\\\"lodash-es\\\":\\\"^4.17.21\\\",\\\"prompt-sync\\\":\\\"^4.2.0\\\",\\\"wallet-comms-sdk\\\":\\\"^0.6.1\\\"},\\\"files\\\":[\\\"dist\\\"],\\\"directories\\\":{\\\"test\\\":\\\"tests\\\"},\\\"@parcel/resolver-default\\\":{\\\"packageExports\\\":true}}\");\n\n\n\n\n\nconst $3cd8d0b72420af59$export$1f6f962b0b96558 = {\n    WS: 'ws',\n    WSS: 'wss',\n    TCP: \"tcp\",\n    TCP_TLS: \"tcp_tls\"\n};\n\n\n\nclass $884ce55f1db7e177$export$ba81aefc89aef50c {\n    constructor(){}\n    /**\n     * Get Rostum Server Version\n     */ async getVersion() {\n        return await this.execute('server.version');\n    }\n    /**\n     * Get the block tip of the network / chain we are currently connected to\n     */ async getBlockTip() {\n        return await this.execute('blockchain.headers.tip');\n    }\n    /**\n     * Get the nexa balance of an address without the token balances\n     * @param address\n     */ async getBalance(address) {\n        return await this.execute('blockchain.address.get_balance', address, 'exclude_tokens');\n    }\n    /**\n     * Get The transaction history for an address\n     * @param address\n     */ async getTransactionHistory(address) {\n        return await this.execute('blockchain.address.get_history', address);\n    }\n    /**\n     * Get the block height or block has of when the address was first used\n     * @param address\n     */ async getFirstUse(address) {\n        return await this.execute('blockchain.address.get_first_use', address);\n    }\n    /**\n     * Get a single transaction object\n     * @param id\n     * @param verbose\n     */ async getTransaction(id, verbose = true) {\n        return await this.execute('blockchain.transaction.get', id, verbose);\n    }\n    /**\n     * Get a single unspent output including group data\n     * @param outpoint\n     */ async getUtxo(outpoint) {\n        return await this.execute('blockchain.utxo.get', outpoint);\n    }\n    /**\n     * Get Utxos only containing nexa information\n     * @param address\n     */ async getNexaUtxos(address) {\n        return await this.execute('blockchain.address.listunspent', address, 'exclude_tokens');\n    }\n    /**\n     * Get all the utxo's for a token at an address\n     * @param address\n     * @param token\n     */ async getTokenUtxos(address, token) {\n        let listunspent = await this.execute('token.address.listunspent', address, null, token);\n        return listunspent.unspent;\n    }\n    /**\n     * Get the token balances for an address\n     * @param address\n     * @param token\n     */ async getTokensBalance(address, token) {\n        if (token) return await this.execute('token.address.get_balance', address, null, token);\n        return await this.execute('token.address.get_balance', address);\n    }\n    /**\n     * Get the token genesis for a token\n     * @param token\n     */ async getTokenGenesis(token) {\n        return await this.execute('token.genesis.info', token);\n    }\n    /**\n     * Subscribe to address call back notifications, handy for updating the user when they receive nexa or tokens in\n     * their wallet\n     * @param addresses\n     * @param callback\n     */ async subscribeToAddresses(addresses, callback) {\n        for (const addr of addresses)await this.client?.subscribe(callback, 'blockchain.address.subscribe', addr);\n    }\n    /**\n     * Unsubscribe from address notifications to prevent memory leaks\n     * @param addresses\n     * @param callback\n     */ async unsubscribeFromAddresses(addresses, callback) {\n        for (const addr of addresses)await this.client?.unsubscribe(callback, 'blockchain.address.subscribe', addr);\n    }\n    /**\n     * Broadcast a presigned transaction hash\n     * @param txHex\n     */ async broadcast(txHex) {\n        return await this.execute('blockchain.transaction.broadcast', txHex);\n    }\n    /**\n     * Get the latency of the server connection\n     */ async getLatency() {\n        try {\n            let start = Date.now();\n            let res = await this.getBlockTip();\n            if (res) return Date.now() - start;\n            return 0;\n        } catch  {\n            return 0;\n        }\n    }\n    /**\n     * Create initial connection with the rostrum server\n     * @param netOrParams - Network identifier or RostrumParams object\n     * @param params - RostrumParams object (for backward compatibility)\n     * @param electrumClient - Optional pre-configured ElectrumClient instance\n     */ async connect(netOrParams, params, electrumClient) {\n        try {\n            let connectionParams;\n            // Handle backward compatibility: connect(params) or connect(network, params)\n            if (netOrParams && typeof netOrParams === 'object' && 'host' in netOrParams && 'port' in netOrParams && 'scheme' in netOrParams) // First parameter is RostrumParams\n            connectionParams = netOrParams;\n            else if (params) // Second parameter contains RostrumParams, ignore network\n            connectionParams = params;\n            else {\n                // Use network to determine default params\n                const network = netOrParams ? (0, $hgUW1$Networks).get(netOrParams) : (0, $hgUW1$Networks).mainnet;\n                if (network === (0, $hgUW1$Networks).mainnet) connectionParams = {\n                    host: 'electrum.nexa.org',\n                    port: 20004,\n                    scheme: (0, $3cd8d0b72420af59$export$1f6f962b0b96558).WSS\n                };\n                else if (network === (0, $hgUW1$Networks).testnet) connectionParams = {\n                    host: 'testnet-electrum.nexa.org',\n                    port: 30004,\n                    scheme: (0, $3cd8d0b72420af59$export$1f6f962b0b96558).WSS\n                };\n                else // Default fallback for other networks (like regtest)\n                connectionParams = {\n                    host: 'localhost',\n                    port: 30004,\n                    scheme: (0, $3cd8d0b72420af59$export$1f6f962b0b96558).WS\n                };\n            }\n            if (electrumClient) {\n                this.client = electrumClient;\n                if (this.client.connection.status == (0, $hgUW1$ConnectionStatus).DISCONNECTED) await this.client.connect();\n            } else {\n                this.client = new (0, $hgUW1$ElectrumClient)(\"com.nexa.wallet-sdk\", \"1.4.3\", connectionParams.host, connectionParams.port, connectionParams.scheme, 30000, 10000, true);\n                await this.client.connect();\n            }\n        } catch (e) {\n            if (e instanceof Error) console.info(e.message);\n            else console.error(e);\n            throw e;\n        }\n    }\n    /**\n     * Disconnect from the rostrum server\n     * @param force\n     */ async disconnect(force) {\n        try {\n            return await this.client.disconnect(force);\n        } catch (e) {\n            console.log(e);\n            return false;\n        }\n    }\n    /**\n     * internal function to call commands against the rostrum API\n     * @param method\n     * @param parameters\n     * @private\n     */ async execute(method, ...parameters) {\n        let res = await this.client.request(method, ...parameters);\n        if (res instanceof Error) throw res;\n        return res;\n    }\n}\nconst $884ce55f1db7e177$export$eaa49f0478d81b9d = new $884ce55f1db7e177$export$ba81aefc89aef50c();\n\n\n\n\n\n\n\n\nclass $b76a3f2ef1862027$export$c54c8796e94a37a0 {\n    get transactions() {\n        return this._transactions;\n    }\n    constructor(_bip44Account){\n        this._tokenBalances = {};\n        this._tokenAuthorities = {};\n        this._transactions = new Map();\n        this._bip44Account = _bip44Account;\n        this._balance = {\n            confirmed: 0,\n            unconfirmed: 0\n        };\n        this._tokenBalances = {};\n        this._tokenAuthorities = {};\n    }\n    get balance() {\n        return this._balance;\n    }\n    set balance(value) {\n        this._balance = value;\n    }\n    get tokenBalances() {\n        return this._tokenBalances;\n    }\n    set tokenBalances(value) {\n        this._tokenBalances = value;\n    }\n    get tokenAuthorities() {\n        return this._tokenAuthorities;\n    }\n    set tokenAuthorities(value) {\n        this._tokenAuthorities = value;\n    }\n    async fetchAndClassifyTransactions(transactionAddress, fromHeight) {\n        const transactions = await (0, $6f559318d8845d29$export$a2ed4b531376a5a4)([\n            transactionAddress\n        ], fromHeight ?? 0);\n        const txPromises = Array.from(transactions.txs.values()).map((tx)=>(0, $6f559318d8845d29$export$9c6f4f51acbc89b9)(tx, [\n                transactionAddress\n            ]));\n        const txEntities = await Promise.all(txPromises);\n        for (let txEntity of txEntities)this.transactions.set(txEntity.txId, txEntity);\n        return this.transactions;\n    }\n}\n\n\n\nclass $448355556707518b$export$2e2bcd8739ae039 extends (0, $b76a3f2ef1862027$export$c54c8796e94a37a0) {\n    constructor(bip44Account, accountIndex, addressKey){\n        super(bip44Account);\n        this._accountIndex = accountIndex;\n        this._accountKey = addressKey;\n    }\n    // this is used in AccountStore.ts to get the key to be used in the map for this account\n    getAccountStoreKey() {\n        return String(this._bip44Account + '.' + this._accountIndex);\n    }\n    getAccountType() {\n        return (0, $6f559318d8845d29$export$b8ca5fa4899cbfc7).DAPP_ACCOUNT;\n    }\n    getNewAddress() {\n        return this._accountKey.address;\n    }\n    getNewChangeAddress() {\n        return this.getNewAddress();\n    }\n    get accountIndexes() {\n        return {\n            rIndex: this._accountIndex,\n            cIndex: 0\n        };\n    }\n    get accountKeys() {\n        return {\n            receiveKeys: [\n                this._accountKey\n            ],\n            changeKeys: [] // Empty for single-key accounts\n        };\n    }\n    async loadBalances() {\n        const { balances: balances, authorities: authorities } = await (0, $6f559318d8845d29$export$e4fb0bc90aacba9e)([\n            this._accountKey\n        ]);\n        let tokenBalances = [\n            this._accountKey\n        ].map((k)=>k.tokensBalance);\n        super.balance = (0, $6f559318d8845d29$export$a26005fb5b8d1e4a)(balances);\n        super.tokenBalances = (0, $6f559318d8845d29$export$dec515296f176dbe)(tokenBalances);\n        super.tokenAuthorities = authorities;\n    }\n    getKeyFromAddress(address) {\n        if (address !== this._accountKey.address) throw new Error(`Address ${address} does not belong to this account`);\n        return this._accountKey;\n    }\n    async getTransactions(fromHeight, address) {\n        const transactionAddress = address ?? this._accountKey.address;\n        return this.fetchAndClassifyTransactions(transactionAddress, fromHeight);\n    }\n    getAddresses() {\n        return [\n            this._accountKey\n        ];\n    }\n    hasChangeAddresses() {\n        return false;\n    }\n    getPrimaryAddressKey() {\n        return this._accountKey;\n    }\n}\n\n\n\n\nclass $5c605efdbcfd6698$export$2e2bcd8739ae039 extends (0, $b76a3f2ef1862027$export$c54c8796e94a37a0) {\n    constructor(bip44Account, accountIndexes, accountKeys){\n        super(bip44Account);\n        if (accountIndexes.rIndex < 0) throw new Error(`Can not create nexa account with an rindex of ${accountIndexes.rIndex}. must be >= 0.`);\n        if (accountIndexes.cIndex < 0) throw new Error(`Can not create nexa account with an cindex of ${accountIndexes.cIndex}. must be >= 0.`);\n        this._accountIndexes = accountIndexes;\n        this._accountKeys = accountKeys;\n    }\n    // this is used in AccountStore.ts to get the key to be used in the map for this account\n    getAccountStoreKey() {\n        return String(this._bip44Account);\n    }\n    getAccountType() {\n        return (0, $6f559318d8845d29$export$b8ca5fa4899cbfc7).NEXA_ACCOUNT;\n    }\n    getNewAddress() {\n        return this._accountKeys.receiveKeys[this._accountKeys.receiveKeys.length - 1]?.address ?? '';\n    }\n    getNewChangeAddress() {\n        return this._accountKeys.changeKeys[this._accountKeys.changeKeys.length - 1]?.address ?? '';\n    }\n    get accountIndexes() {\n        return this._accountIndexes;\n    }\n    get accountKeys() {\n        return this._accountKeys;\n    }\n    async loadBalances() {\n        const { balances: balances, authorities: authorities } = await (0, $6f559318d8845d29$export$e4fb0bc90aacba9e)(this._accountKeys.receiveKeys.concat(this._accountKeys.changeKeys));\n        let tokenBalances = this._accountKeys.receiveKeys.concat(this._accountKeys.changeKeys).map((k)=>k.tokensBalance);\n        super.balance = (0, $6f559318d8845d29$export$a26005fb5b8d1e4a)(balances);\n        super.tokenBalances = (0, $6f559318d8845d29$export$dec515296f176dbe)(tokenBalances);\n        super.tokenAuthorities = authorities;\n    }\n    getKeyFromAddress(address) {\n        const allKeys = this._accountKeys.receiveKeys.concat(this._accountKeys.changeKeys);\n        const keyFound = allKeys.find((key)=>key.address === address);\n        return keyFound;\n    }\n    async getTransactions(fromHeight, address) {\n        let receiveAddresses = this.accountKeys.receiveKeys.map((ak)=>ak.address);\n        let changeAddresses = this.accountKeys.changeKeys.map((ak)=>ak.address);\n        let allAddresses = receiveAddresses.concat(changeAddresses);\n        // If specific address provided, only fetch for that address\n        if (address != null) {\n            const transactions = await (0, $6f559318d8845d29$export$a2ed4b531376a5a4)([\n                address\n            ], fromHeight ?? 0);\n            const txPromises = Array.from(transactions.txs.values()).map((tx)=>(0, $6f559318d8845d29$export$9c6f4f51acbc89b9)(tx, allAddresses));\n            const txEntities = await Promise.all(txPromises);\n            for (let txEntity of txEntities)this.transactions.set(txEntity.txId, txEntity);\n            return this.transactions;\n        }\n        // Fetch from both receive and change addresses\n        let rTxs = (0, $6f559318d8845d29$export$a2ed4b531376a5a4)(receiveAddresses, fromHeight ?? 0);\n        let cTxs = (0, $6f559318d8845d29$export$a2ed4b531376a5a4)(changeAddresses, fromHeight ?? 0);\n        let [rData, cData] = await Promise.all([\n            rTxs,\n            cTxs\n        ]);\n        // Combine transaction data, avoiding duplicates\n        let txHistory = rData.txs;\n        for (let tx of cData.txs.values())txHistory.set(tx.tx_hash, tx);\n        // Classify all transactions in parallel\n        const txPromises = Array.from(txHistory.values()).map((tx)=>(0, $6f559318d8845d29$export$9c6f4f51acbc89b9)(tx, allAddresses));\n        const txEntities = await Promise.all(txPromises);\n        for (let txEntity of txEntities)this.transactions.set(txEntity.txId, txEntity);\n        return this.transactions;\n    }\n    getAddresses() {\n        return this._accountKeys.receiveKeys.concat(this._accountKeys.changeKeys);\n    }\n    hasChangeAddresses() {\n        return true; // BIP44 accounts always support change addresses\n    }\n    getPrimaryAddressKey() {\n        // For DefaultAccount, return the first receive key as the primary key\n        if (this._accountKeys.receiveKeys.length === 0) throw new Error(\"No receive keys available in account\");\n        return this._accountKeys.receiveKeys[0];\n    }\n}\n\n\n\n\nclass $ce8955c0465759ad$export$2e2bcd8739ae039 extends (0, $b76a3f2ef1862027$export$c54c8796e94a37a0) {\n    constructor(bip44Account, accountIndex, addressKey){\n        super(bip44Account);\n        this._accountIndex = accountIndex;\n        this._accountKey = addressKey;\n    }\n    // this is used in AccountStore.ts to get the key to be used in the map for this account\n    getAccountStoreKey() {\n        return String(this._bip44Account + '.' + this._accountIndex);\n    }\n    getAccountType() {\n        return (0, $6f559318d8845d29$export$b8ca5fa4899cbfc7).VAULT_ACCOUNT;\n    }\n    getNewAddress() {\n        return this._accountKey.address;\n    }\n    getNewChangeAddress() {\n        return this.getNewAddress();\n    }\n    get accountIndexes() {\n        return {\n            rIndex: this._accountIndex,\n            cIndex: 0\n        };\n    }\n    get accountKeys() {\n        return {\n            receiveKeys: [\n                this._accountKey\n            ],\n            changeKeys: [] // Empty for single-key accounts\n        };\n    }\n    async loadBalances() {\n        const { balances: balances, authorities: authorities } = await (0, $6f559318d8845d29$export$e4fb0bc90aacba9e)([\n            this._accountKey\n        ]);\n        let tokenBalances = [\n            this._accountKey\n        ].map((k)=>k.tokensBalance);\n        super.balance = (0, $6f559318d8845d29$export$a26005fb5b8d1e4a)(balances);\n        super.tokenBalances = (0, $6f559318d8845d29$export$dec515296f176dbe)(tokenBalances);\n        super.tokenAuthorities = authorities;\n    }\n    getKeyFromAddress(address) {\n        if (address !== this._accountKey.address) throw new Error(`Address ${address} does not belong to this account`);\n        return this._accountKey;\n    }\n    async getTransactions(fromHeight, address) {\n        const transactionAddress = address ?? this._accountKey.address;\n        return this.fetchAndClassifyTransactions(transactionAddress, fromHeight);\n    }\n    getAddresses() {\n        return [\n            this._accountKey\n        ];\n    }\n    hasChangeAddresses() {\n        return false;\n    }\n    getPrimaryAddressKey() {\n        return this._accountKey;\n    }\n}\n\n\n\n\nconst $d78972a39a5ae94f$export$8ba128bc85947a2a = 9223372036854775807n;\nfunction $d78972a39a5ae94f$export$78d0476e8d098ba7() {\n    return Math.floor(Date.now() / 1000);\n}\nfunction $d78972a39a5ae94f$export$c8733ae29fb53302(arg) {\n    return !arg || arg.length === 0;\n}\nfunction $d78972a39a5ae94f$export$78e516cc94be797b(amount, decimals) {\n    let val = new (0, $hgUW1$jsbigdecimal)(amount).divide(new (0, $hgUW1$jsbigdecimal)(Math.pow(10, decimals)), decimals).getPrettyValue();\n    if (val.match(/\\./)) val = val.replace(/\\.?0+$/, '');\n    return val;\n}\nfunction $d78972a39a5ae94f$export$9ad78026dec58d6(amount, decimals) {\n    return new (0, $hgUW1$jsbigdecimal)(amount).multiply(new (0, $hgUW1$jsbigdecimal)(Math.pow(10, decimals))).getValue();\n}\nfunction $d78972a39a5ae94f$export$23010fd5dda8dec1(address) {\n    if ((0, $hgUW1$CommonUtils).isHexa(address)) return Buffer.from(address, 'hex');\n    return (0, $hgUW1$Address).fromString(address).data;\n}\nfunction $d78972a39a5ae94f$export$254a5c7330bbfd41(token) {\n    if ((0, $hgUW1$CommonUtils).isHexa(token)) return token;\n    return $d78972a39a5ae94f$export$23010fd5dda8dec1(token).toString('hex');\n}\nfunction $d78972a39a5ae94f$export$f12d707d2b261fb6(txIdem, outputIndex) {\n    const writer = new (0, $hgUW1$BufferWriter)(undefined);\n    const outpoint = writer.write(Buffer.from(txIdem, 'hex').reverse()).writeUInt32LE(outputIndex).toBuffer();\n    return (0, $hgUW1$Hash).sha256(outpoint).reverse().toString('hex');\n}\n\n\n\nfunction $59b5736a17e7320d$export$7f7cffd29bf2d96d(authFlags, permission) {\n    if (authFlags > 0) return false;\n    let flags = BigInt.asUintN(64, BigInt(authFlags));\n    switch(permission){\n        case 'authorise':\n            return (0, $hgUW1$GroupToken).allowsRenew(flags);\n        case 'mint':\n            return (0, $hgUW1$GroupToken).allowsMint(flags);\n        case 'melt':\n            return (0, $hgUW1$GroupToken).allowsMelt(flags);\n        case 'rescript':\n            return (0, $hgUW1$GroupToken).allowsRescript(flags);\n        case 'subgroup':\n            return (0, $hgUW1$GroupToken).allowsSubgroup(flags);\n        default:\n            return false;\n    }\n}\nfunction $59b5736a17e7320d$export$636fb0b03b94ac81(authFlags, withSubgroup = true) {\n    if (authFlags > 0) return 0n;\n    let flags = BigInt.asUintN(64, BigInt(authFlags));\n    let newFlags = (0, $hgUW1$GroupToken).authFlags.AUTHORITY;\n    if ((0, $hgUW1$GroupToken).allowsRenew(flags)) newFlags |= (0, $hgUW1$GroupToken).authFlags.BATON;\n    if ((0, $hgUW1$GroupToken).allowsMint(flags)) newFlags |= (0, $hgUW1$GroupToken).authFlags.MINT;\n    if ((0, $hgUW1$GroupToken).allowsMelt(flags)) newFlags |= (0, $hgUW1$GroupToken).authFlags.MELT;\n    if ((0, $hgUW1$GroupToken).allowsRescript(flags)) newFlags |= (0, $hgUW1$GroupToken).authFlags.RESCRIPT;\n    if ((0, $hgUW1$GroupToken).allowsSubgroup(flags) && withSubgroup) newFlags |= (0, $hgUW1$GroupToken).authFlags.SUBGROUP;\n    return newFlags;\n}\nfunction $59b5736a17e7320d$export$e240c810a53c3a0c(perms) {\n    let newFlags = (0, $hgUW1$GroupToken).authFlags.AUTHORITY;\n    for (let perm of perms)switch(perm){\n        case 'authorise':\n            newFlags |= (0, $hgUW1$GroupToken).authFlags.BATON;\n            break;\n        case 'mint':\n            newFlags |= (0, $hgUW1$GroupToken).authFlags.MINT;\n            break;\n        case 'melt':\n            newFlags |= (0, $hgUW1$GroupToken).authFlags.MELT;\n            break;\n        case 'rescript':\n            newFlags |= (0, $hgUW1$GroupToken).authFlags.RESCRIPT;\n            break;\n        case 'subgroup':\n            newFlags |= (0, $hgUW1$GroupToken).authFlags.SUBGROUP;\n            break;\n    }\n    return newFlags;\n}\nfunction $59b5736a17e7320d$export$c949c84578b9e236(authFlags) {\n    if (authFlags > 0) return [];\n    const permissions = [];\n    const flags = BigInt.asUintN(64, BigInt(authFlags));\n    if ((0, $hgUW1$GroupToken).allowsRenew(flags)) permissions.push('authorise');\n    if ((0, $hgUW1$GroupToken).allowsMint(flags)) permissions.push('mint');\n    if ((0, $hgUW1$GroupToken).allowsMelt(flags)) permissions.push('melt');\n    if ((0, $hgUW1$GroupToken).allowsRescript(flags)) permissions.push('rescript');\n    if ((0, $hgUW1$GroupToken).allowsSubgroup(flags)) permissions.push('subgroup');\n    return permissions;\n}\n\n\nvar $6f559318d8845d29$export$dcc1fb6ad5308e56 = /*#__PURE__*/ function(TxTokenType) {\n    TxTokenType[TxTokenType[\"NO_GROUP\"] = 0] = \"NO_GROUP\";\n    TxTokenType[TxTokenType[\"CREATE\"] = 1] = \"CREATE\";\n    TxTokenType[TxTokenType[\"MINT\"] = 2] = \"MINT\";\n    TxTokenType[TxTokenType[\"MELT\"] = 3] = \"MELT\";\n    TxTokenType[TxTokenType[\"RENEW\"] = 4] = \"RENEW\";\n    TxTokenType[TxTokenType[\"TRANSFER\"] = 5] = \"TRANSFER\";\n    return TxTokenType;\n}({});\nvar $6f559318d8845d29$export$b8ca5fa4899cbfc7 = /*#__PURE__*/ function(AccountType) {\n    AccountType[AccountType[\"NEXA_ACCOUNT\"] = 0] = \"NEXA_ACCOUNT\";\n    AccountType[AccountType[\"VAULT_ACCOUNT\"] = 1] = \"VAULT_ACCOUNT\";\n    AccountType[AccountType[\"DAPP_ACCOUNT\"] = 2] = \"DAPP_ACCOUNT\";\n    return AccountType;\n}({});\nfunction $6f559318d8845d29$export$8d986bd2866fe6ab(address, network, type = (0, $hgUW1$AddressType).PayToScriptTemplate) {\n    return (0, $hgUW1$Address).isValid(address, network, type);\n}\nfunction $6f559318d8845d29$export$11f4ae2b4ff9633d(mnemonic, passphrase) {\n    const seed = $hgUW1$mnemonicToSeedSync(mnemonic, passphrase);\n    const masterKey = (0, $hgUW1$HDPrivateKey).fromSeed(seed);\n    return masterKey.deriveChild(44, true).deriveChild(29223, true);\n}\nfunction $6f559318d8845d29$export$b3a12d67e2f5f8c9(masterKey, account) {\n    return masterKey.deriveChild(account, true);\n}\nfunction $6f559318d8845d29$export$d6e8eb22902c6b88(accountKey, fromRIndex, rIndex, fromCIndex, cIndex) {\n    if (fromRIndex < 0) throw new Error(`Can not generate keys with fromRIndex ${fromRIndex}. must be >= 0.`);\n    if (fromCIndex < 0) throw new Error(`Can not generate keys with fromCIndex ${fromCIndex}. must be >= 0.`);\n    let receive = accountKey.deriveChild(0, false);\n    let change = accountKey.deriveChild(1, false);\n    let rKeys = [], cKeys = [];\n    for(let index = fromRIndex; index < rIndex; index++){\n        let k = receive.deriveChild(index, false);\n        let addr = k.privateKey.toAddress().toString();\n        rKeys.push({\n            key: k,\n            address: addr,\n            balance: \"0\",\n            tokensBalance: {}\n        });\n    }\n    for(let index = fromCIndex; index < cIndex; index++){\n        let k = change.deriveChild(index, false);\n        let addr = k.privateKey.toAddress().toString();\n        cKeys.push({\n            key: k,\n            address: addr,\n            balance: \"0\",\n            tokensBalance: {}\n        });\n    }\n    return {\n        receiveKeys: rKeys,\n        changeKeys: cKeys\n    };\n}\nfunction $6f559318d8845d29$export$1e0ce394ebe84ca9(accountKey, rIndex) {\n    let receive = accountKey.deriveChild(0, false);\n    let k = receive.deriveChild(rIndex, false);\n    let addr = k.privateKey.toAddress().toString();\n    return {\n        key: k,\n        address: addr,\n        balance: \"0\",\n        tokensBalance: {}\n    };\n}\nasync function $6f559318d8845d29$var$discoverUsedAccountIndexes(deriveKey) {\n    let lastUsed = -1, index = 0, toScan = 20;\n    while(toScan > 0){\n        toScan--;\n        let rAddr = deriveKey.deriveChild(index, false).privateKey.toAddress().toString();\n        let isUsed = await $6f559318d8845d29$var$isAddressUsed(rAddr);\n        if (isUsed) {\n            lastUsed = index;\n            toScan = 20;\n        }\n        index++;\n    }\n    // return the last used index, returns -1 if no indexes are used\n    return lastUsed;\n}\nasync function $6f559318d8845d29$export$4aeb2c92e53ab137(accountKey) {\n    let receiveKey = accountKey.deriveChild(0, false);\n    let changeKey = accountKey.deriveChild(1, false);\n    let rIndexPromise = $6f559318d8845d29$var$discoverUsedAccountIndexes(receiveKey);\n    let cIndexPromise = $6f559318d8845d29$var$discoverUsedAccountIndexes(changeKey);\n    let [rIndex, cIndex] = await Promise.all([\n        rIndexPromise,\n        cIndexPromise\n    ]);\n    // get the index that is the last used nexa addr\n    let indexes = {\n        rIndex: rIndex,\n        cIndex: cIndex\n    };\n    return indexes;\n}\nasync function $6f559318d8845d29$export$f421913908d4303e(masterKey) {\n    let accounts = [];\n    let index = 0;\n    while(true){\n        const nexaAccountKey = $6f559318d8845d29$export$b3a12d67e2f5f8c9(masterKey, index);\n        const indexes = await $6f559318d8845d29$export$4aeb2c92e53ab137(nexaAccountKey);\n        if (indexes.rIndex < 0 && indexes.cIndex < 0) break;\n        if (indexes.rIndex < 0) indexes.rIndex = 0;\n        if (indexes.cIndex < 0) indexes.cIndex = 0;\n        // make account after break check, otherwise we might push an empty account\n        const nexaAccount = new (0, $5c605efdbcfd6698$export$2e2bcd8739ae039)(index, indexes, $6f559318d8845d29$export$d6e8eb22902c6b88(nexaAccountKey, indexes.rIndex + 1, indexes.rIndex + 20, indexes.cIndex + 1, indexes.cIndex + 20));\n        await nexaAccount.loadBalances();\n        accounts.push(nexaAccount);\n        if (index == 0) index = 100;\n        else index++;\n    }\n    if (accounts.length == 0) {\n        // default account was unused but we need to populate at least one account,\n        // make the default account here\n        let defaultNexaAccountKey = $6f559318d8845d29$export$b3a12d67e2f5f8c9(masterKey, 0);\n        // get the last used indexes, -1 means unused\n        let defaultIndexes = {\n            rIndex: 0,\n            cIndex: 0\n        };\n        const defaultAccount = new (0, $5c605efdbcfd6698$export$2e2bcd8739ae039)(0, defaultIndexes, $6f559318d8845d29$export$d6e8eb22902c6b88(defaultNexaAccountKey, defaultIndexes.rIndex, defaultIndexes.rIndex + 20, defaultIndexes.cIndex, defaultIndexes.cIndex + 20));\n        await defaultAccount.loadBalances();\n        accounts.push(defaultAccount);\n    }\n    return accounts;\n}\nasync function $6f559318d8845d29$var$findUsedVaultAccounts(masterKey) {\n    // all vaults are in bip44 account 1\n    let vaultAccountKey = $6f559318d8845d29$export$b3a12d67e2f5f8c9(masterKey, 1);\n    // all vaults are in the external chain\n    let vaultChain = vaultAccountKey.deriveChild(0, false);\n    // get the index that is the last used vault\n    return await $6f559318d8845d29$var$discoverUsedAccountIndexes(vaultChain);\n}\nasync function $6f559318d8845d29$export$eb24265dd203eccb(masterKey) {\n    let accounts = [];\n    // all vaults are in bip44 account 1\n    let vaultAccountKey = $6f559318d8845d29$export$b3a12d67e2f5f8c9(masterKey, 1);\n    // find the next unused vault\n    let lastUsedVaultIndex = await $6f559318d8845d29$var$findUsedVaultAccounts(masterKey);\n    // if all vaults unused, generate at least the first vault account\n    if (lastUsedVaultIndex < 0) lastUsedVaultIndex = 0;\n    // for each vault found, make the DefaultAccount for that vault\n    for(let index = 0; index <= lastUsedVaultIndex; index++){\n        const vaultAccount = new (0, $ce8955c0465759ad$export$2e2bcd8739ae039)(1, index, $6f559318d8845d29$export$1e0ce394ebe84ca9(vaultAccountKey, index));\n        await vaultAccount.loadBalances();\n        accounts.push(vaultAccount);\n    }\n    return accounts;\n}\nasync function $6f559318d8845d29$var$findUsedDappAccounts(masterKey) {\n    // all dApp accounts are in bip44 account 2\n    let dappAccountKey = $6f559318d8845d29$export$b3a12d67e2f5f8c9(masterKey, 2);\n    // all dApp accounts use the external chain\n    let dappChain = dappAccountKey.deriveChild(0, false);\n    // get the index that is the next unused dApp account\n    return await $6f559318d8845d29$var$discoverUsedAccountIndexes(dappChain);\n}\nasync function $6f559318d8845d29$export$e3d879d0e09f52c3(masterKey) {\n    let accounts = [];\n    // all dApp accounts are in bip44 account 2\n    let dappAccountKey = $6f559318d8845d29$export$b3a12d67e2f5f8c9(masterKey, 2);\n    // find the next unused dapp account\n    let lastUsedDappIndex = await $6f559318d8845d29$var$findUsedDappAccounts(masterKey);\n    // if all dapp accounts unused, generate at least the first dapp account\n    if (lastUsedDappIndex < 0) lastUsedDappIndex = 0;\n    // for each dApp account found, make the DefaultAccount for that dApp account\n    // for each vault found, make the DefaultAccount for that vault\n    for(let index = 0; index <= lastUsedDappIndex; index++){\n        const dappAccount = new (0, $448355556707518b$export$2e2bcd8739ae039)(2, index, $6f559318d8845d29$export$1e0ce394ebe84ca9(dappAccountKey, index));\n        await dappAccount.loadBalances();\n        accounts.push(dappAccount);\n    }\n    return accounts;\n}\nasync function $6f559318d8845d29$export$4e4f91181d6bd31c(masterKey) {\n    let accounts = [];\n    // accounts 0, 100+\n    const nexaAccounts = await $6f559318d8845d29$export$f421913908d4303e(masterKey);\n    // vaults in bip44 account 1\n    const vaultAccounts = await $6f559318d8845d29$export$eb24265dd203eccb(masterKey);\n    // dApp accounts in bip44 account 2\n    const dappAccounts = await $6f559318d8845d29$export$e3d879d0e09f52c3(masterKey);\n    // 3 - 99 are reserved and will go here when added\n    accounts = accounts.concat(nexaAccounts);\n    accounts = accounts.concat(vaultAccounts);\n    accounts = accounts.concat(dappAccounts);\n    return accounts;\n}\nasync function $6f559318d8845d29$var$isAddressUsed(address) {\n    try {\n        let firstUse = await (0, $884ce55f1db7e177$export$eaa49f0478d81b9d).getFirstUse(address);\n        return firstUse.tx_hash && firstUse.tx_hash !== \"\";\n    } catch (e) {\n        if (e instanceof Error && e.message.includes(\"not found\")) return false;\n        throw e;\n    }\n}\nasync function $6f559318d8845d29$var$getKeyTokenBalanceAndAuthorities(address) {\n    const tokensBalance = await (0, $884ce55f1db7e177$export$eaa49f0478d81b9d).getTokensBalance(address);\n    const balance = {};\n    const authorities = {};\n    // Get all unique token IDs from both confirmed and unconfirmed\n    const allTokenIds = new Set([\n        ...Object.keys(tokensBalance.confirmed),\n        ...Object.keys(tokensBalance.unconfirmed)\n    ]);\n    // Process each token to get both balance and check for authorities\n    for (const tokenId of allTokenIds){\n        const confirmedAmount = tokensBalance.confirmed[tokenId] || 0;\n        const unconfirmedAmount = tokensBalance.unconfirmed[tokenId] || 0;\n        // Add to balance if non-zero\n        if (confirmedAmount !== 0 || unconfirmedAmount !== 0) balance[tokenId] = {\n            confirmed: BigInt(confirmedAmount).toString(),\n            unconfirmed: BigInt(unconfirmedAmount).toString()\n        };\n        // Check for authorities by getting token UTXOs\n        try {\n            const tokenUtxos = await (0, $884ce55f1db7e177$export$eaa49f0478d81b9d).getTokenUtxos(address, tokenId);\n            if (tokenUtxos && tokenUtxos.length > 0) {\n                // Look for authorities (negative amounts)\n                const authUtxos = tokenUtxos.filter((utxo)=>{\n                    const amount = parseInt(String(utxo.token_amount || '0'));\n                    return amount < 0;\n                });\n                // Add permissions and address to each authority UTXO and organize by token ID\n                if (authUtxos.length > 0) {\n                    const authoritiesWithPermissions = authUtxos.map((utxo)=>({\n                            ...utxo,\n                            permissions: (0, $59b5736a17e7320d$export$c949c84578b9e236)(parseInt(String(utxo.token_amount || '0'))),\n                            address: address\n                        }));\n                    authorities[tokenId] = authoritiesWithPermissions;\n                }\n            }\n        } catch (error) {\n            console.warn(`Error checking authorities for token ${tokenId} on address ${address}:`, error);\n        }\n    }\n    return {\n        balance: balance,\n        authorities: authorities\n    };\n}\nasync function $6f559318d8845d29$var$getAndUpdateAddressKeyBalance(key) {\n    let balance = await (0, $884ce55f1db7e177$export$eaa49f0478d81b9d).getBalance(key.address);\n    key.balance = (BigInt(balance.confirmed) + BigInt(balance.unconfirmed)).toString();\n    const { balance: tokenBalance, authorities: authorities } = await $6f559318d8845d29$var$getKeyTokenBalanceAndAuthorities(key.address);\n    key.tokensBalance = tokenBalance;\n    return {\n        balance: balance,\n        authorities: authorities\n    };\n}\nasync function $6f559318d8845d29$export$e4fb0bc90aacba9e(keys) {\n    let promises = [];\n    keys.forEach((key)=>{\n        promises.push($6f559318d8845d29$var$getAndUpdateAddressKeyBalance(key));\n    });\n    const results = await Promise.all(promises);\n    const balances = results.map((r)=>r.balance);\n    // Combine authorities from all addresses, merging by token ID\n    const combinedAuthorities = {};\n    results.forEach((result)=>{\n        Object.keys(result.authorities).forEach((tokenId)=>{\n            if (combinedAuthorities[tokenId]) combinedAuthorities[tokenId] = combinedAuthorities[tokenId].concat(result.authorities[tokenId]);\n            else combinedAuthorities[tokenId] = result.authorities[tokenId];\n        });\n    });\n    return {\n        balances: balances,\n        authorities: combinedAuthorities\n    };\n}\nfunction $6f559318d8845d29$export$a26005fb5b8d1e4a(balances) {\n    let confirmed = new (0, $hgUW1$jsbigdecimal)(0), unconfirmed = new (0, $hgUW1$jsbigdecimal)(0);\n    balances.forEach((b)=>{\n        confirmed = confirmed.add(new (0, $hgUW1$jsbigdecimal)(b.confirmed));\n        unconfirmed = unconfirmed.add(new (0, $hgUW1$jsbigdecimal)(b.unconfirmed));\n    });\n    return {\n        confirmed: confirmed.getValue(),\n        unconfirmed: unconfirmed.getValue()\n    };\n}\nfunction $6f559318d8845d29$export$dec515296f176dbe(balances) {\n    let tokensBalance = {};\n    balances.forEach((b)=>{\n        for(const key in b)if (tokensBalance[key]) {\n            tokensBalance[key].confirmed = (BigInt(tokensBalance[key].confirmed) + BigInt(b[key].confirmed)).toString();\n            tokensBalance[key].unconfirmed = (BigInt(tokensBalance[key].unconfirmed) + BigInt(b[key].unconfirmed)).toString();\n        } else tokensBalance[key] = {\n            confirmed: b[key].confirmed,\n            unconfirmed: b[key].unconfirmed\n        };\n    });\n    return tokensBalance;\n}\nasync function $6f559318d8845d29$export$a2ed4b531376a5a4(addresses, fromHeight) {\n    let index = 0, i = 0, data = new Map(), maxHeight = fromHeight;\n    for (let address of addresses){\n        i++;\n        let txHistory = await (0, $884ce55f1db7e177$export$eaa49f0478d81b9d).getTransactionHistory(address);\n        if (txHistory && txHistory.length > 0) {\n            index = i;\n            for (let tx of txHistory)if (tx.height === 0 || tx.height > fromHeight) {\n                maxHeight = Math.max(maxHeight, tx.height);\n                data.set(tx.tx_hash, tx);\n            }\n        }\n    }\n    return {\n        index: index,\n        txs: data,\n        lastHeight: maxHeight\n    };\n}\nasync function $6f559318d8845d29$var$rescanAddressesHistory(addresses) {\n    let index = 0, i = 0, minHeight = Number.MAX_SAFE_INTEGER;\n    for (let address of addresses){\n        i++;\n        let txHistory = await (0, $884ce55f1db7e177$export$eaa49f0478d81b9d).getTransactionHistory(address);\n        if (!(0, $hgUW1$isNil)(txHistory)) {\n            index = i;\n            let heights = txHistory.filter((tx)=>tx.height > 0).map((h)=>h.height);\n            if (!(0, $hgUW1$isNil)(heights)) minHeight = Math.min(minHeight, ...heights);\n        }\n    }\n    return {\n        index: index > 0 ? index + 1 : 0,\n        height: minHeight == Number.MAX_SAFE_INTEGER ? 0 : minHeight\n    };\n}\nasync function $6f559318d8845d29$export$ef13479e8d3251d7(accountType, masterKey) {\n    if (accountType == 0) {\n        let defaultNexaAccountKey = $6f559318d8845d29$export$b3a12d67e2f5f8c9(masterKey, 0);\n        const defaultIndexes = await $6f559318d8845d29$export$4aeb2c92e53ab137(defaultNexaAccountKey);\n        if (defaultIndexes.rIndex < 0 && defaultIndexes.cIndex < 0) return 0;\n        else // account 0 was not empty\n        for(let index = 100;; index++){\n            const nexaAccountKey = $6f559318d8845d29$export$b3a12d67e2f5f8c9(masterKey, index);\n            const indexes = await $6f559318d8845d29$export$4aeb2c92e53ab137(nexaAccountKey);\n            if (indexes.rIndex < 0 && indexes.cIndex < 0) return index;\n        }\n    } else if (accountType == 1) {\n        // find the next unused vault\n        const lastUsedVault = await $6f559318d8845d29$var$findUsedVaultAccounts(masterKey);\n        return lastUsedVault + 1;\n    } else if (accountType == 2) {\n        // find the next unused dapp account\n        const lastUsedDappAccount = await $6f559318d8845d29$var$findUsedDappAccounts(masterKey);\n        return lastUsedDappAccount + 1;\n    } else throw new Error(\"Can not get next account index. Invalid accountType.\");\n}\nasync function $6f559318d8845d29$export$9c6f4f51acbc89b9(txHistory, myAddresses) {\n    let t = await (0, $884ce55f1db7e177$export$eaa49f0478d81b9d).getTransaction(txHistory.tx_hash);\n    let outputs = t.vout.filter((utxo)=>!(0, $hgUW1$isNil)(utxo.scriptPubKey.addresses));\n    let isOutgoing = t.vin.length > 0 && myAddresses.includes(t.vin[0].addresses[0]);\n    let isIncoming = !isOutgoing || outputs.every((utxo)=>myAddresses.includes(utxo.scriptPubKey.addresses[0]));\n    let isConfirmed = t.height > 0;\n    let txEntry = {};\n    txEntry.txId = t.txid;\n    txEntry.txIdem = t.txidem;\n    txEntry.height = isConfirmed ? t.height : 0;\n    txEntry.time = isConfirmed ? t.time : (0, $d78972a39a5ae94f$export$78d0476e8d098ba7)();\n    txEntry.fee = t.fee_satoshi;\n    if (isOutgoing && isIncoming) {\n        txEntry.state = 'both';\n        txEntry.value = \"0\";\n        txEntry.payTo = \"Payment to yourself\";\n    } else if (isIncoming) {\n        txEntry.state = 'incoming';\n        let utxos = outputs.filter((utxo)=>myAddresses.includes(utxo.scriptPubKey.addresses[0]));\n        let amount = new (0, $hgUW1$jsbigdecimal)(0);\n        utxos.forEach((utxo)=>{\n            amount = amount.add(new (0, $hgUW1$jsbigdecimal)(utxo.value_satoshi));\n        });\n        txEntry.value = amount.getValue();\n        txEntry.payTo = utxos[0].scriptPubKey.addresses[0];\n    } else if (isOutgoing) {\n        txEntry.state = 'outgoing';\n        let utxos = outputs.filter((utxo)=>!myAddresses.includes(utxo.scriptPubKey.addresses[0]));\n        let amount = new (0, $hgUW1$jsbigdecimal)(0);\n        utxos.forEach((utxo)=>{\n            amount = amount.add(new (0, $hgUW1$jsbigdecimal)(utxo.value_satoshi));\n        });\n        txEntry.value = amount.getValue();\n        txEntry.payTo = utxos[0].scriptPubKey.addresses[0];\n    }\n    let [txType, txGroup, tokenAmount, extraGroup] = $6f559318d8845d29$var$classifyTokenTransaction(t.vin, outputs, txEntry.state, myAddresses);\n    txEntry.txGroupType = txType;\n    txEntry.token = txGroup;\n    txEntry.tokenAmount = tokenAmount;\n    txEntry.extraGroup = extraGroup;\n    return txEntry;\n}\nfunction $6f559318d8845d29$var$classifyTokenTransaction(vin, vout, txState, myAddresses) {\n    let groupInputs = vin.filter((input)=>!(0, $d78972a39a5ae94f$export$c8733ae29fb53302)(input.group));\n    let groupOutputs = vout.filter((output)=>!(0, $d78972a39a5ae94f$export$c8733ae29fb53302)(output.scriptPubKey.group));\n    if ((0, $d78972a39a5ae94f$export$c8733ae29fb53302)(groupInputs) && (0, $d78972a39a5ae94f$export$c8733ae29fb53302)(groupOutputs)) return [\n        0,\n        \"none\",\n        \"0\",\n        \"none\"\n    ];\n    let myGroupInputs = groupInputs.filter((input)=>myAddresses.includes(input.addresses[0]));\n    let myGroupOutputs = groupOutputs.filter((output)=>myAddresses.includes(output.scriptPubKey.addresses[0]));\n    if ((0, $d78972a39a5ae94f$export$c8733ae29fb53302)(myGroupInputs) && (0, $d78972a39a5ae94f$export$c8733ae29fb53302)(myGroupOutputs)) return [\n        0,\n        \"none\",\n        \"0\",\n        \"none\"\n    ];\n    if ((0, $d78972a39a5ae94f$export$c8733ae29fb53302)(groupInputs)) {\n        let group = myGroupOutputs.find((output)=>BigInt(output.scriptPubKey.groupQuantity) < 0n)?.scriptPubKey.group ?? \"none\";\n        return [\n            1,\n            group,\n            \"0\",\n            \"none\"\n        ];\n    }\n    if ((0, $d78972a39a5ae94f$export$c8733ae29fb53302)(groupOutputs)) {\n        if (txState === 'incoming') return [\n            0,\n            \"none\",\n            \"0\",\n            \"none\"\n        ];\n        let inputs = myGroupInputs.filter((input)=>BigInt(input.groupQuantity) > 0n);\n        if (!(0, $d78972a39a5ae94f$export$c8733ae29fb53302)(inputs)) {\n            let amount = new (0, $hgUW1$jsbigdecimal)(0);\n            inputs.forEach((utxo)=>{\n                amount = amount.add(new (0, $hgUW1$jsbigdecimal)(utxo.groupQuantity));\n            });\n            let group = inputs[0].group;\n            let extraGroup = myGroupInputs.find((input)=>BigInt(input.groupQuantity) < 0n && inputs[0].group != input.group)?.group ?? \"none\";\n            return [\n                3,\n                group,\n                amount.getValue(),\n                extraGroup\n            ];\n        }\n        let group = myGroupInputs.find((input)=>BigInt(input.groupQuantity) < 0n)?.group ?? \"none\";\n        let extraGroup = myGroupInputs.find((input)=>BigInt(input.groupQuantity) < 0n && group != input.group)?.group ?? \"none\";\n        return [\n            3,\n            group,\n            \"0\",\n            extraGroup\n        ];\n    }\n    let tokenInputs = groupInputs.filter((input)=>BigInt(input.groupQuantity) > 0n);\n    let tokenOutputs = groupOutputs.filter((output)=>BigInt(output.scriptPubKey.groupQuantity) > 0n);\n    if ((0, $d78972a39a5ae94f$export$c8733ae29fb53302)(tokenInputs) && (0, $d78972a39a5ae94f$export$c8733ae29fb53302)(tokenOutputs)) {\n        let group = groupInputs.find((input)=>BigInt(input.groupQuantity) < 0n)?.group ?? \"none\";\n        let extraGroup = groupOutputs.find((output)=>BigInt(output.scriptPubKey.groupQuantity) < 0n && group != output.scriptPubKey.group)?.scriptPubKey.group ?? \"none\";\n        return [\n            4,\n            extraGroup !== 'none' ? extraGroup : group,\n            \"0\",\n            extraGroup !== 'none' ? group : extraGroup\n        ];\n    }\n    if ((0, $d78972a39a5ae94f$export$c8733ae29fb53302)(tokenInputs)) {\n        let group = tokenOutputs[0].scriptPubKey.group;\n        let amount = new (0, $hgUW1$jsbigdecimal)(0);\n        tokenOutputs.forEach((utxo)=>{\n            amount = amount.add(new (0, $hgUW1$jsbigdecimal)(utxo.scriptPubKey.groupQuantity));\n        });\n        let extraGroup = groupInputs.find((input)=>BigInt(input.groupQuantity) < 0n && group != input.group)?.group ?? \"none\";\n        return [\n            2,\n            group,\n            amount.getValue(),\n            extraGroup\n        ];\n    }\n    if ((0, $d78972a39a5ae94f$export$c8733ae29fb53302)(tokenOutputs)) {\n        let group = tokenInputs[0].group;\n        let amount = new (0, $hgUW1$jsbigdecimal)(0);\n        tokenInputs.forEach((utxo)=>{\n            amount = amount.add(new (0, $hgUW1$jsbigdecimal)(utxo.groupQuantity));\n        });\n        let extraGroup = groupInputs.find((input)=>BigInt(input.groupQuantity) < 0n && group != input.group)?.group ?? \"none\";\n        return [\n            3,\n            group,\n            amount.getValue(),\n            extraGroup\n        ];\n    }\n    let outQuantitySum = tokenOutputs.map((output)=>BigInt(output.scriptPubKey.groupQuantity)).reduce((a, b)=>a + b, 0n);\n    let inQuantitySum = tokenInputs.map((input)=>BigInt(input.groupQuantity)).reduce((a, b)=>a + b, 0n);\n    if (outQuantitySum > inQuantitySum) {\n        let group = tokenOutputs[0].scriptPubKey.group;\n        let extraGroup = groupInputs.find((input)=>BigInt(input.groupQuantity) < 0n && group != input.group)?.group ?? \"none\";\n        return [\n            2,\n            group,\n            (outQuantitySum - inQuantitySum).toString(),\n            extraGroup\n        ];\n    }\n    if (inQuantitySum > outQuantitySum) {\n        let group = tokenInputs[0].group;\n        let extraGroup = groupInputs.find((input)=>BigInt(input.groupQuantity) < 0n && group != input.group)?.group ?? \"none\";\n        return [\n            3,\n            group,\n            (inQuantitySum - outQuantitySum).toString(),\n            extraGroup\n        ];\n    }\n    let group = tokenOutputs[0].scriptPubKey.group;\n    let amount = \"\";\n    if (txState === 'incoming') amount = tokenOutputs.filter((output)=>myAddresses.includes(output.scriptPubKey.addresses[0])).map((output)=>BigInt(output.scriptPubKey.groupQuantity)).reduce((a, b)=>a + b, 0n).toString();\n    else if (txState === 'outgoing') amount = tokenOutputs.filter((output)=>!myAddresses.includes(output.scriptPubKey.addresses[0])).map((output)=>BigInt(output.scriptPubKey.groupQuantity)).reduce((a, b)=>a + b, 0n).toString();\n    else amount = \"0\";\n    return [\n        5,\n        group,\n        amount,\n        \"none\"\n    ];\n}\n\n\n\n\n\nclass $441c371114e3ba96$export$94f569bf4eb0f6f6 {\n    static getAllKeys(keys) {\n        return keys.receiveKeys.concat(keys.changeKeys);\n    }\n    static getAllAddresses(keys) {\n        return $441c371114e3ba96$export$94f569bf4eb0f6f6.getAllKeys(keys).map((key)=>key.address);\n    }\n}\n\n\n\n\n\n/** Maximum number of inputs/outputs allowed in a single transaction */ const $3e8a638e2275dab4$var$MAX_INPUTS_OUTPUTS = 250;\nasync function $3e8a638e2275dab4$export$afd979971a55acfc(txBuilder, keys, totalTxValue, options, spentOutpoints) {\n    let rKeys = keys.receiveKeys.filter((k)=>BigInt(k.balance) > 0n);\n    let cKeys = keys.changeKeys.filter((k)=>BigInt(k.balance) > 0n);\n    let allKeys = rKeys.concat(cKeys);\n    if ((0, $d78972a39a5ae94f$export$c8733ae29fb53302)(allKeys)) throw new Error(\"Not enough Nexa balance.\");\n    let usedKeys = new Map();\n    let origAmount = options.isConsolidate ? 0 : Number(totalTxValue);\n    for (let key of allKeys){\n        let utxos = await (0, $884ce55f1db7e177$export$eaa49f0478d81b9d).getNexaUtxos(key.address);\n        for (let utxo of utxos){\n            if (spentOutpoints && spentOutpoints.has(utxo.outpoint_hash)) continue;\n            let input = {\n                outpoint: utxo.outpoint_hash,\n                address: key.address,\n                satoshis: utxo.value,\n                templateData: options.templateData\n            };\n            txBuilder.from(input);\n            if (spentOutpoints) spentOutpoints.add(utxo.outpoint_hash);\n            if (!usedKeys.has(key.address)) usedKeys.set(key.address, key.key.privateKey);\n            if (options.isConsolidate) {\n                txBuilder.change(options.toChange ?? keys.receiveKeys[keys.receiveKeys.length - 1].address);\n                if (txBuilder.transaction.inputs.length > $3e8a638e2275dab4$var$MAX_INPUTS_OUTPUTS) return Array.from(usedKeys.values());\n            } else {\n                let tx = txBuilder.transaction;\n                if (tx.inputs.length > $3e8a638e2275dab4$var$MAX_INPUTS_OUTPUTS) throw new Error(\"Too many inputs. Consider consolidate transactions or reduce the send amount.\");\n                let unspent = tx.getUnspentValue();\n                if (unspent < 0n) continue;\n                if (unspent == 0n && options.feeFromAmount) {\n                    let txFee = tx.estimateRequiredFee();\n                    tx.updateOutputAmount(0, origAmount - txFee);\n                    return Array.from(usedKeys.values());\n                }\n                const changeAddress = options.toChange ?? (keys.changeKeys.length > 0 ? keys.changeKeys[keys.changeKeys.length - 1].address : keys.receiveKeys[keys.receiveKeys.length - 1].address);\n                txBuilder.change(changeAddress);\n                if (options.feeFromAmount) {\n                    let hasChange = tx.getChangeOutput();\n                    let txFee = tx.estimateRequiredFee();\n                    tx.updateOutputAmount(0, origAmount - txFee);\n                    // edge case where change added after update\n                    if (!hasChange && tx.getChangeOutput()) {\n                        txFee = tx.estimateRequiredFee();\n                        tx.updateOutputAmount(0, origAmount - txFee);\n                    }\n                }\n                // check again after change output manipulation\n                if (tx.getUnspentValue() < tx.estimateRequiredFee()) continue;\n                return Array.from(usedKeys.values());\n            }\n        }\n    }\n    if (options.isConsolidate) {\n        if (usedKeys.size > 0) return Array.from(usedKeys.values());\n        throw new Error(\"Not enough Nexa balance.\");\n    }\n    let err = {\n        errorMsg: \"Not enough Nexa balance.\",\n        amount: (0, $hgUW1$UnitUtils).formatNEXA(txBuilder.transaction.outputs[0].value),\n        fee: (0, $hgUW1$UnitUtils).formatNEXA(txBuilder.transaction.estimateRequiredFee())\n    };\n    throw new Error(JSON.stringify(err));\n}\nasync function $3e8a638e2275dab4$export$931e37acdaa22dcf(txBuilder, keys, token, outTokenAmount, spentOutpoints) {\n    let allKeys = keys.receiveKeys.concat(keys.changeKeys);\n    if ((0, $d78972a39a5ae94f$export$c8733ae29fb53302)(allKeys)) throw new Error(\"Not enough token balance.\");\n    let usedKeys = new Map();\n    let inTokenAmount = 0n;\n    for (let key of allKeys){\n        let utxos = await (0, $884ce55f1db7e177$export$eaa49f0478d81b9d).getTokenUtxos(key.address, token);\n        for (let utxo of utxos){\n            if (utxo.token_amount < 0) continue;\n            if (spentOutpoints && spentOutpoints.has(utxo.outpoint_hash)) continue;\n            txBuilder.from({\n                outpoint: utxo.outpoint_hash,\n                address: key.address,\n                satoshis: utxo.value,\n                groupId: utxo.group,\n                groupAmount: BigInt(utxo.token_amount)\n            });\n            if (spentOutpoints) spentOutpoints.add(utxo.outpoint_hash);\n            inTokenAmount = inTokenAmount + BigInt(utxo.token_amount);\n            if (!usedKeys.has(key.address)) usedKeys.set(key.address, key.key.privateKey);\n            if (inTokenAmount > (0, $d78972a39a5ae94f$export$8ba128bc85947a2a)) throw new Error(\"Token inputs exceeded max amount. Consider sending in small chunks\");\n            if (txBuilder.transaction.inputs.length > $3e8a638e2275dab4$var$MAX_INPUTS_OUTPUTS) throw new Error(\"Too many inputs. Consider consolidating transactions or reduce the send amount.\");\n            if (inTokenAmount == outTokenAmount) return Array.from(usedKeys.values());\n            if (inTokenAmount > outTokenAmount) {\n                const tokenChangeAddress = keys.changeKeys.length > 0 ? keys.changeKeys[keys.changeKeys.length - 1].address : keys.receiveKeys[keys.receiveKeys.length - 1].address;\n                txBuilder.to(tokenChangeAddress, (0, $hgUW1$Transaction).DUST_AMOUNT, token, inTokenAmount - outTokenAmount);\n                return Array.from(usedKeys.values());\n            }\n        }\n    }\n    throw new Error(\"Not enough token balance\");\n}\nasync function $3e8a638e2275dab4$export$d7f2b844e1d59768(txBuilder, keys, opReturnData, network, spentOutpoints) {\n    // TODO validate opreturn data\n    const allKeys = (0, $441c371114e3ba96$export$94f569bf4eb0f6f6).getAllKeys(keys);\n    let outpoint = '';\n    let usedKeys = [];\n    let signKey = undefined;\n    for (let key of allKeys){\n        let utxos = await (0, $884ce55f1db7e177$export$eaa49f0478d81b9d).getNexaUtxos(key.address);\n        for (let utxo of utxos){\n            if (spentOutpoints && spentOutpoints.has(utxo.outpoint_hash)) continue;\n            txBuilder.from({\n                outpoint: utxo.outpoint_hash,\n                address: key.address,\n                satoshis: utxo.value\n            });\n            if (spentOutpoints) spentOutpoints.add(utxo.outpoint_hash);\n            if ((0, $d78972a39a5ae94f$export$c8733ae29fb53302)(outpoint)) {\n                outpoint = utxo.outpoint_hash;\n                let id = (0, $hgUW1$GroupToken).findGroupId(outpoint, Buffer.from(opReturnData, 'hex'), (0, $hgUW1$GroupToken).authFlags.ACTIVE_FLAG_BITS);\n                const groupId = new (0, $hgUW1$Address)(id.hashBuffer, network, (0, $hgUW1$AddressType).GroupIdAddress).toString();\n                txBuilder.to(keys.receiveKeys.at(-1).address, (0, $hgUW1$Transaction).DUST_AMOUNT, groupId, (0, $hgUW1$GroupToken).authFlags.ACTIVE_FLAG_BITS | id.nonce);\n                signKey = key.key.privateKey;\n                usedKeys.push(signKey);\n                return usedKeys;\n            }\n        }\n    }\n    throw new Error(\"Not enough Nexa balance.\");\n}\nasync function $3e8a638e2275dab4$export$48a48877d6df17e9(txBuilder, keys, outpoint) {\n    let utxo = await (0, $884ce55f1db7e177$export$eaa49f0478d81b9d).getUtxo(outpoint);\n    let address = utxo.addresses[0];\n    txBuilder.from({\n        outpoint: outpoint,\n        address: address,\n        satoshis: utxo.amount\n    });\n    let allKeys = (0, $441c371114e3ba96$export$94f569bf4eb0f6f6).getAllKeys(keys);\n    let addrKey = allKeys.find((k)=>k.address === address);\n    if (!addrKey) throw new Error('UTXO associated key not found in the wallet');\n    return [\n        addrKey.key.privateKey\n    ];\n}\nasync function $3e8a638e2275dab4$export$1dfa5d829fc95097(txBuilder, keys, token, perm, subgroup = '', subgroupAddr = '', quantity, spentOutpoints) {\n    let allKeys = (0, $441c371114e3ba96$export$94f569bf4eb0f6f6).getAllKeys(keys);\n    for (let key of allKeys){\n        let utxos = await (0, $884ce55f1db7e177$export$eaa49f0478d81b9d).getTokenUtxos(key.address, token);\n        for (let utxo of utxos){\n            if (!(0, $59b5736a17e7320d$export$7f7cffd29bf2d96d)(utxo.token_amount, perm)) continue;\n            if (spentOutpoints && spentOutpoints.has(utxo.outpoint_hash)) continue;\n            txBuilder.from({\n                outpoint: utxo.outpoint_hash,\n                address: key.address,\n                satoshis: utxo.value\n            });\n            if (spentOutpoints) spentOutpoints.add(utxo.outpoint_hash);\n            if (perm === 'subgroup') {\n                const subgroupQuantity = quantity ?? (0, $59b5736a17e7320d$export$636fb0b03b94ac81)(utxo.token_amount, false);\n                txBuilder.to(subgroupAddr, (0, $hgUW1$Transaction).DUST_AMOUNT, subgroup, subgroupQuantity);\n            }\n            // if renew flag included, we don't want to burn it\n            if ((0, $hgUW1$GroupToken).allowsRenew(BigInt.asUintN(64, BigInt(utxo.token_amount)))) {\n                const authChangeAddress = keys.changeKeys.length > 0 ? keys.changeKeys[keys.changeKeys.length - 1].address : keys.receiveKeys[keys.receiveKeys.length - 1].address;\n                txBuilder.to(authChangeAddress, (0, $hgUW1$Transaction).DUST_AMOUNT, token, (0, $59b5736a17e7320d$export$636fb0b03b94ac81)(utxo.token_amount));\n            }\n            return [\n                key.key.privateKey\n            ];\n        }\n    }\n    throw new Error(\"The requested authority not found\");\n}\nasync function $3e8a638e2275dab4$export$fc6e64edb1452fc7(txBuilder, keys, token, amount, parentToken, spentOutpoints) {\n    const privateKeys = [];\n    const allKeys = (0, $441c371114e3ba96$export$94f569bf4eb0f6f6).getAllKeys(keys);\n    // Determine which token to look for authority\n    const authTokenId = parentToken || token;\n    const isSubgroupMint = !!parentToken;\n    // Find and add mint authority\n    let mintAuthorityFound = false;\n    for (let key of allKeys){\n        if (mintAuthorityFound) break;\n        let authUtxos = await (0, $884ce55f1db7e177$export$eaa49f0478d81b9d).getTokenUtxos(key.address, authTokenId);\n        for (let utxo of authUtxos){\n            if (!(0, $59b5736a17e7320d$export$7f7cffd29bf2d96d)(utxo.token_amount, 'mint')) continue;\n            // Skip if already spent\n            if (spentOutpoints && spentOutpoints.has(utxo.outpoint_hash)) continue;\n            // Add mint authority as input\n            txBuilder.from({\n                outpoint: utxo.outpoint_hash,\n                address: key.address,\n                satoshis: utxo.value\n            });\n            if (spentOutpoints) spentOutpoints.add(utxo.outpoint_hash);\n            // Create the minted tokens output\n            const mintAddress = keys.receiveKeys[keys.receiveKeys.length - 1].address;\n            txBuilder.to(mintAddress, (0, $hgUW1$Transaction).DUST_AMOUNT, token, amount);\n            // Preserve the mint authority for future use\n            if ((0, $hgUW1$GroupToken).allowsRenew(BigInt.asUintN(64, BigInt(utxo.token_amount)))) {\n                const authChangeAddress = keys.changeKeys.length > 0 ? keys.changeKeys[keys.changeKeys.length - 1].address : keys.receiveKeys[keys.receiveKeys.length - 1].address;\n                txBuilder.to(authChangeAddress, (0, $hgUW1$Transaction).DUST_AMOUNT, authTokenId, (0, $59b5736a17e7320d$export$636fb0b03b94ac81)(utxo.token_amount));\n            }\n            privateKeys.push(key.key.privateKey);\n            mintAuthorityFound = true;\n            break;\n        }\n    }\n    if (!mintAuthorityFound) throw new Error(`Mint authority not found for token ${authTokenId}`);\n    return privateKeys;\n}\nasync function $3e8a638e2275dab4$export$661377a8795b235c(txBuilder, keys, token, amount, parentToken, spentOutpoints) {\n    const privateKeys = [];\n    const allKeys = (0, $441c371114e3ba96$export$94f569bf4eb0f6f6).getAllKeys(keys);\n    const authTokenId = parentToken || token;\n    // First, find and add melt authority\n    let meltAuthorityFound = false;\n    for (let key of allKeys){\n        if (meltAuthorityFound) break;\n        let authUtxos = await (0, $884ce55f1db7e177$export$eaa49f0478d81b9d).getTokenUtxos(key.address, authTokenId);\n        for (let utxo of authUtxos){\n            if (!(0, $59b5736a17e7320d$export$7f7cffd29bf2d96d)(utxo.token_amount, 'melt')) continue;\n            // Skip if already spent\n            if (spentOutpoints && spentOutpoints.has(utxo.outpoint_hash)) continue;\n            // Add melt authority as input\n            txBuilder.from({\n                outpoint: utxo.outpoint_hash,\n                address: key.address,\n                satoshis: utxo.value\n            });\n            if (spentOutpoints) spentOutpoints.add(utxo.outpoint_hash);\n            // Preserve the melt authority for future use\n            if ((0, $hgUW1$GroupToken).allowsRenew(BigInt.asUintN(64, BigInt(utxo.token_amount)))) {\n                const authChangeAddress = keys.changeKeys.length > 0 ? keys.changeKeys[keys.changeKeys.length - 1].address : keys.receiveKeys[keys.receiveKeys.length - 1].address;\n                txBuilder.to(authChangeAddress, (0, $hgUW1$Transaction).DUST_AMOUNT, authTokenId, (0, $59b5736a17e7320d$export$636fb0b03b94ac81)(utxo.token_amount));\n            }\n            privateKeys.push(key.key.privateKey);\n            meltAuthorityFound = true;\n            break;\n        }\n    }\n    if (!meltAuthorityFound) throw new Error(\"Melt authority not found for token\");\n    // Now find and add token UTXOs to melt\n    let inTokenAmount = 0n;\n    for (let key of allKeys){\n        let utxos = await (0, $884ce55f1db7e177$export$eaa49f0478d81b9d).getTokenUtxos(key.address, token);\n        for (let utxo of utxos){\n            // Skip authorities (negative amounts)\n            if (utxo.token_amount < 0) continue;\n            // Skip if already spent\n            if (spentOutpoints && spentOutpoints.has(utxo.outpoint_hash)) continue;\n            // Add token UTXO as input\n            txBuilder.from({\n                outpoint: utxo.outpoint_hash,\n                address: key.address,\n                satoshis: utxo.value,\n                groupId: utxo.group,\n                groupAmount: BigInt(utxo.token_amount)\n            });\n            if (spentOutpoints) spentOutpoints.add(utxo.outpoint_hash);\n            inTokenAmount += BigInt(utxo.token_amount);\n            if (!privateKeys.includes(key.key.privateKey)) privateKeys.push(key.key.privateKey);\n            // Check if we have enough tokens to melt\n            if (inTokenAmount >= amount) {\n                // Create change output if melting less than full amount\n                if (inTokenAmount > amount) {\n                    const changeAddress = keys.changeKeys.length > 0 ? keys.changeKeys[keys.changeKeys.length - 1].address : keys.receiveKeys[keys.receiveKeys.length - 1].address;\n                    txBuilder.to(changeAddress, (0, $hgUW1$Transaction).DUST_AMOUNT, token, inTokenAmount - amount);\n                }\n                return privateKeys;\n            }\n        }\n    }\n    throw new Error(`Not enough token balance to melt. Required: ${amount}, Available: ${inTokenAmount}`);\n}\nasync function $3e8a638e2275dab4$export$28a843ca046a6b3f(txBuilder, keys, token, perms, toAddr, spentOutpoints) {\n    let allKeys = (0, $441c371114e3ba96$export$94f569bf4eb0f6f6).getAllKeys(keys);\n    let usedKeys = [];\n    let reqiredPerms = new Set(perms);\n    reqiredPerms.add('authorise');\n    for (let key of allKeys){\n        let utxos = await (0, $884ce55f1db7e177$export$eaa49f0478d81b9d).getTokenUtxos(key.address, token);\n        for (let utxo of utxos){\n            if (utxo.token_amount > 0) continue;\n            if (spentOutpoints && spentOutpoints.has(utxo.outpoint_hash)) continue;\n            let found = false;\n            for (let perm of reqiredPerms)if ((0, $59b5736a17e7320d$export$7f7cffd29bf2d96d)(utxo.token_amount, perm)) {\n                reqiredPerms.delete(perm);\n                found = true;\n            }\n            if (!found) continue;\n            txBuilder.from({\n                outpoint: utxo.outpoint_hash,\n                address: key.address,\n                satoshis: utxo.value\n            });\n            usedKeys.push(key.key.privateKey);\n            if (spentOutpoints) spentOutpoints.add(utxo.outpoint_hash);\n            // duplicate\n            const duplicateAddress = toAddr != null ? toAddr : keys.changeKeys.length > 0 ? keys.changeKeys[keys.changeKeys.length - 1].address : keys.receiveKeys[keys.receiveKeys.length - 1].address;\n            txBuilder.to(duplicateAddress, (0, $hgUW1$Transaction).DUST_AMOUNT, token, (0, $59b5736a17e7320d$export$636fb0b03b94ac81)(utxo.token_amount));\n            if (reqiredPerms.size === 0) return usedKeys;\n        }\n    }\n    throw new Error(\"The required authorities not found\");\n}\nfunction $3e8a638e2275dab4$export$eabd1dee7adcf71(txHex, network) {\n    const tokenOutputs = [];\n    try {\n        const transaction = new (0, $hgUW1$Transaction)(txHex);\n        for (const output of transaction.outputs)if (output.type !== 0 && output.scriptPubKey.chunks[0]?.opcodenum >= 32) {\n            const tokenIdHex = output.scriptPubKey.chunks[0].buf?.toString('hex');\n            if (tokenIdHex && output.scriptPubKey.chunks[1]?.buf) {\n                const tokenAddress = (0, $hgUW1$Address).fromObject({\n                    data: tokenIdHex,\n                    network: network.toString(),\n                    type: (0, $hgUW1$AddressType).GroupIdAddress\n                });\n                if (tokenAddress !== null) {\n                    const tokenAddressStr = tokenAddress.toString();\n                    // Extract token amount\n                    const tokenAmount = (0, $hgUW1$BNExtended).fromScriptNumBuffer(output.scriptPubKey.chunks[1].buf, false, 8).toBigInt();\n                    tokenOutputs.push({\n                        tokenId: tokenAddressStr,\n                        amount: tokenAmount.toString()\n                    });\n                }\n            }\n        }\n    } catch (error) {\n        console.warn('Failed to extract token data from transaction:', error);\n    }\n    return tokenOutputs;\n}\n\n\n\n\n\n\n\nclass $329d65a0aed426f1$export$bba690fb5c12ba04 {\n    /**\n     * Creates a new TransactionCreator instance\n     * @param tx Optional existing TransactionBuilder, hex string, or buffer\n     */ constructor(tx){\n        /** Array of async functions to execute when building the transaction */ this._builder = [];\n        /** Total value of NEXA being sent in this transaction */ this._totalValue = BigInt(0);\n        /** Network this transaction will be broadcast on */ this._network = (0, $hgUW1$Networks).mainnet;\n        /** Transaction options for customizing behavior */ this._txOptions = {};\n        /** Set of outpoints already spent in this transaction to prevent double-spending */ this._spentOutpoints = new Set();\n        if (tx instanceof (0, $hgUW1$TransactionBuilder)) this.transactionBuilder = tx;\n        this.tokens = new Set();\n        this.transactionBuilder = new (0, $hgUW1$TransactionBuilder)();\n    }\n    /**\n     * Parse transaction from hex string with common logic\n     * @param tx Transaction hex string\n     * @returns This instance for chaining\n     */ parseTxHex(tx) {\n        // Clear any existing builder operations since we're dealing with a pre-built transaction\n        this.builder = [];\n        // Add the parsing operation to the builder queue\n        this.builder.push(async ()=>{\n            try {\n                const txBuilder = new (0, $hgUW1$TransactionBuilder)(tx);\n                const newTxBuilder = new (0, $hgUW1$TransactionBuilder)();\n                const oldInputs = txBuilder.transaction.inputs;\n                // Reconstruct inputs with proper script template data if needed\n                for(let i = 0; i < oldInputs.length; i++){\n                    const input = oldInputs[i];\n                    const utxo = await (0, $884ce55f1db7e177$export$eaa49f0478d81b9d).getUtxo(input.outpoint.toString('hex'));\n                    const scriptPubkey = (0, $hgUW1$Script).fromHex(utxo.scriptpubkey);\n                    if (scriptPubkey.isScriptTemplateOut()) {\n                        const scriptSig = input.scriptSig;\n                        newTxBuilder.transaction.addInput(new (0, $hgUW1$ScriptTemplateInput)({\n                            amount: input.amount,\n                            outpoint: input.outpoint.toString('hex'),\n                            scriptSig: input.scriptSig,\n                            templateData: {\n                                templateScript: (0, $hgUW1$BufferUtils).isHashBuffer(scriptPubkey.getTemplateHash()) ? (0, $hgUW1$Script).fromBuffer(scriptSig.chunks[0].buf) : (0, $hgUW1$Script).empty(),\n                                constraintScript: (0, $hgUW1$BufferUtils).isHashBuffer(scriptPubkey.getConstraintHash()) ? (0, $hgUW1$Script).fromBuffer(scriptSig.chunks[1].buf) : (0, $hgUW1$Opcode).OP_FALSE\n                            },\n                            output: {\n                                type: input.type,\n                                value: utxo.amount,\n                                scriptPubKey: utxo.scriptpubkey\n                            }\n                        }));\n                    } else // For non-template inputs, add them normally\n                    newTxBuilder.from({\n                        outpoint: input.outpoint.toString('hex'),\n                        satoshis: input.amount,\n                        address: utxo.addresses[0],\n                        scriptPubKey: utxo.scriptpubkey\n                    });\n                    // Hook for subclasses to handle input-specific logic (like key management)\n                    await this.handleParsedInput(input, utxo, i);\n                }\n                // Copy the outputs from the original transaction\n                newTxBuilder.transaction.outputs = txBuilder.transaction.outputs;\n                this.transactionBuilder = newTxBuilder;\n                // Hook for subclasses to perform post-processing\n                await this.handleParsingComplete();\n            } catch (error) {\n                console.error('parseTxHex: Error parsing transaction:', error);\n                throw error;\n            }\n        });\n        return this;\n    }\n    /**\n     * Hook for subclasses to handle individual parsed inputs\n     * @param input The original input from the transaction\n     * @param utxo UTXO data for this input\n     * @param index Input index\n     */ async handleParsedInput(input, utxo, index) {\n    // Default implementation does nothing - subclasses can override\n    }\n    /**\n     * Hook for subclasses to perform post-processing after parsing is complete\n     */ async handleParsingComplete() {\n    // Default implementation does nothing - subclasses can override\n    }\n    /**\n     * Sets the network for this transaction\n     * @param network Network name or Networkish object\n     * @returns This instance for chaining\n     */ onNetwork(network) {\n        this.network = (0, $hgUW1$Networks).get(network);\n        return this;\n    }\n    /** Gets transaction options */ get txOptions() {\n        return this._txOptions;\n    }\n    /** Sets transaction options */ set txOptions(value) {\n        this._txOptions = value;\n    }\n    /** Gets the network for this transaction */ get network() {\n        return this._network;\n    }\n    /** Sets the network for this transaction */ set network(value) {\n        this._network = value;\n    }\n    /** Gets the builder function array */ get builder() {\n        return this._builder;\n    }\n    /** Sets the builder function array */ set builder(value) {\n        this._builder = value;\n    }\n    /** Gets the underlying transaction builder */ get transactionBuilder() {\n        return this._transactionBuilder;\n    }\n    /** Sets the underlying transaction builder */ set transactionBuilder(value) {\n        this._transactionBuilder = value;\n    }\n    /** Gets the set of token actions */ get tokens() {\n        return this._tokens;\n    }\n    /** Sets the set of token actions */ set tokens(value) {\n        this._tokens = value;\n    }\n    /** Gets the total NEXA value being sent */ get totalValue() {\n        return this._totalValue;\n    }\n    /** Sets the total NEXA value being sent */ set totalValue(value) {\n        this._totalValue = value;\n    }\n    /** Gets the set of spent outpoints */ get spentOutpoints() {\n        return this._spentOutpoints;\n    }\n    /**\n     * Updates the spent outpoints set with current transaction inputs\n     * @returns Set of outpoint hashes that are already spent\n     */ updateSpentOutpoints() {\n        this._spentOutpoints.clear();\n        for (const input of this.transactionBuilder.transaction.inputs)this._spentOutpoints.add(input.outpoint.toString('hex'));\n        return this._spentOutpoints;\n    }\n    /**\n     * Validates and creates a token action\n     * @param toAddr Destination address\n     * @param amount Amount to send\n     * @param token Token ID\n     * @param action Action type (mint, melt, send, etc.)\n     * @param parent Optional parent token ID (for NFT/SFT minting)\n     * @throws Error if validation fails\n     */ tokenAction(toAddr, amount, token, action, parent) {\n        // Validate destokenActiontination address\n        if (!(0, $6f559318d8845d29$export$8d986bd2866fe6ab)(toAddr, this.network) && !(0, $6f559318d8845d29$export$8d986bd2866fe6ab)(toAddr, this.network, (0, $hgUW1$AddressType).PayToPublicKeyHash)) throw new Error('Invalid Address.');\n        // Validate amount ranges\n        if (token && BigInt(amount) < 1n || !token && (0, $hgUW1$parseInt)(amount) < (0, $hgUW1$Transaction).DUST_AMOUNT) throw new Error(\"The amount is too low.\");\n        if (token && BigInt(amount) > (0, $d78972a39a5ae94f$export$8ba128bc85947a2a) || !token && (0, $hgUW1$parseInt)(amount) > (0, $hgUW1$Transaction).MAX_MONEY) throw new Error(\"The amount is too high.\");\n        // Validate token ID\n        if (!(0, $6f559318d8845d29$export$8d986bd2866fe6ab)(token, this.network, (0, $hgUW1$AddressType).GroupIdAddress)) throw new Error('Invalid Token ID');\n        // Ensure tokens are sent to script template addresses\n        if ((0, $hgUW1$Address).getOutputType(toAddr) === 0) throw new Error('Token must be sent to script template address');\n        // For mint and melt operations, don't add output here - specialized functions will handle it\n        if (action !== 'mint' && action !== 'melt') // Add output to transaction for regular token operations (send, etc.)\n        this.transactionBuilder.to(toAddr, (0, $hgUW1$Transaction).DUST_AMOUNT, token, BigInt(amount));\n        // Record the token action\n        this.tokens.add({\n            token: token,\n            parentToken: parent,\n            amount: BigInt(amount),\n            action: action\n        });\n    }\n    /**\n     * Configures transaction to consolidate UTXOs to a single address\n     * @param toAddr Address to consolidate funds to\n     * @returns This instance for chaining\n     */ consolidate(toAddr) {\n        this.builder.push(async ()=>{\n            if (!(0, $6f559318d8845d29$export$8d986bd2866fe6ab)(toAddr, this.network) && !(0, $6f559318d8845d29$export$8d986bd2866fe6ab)(toAddr, this.network, (0, $hgUW1$AddressType).PayToPublicKeyHash)) throw new Error('Invalid Address.');\n            this._txOptions.isConsolidate = true;\n            this._txOptions.toChange = toAddr;\n        });\n        return this;\n    }\n    /**\n     * Configures transaction to deduct fee from the send amount\n     * @returns This instance for chaining\n     */ feeFromAmount() {\n        this.builder.push(async ()=>{\n            this._txOptions.feeFromAmount = true;\n        });\n        return this;\n    }\n    /**\n     * Adds a token send operation to the transaction\n     * @param toAddr Destination address\n     * @param amount Amount of tokens to send\n     * @param token Token ID\n     * @param dustAmount Optional dust amount for the output (defaults to Transaction.DUST_AMOUNT)\n     * @returns This instance for chaining\n     */ sendToToken(toAddr, amount, token, dustAmount = (0, $hgUW1$Transaction).DUST_AMOUNT) {\n        this.builder.push(async ()=>{\n            // Validate destination address\n            if (!(0, $6f559318d8845d29$export$8d986bd2866fe6ab)(toAddr, this.network) && !(0, $6f559318d8845d29$export$8d986bd2866fe6ab)(toAddr, this.network, (0, $hgUW1$AddressType).PayToPublicKeyHash)) throw new Error('Invalid Address.');\n            // Validate amount ranges\n            if (BigInt(amount) < 1n) throw new Error(\"The amount is too low.\");\n            if (BigInt(amount) > (0, $d78972a39a5ae94f$export$8ba128bc85947a2a)) throw new Error(\"The amount is too high.\");\n            // Validate token ID\n            if (!(0, $6f559318d8845d29$export$8d986bd2866fe6ab)(token, this.network, (0, $hgUW1$AddressType).GroupIdAddress)) throw new Error('Invalid Token ID');\n            // Ensure tokens are sent to script template addresses\n            if ((0, $hgUW1$Address).getOutputType(toAddr) === 0) throw new Error('Token must be sent to script template address');\n            // Add output to transaction with configurable dust amount\n            this.transactionBuilder.to(toAddr, dustAmount, token, BigInt(amount));\n            // Record the token action\n            this.tokens.add({\n                token: token,\n                amount: BigInt(amount),\n                action: 'send'\n            });\n        });\n        return this;\n    }\n    /**\n     * Adds a NEXA send operation to the transaction\n     * @param toAddr Destination address\n     * @param amount Amount of NEXA to send\n     * @returns This instance for chaining\n     */ sendTo(toAddr, amount) {\n        this.builder.push(async ()=>{\n            if (!(0, $6f559318d8845d29$export$8d986bd2866fe6ab)(toAddr, this.network) && !(0, $6f559318d8845d29$export$8d986bd2866fe6ab)(toAddr, this.network, (0, $hgUW1$AddressType).PayToPublicKeyHash)) throw new Error('Invalid Address.');\n            this.transactionBuilder.to(toAddr, amount);\n            this.totalValue = BigInt(this.totalValue + amount);\n        });\n        return this;\n    }\n    /**\n     * Adds a token authority renewal operation\n     * @param token Token ID to renew authority for\n     * @param perms Permissions to renew\n     * @param toAddr\n     * @returns This instance for chaining\n     */ renewAuthority(token, perms, toAddr) {\n        this.builder.push(async ()=>{\n            if (toAddr != null) {\n                if (!(0, $6f559318d8845d29$export$8d986bd2866fe6ab)(toAddr, this.network) && !(0, $6f559318d8845d29$export$8d986bd2866fe6ab)(toAddr, this.network, (0, $hgUW1$AddressType).PayToPublicKeyHash)) throw new Error('Invalid Address.');\n            }\n            this.tokens.add({\n                token: token,\n                action: 'renew',\n                amount: BigInt((0, $hgUW1$Transaction).DUST_AMOUNT),\n                parentToken: undefined,\n                extraData: {\n                    perms: perms,\n                    address: toAddr\n                }\n            });\n        });\n        return this;\n    }\n    /**\n     * Adds a token authority deletion operation\n     * @param token Token ID to delete authority for\n     * @param outpoint Outpoint of the authority to delete\n     * @returns This instance for chaining\n     */ deleteAuthority(token, outpoint) {\n        this.builder.push(async ()=>{\n            this.tokens.add({\n                token: token,\n                action: 'delete',\n                amount: BigInt((0, $hgUW1$Transaction).DUST_AMOUNT),\n                parentToken: undefined,\n                extraData: {\n                    outpoint: outpoint\n                }\n            });\n        });\n        return this;\n    }\n    /**\n     * Creates a legacy token (not implemented)\n     * @returns This instance for chaining\n     */ legacyToken(name, ticker, decimals, docUrl, docHash) {\n        this.builder.push(async ()=>{\n            const opReturn = (0, $hgUW1$ScriptFactory).buildTokenDescriptionLegacy(ticker, name, docUrl, docHash, decimals);\n            this.transactionBuilder.addData(opReturn, true);\n            this.tokens.add({\n                action: 'group',\n                amount: BigInt((0, $hgUW1$Transaction).DUST_AMOUNT),\n                extraData: {\n                    opReturnData: opReturn.toHex()\n                }\n            });\n        });\n        return this;\n    }\n    /**\n     * Creates a legacy group (not implemented)\n     * @returns This instance for chaining\n     */ legacyGroup(name, ticker, docUrl, docHash) {\n        this.builder.push(async ()=>{\n            const opReturn = (0, $hgUW1$ScriptFactory).buildTokenDescriptionLegacy(ticker, name, docUrl, docHash);\n            this.transactionBuilder.addData(opReturn, true);\n            this.tokens.add({\n                action: 'group',\n                amount: BigInt((0, $hgUW1$Transaction).DUST_AMOUNT),\n                extraData: {\n                    opReturnData: opReturn.toHex()\n                }\n            });\n        });\n        return this;\n    }\n    /**\n     * Creates a token with metadata\n     * @param name Token name\n     * @param ticker Token ticker symbol\n     * @param decimals Number of decimal places\n     * @param docUrl URL to token documentation\n     * @param docHash Hash of token documentation\n     * @returns This instance for chaining\n     */ token(name, ticker, decimals, docUrl, docHash) {\n        this.builder.push(async ()=>{\n            const opReturn = (0, $hgUW1$ScriptFactory).buildTokenDescription(ticker, name, docUrl, docHash, decimals);\n            this.transactionBuilder.addData(opReturn, true);\n            this.tokens.add({\n                action: 'group',\n                amount: BigInt((0, $hgUW1$Transaction).DUST_AMOUNT),\n                extraData: {\n                    opReturnData: opReturn.toHex()\n                }\n            });\n        });\n        return this;\n    }\n    /**\n     * Creates an NFT collection with metadata\n     * @param name Collection name\n     * @param ticker Collection ticker symbol\n     * @param docUrl URL to collection documentation\n     * @param docHash Hash of collection documentation\n     * @returns This instance for chaining\n     */ collection(name, ticker, docUrl, docHash) {\n        this.builder.push(async ()=>{\n            const opReturn = (0, $hgUW1$ScriptFactory).buildNFTCollectionDescription(ticker, name, docUrl, docHash);\n            this.transactionBuilder.addData(opReturn, true);\n            this.tokens.add({\n                action: 'group',\n                amount: BigInt((0, $hgUW1$Transaction).DUST_AMOUNT),\n                extraData: {\n                    opReturnData: opReturn.toHex()\n                }\n            });\n        });\n        return this;\n    }\n    /**\n     * Creates an NFT within a collection\n     * @param parent Parent collection token ID\n     * @param zipUrl URL to NFT content ZIP file\n     * @param zipHash Hash of NFT content ZIP file\n     * @returns This instance for chaining\n     */ nft(parent, zipUrl, zipHash) {\n        this.builder.push(async ()=>{\n            // add op_return for the nft\n            let opReturn = (0, $hgUW1$ScriptFactory).buildNFTDescription(zipUrl, zipHash);\n            this.transactionBuilder.addData(opReturn, true);\n            // generate subgroup ID\n            const subGroupBuffer = (0, $hgUW1$GroupToken).generateSubgroupId(parent, zipHash);\n            const subGroupAddress = new (0, $hgUW1$Address)(subGroupBuffer, (0, $hgUW1$Networks).get(this.network) || (0, $hgUW1$Networks).mainnet, (0, $hgUW1$AddressType).GroupIdAddress).toString();\n            this.tokens.add({\n                token: subGroupAddress,\n                parentToken: parent,\n                amount: BigInt((0, $hgUW1$Transaction).DUST_AMOUNT),\n                action: 'subgroup',\n                extraData: {\n                    quantity: 1n\n                }\n            });\n        });\n        return this;\n    }\n    /**\n     * Creates an SFT (Semi-Fungible Token) within a collection with specified quantity\n     * @param parent Parent collection token ID\n     * @param zipUrl URL to SFT content ZIP file\n     * @param zipHash Hash of SFT content ZIP file\n     * @param quantity Quantity of SFTs to create\n     * @returns This instance for chaining\n     */ sft(parent, zipUrl, zipHash, quantity) {\n        this.builder.push(async ()=>{\n            // add op_return for the sft\n            let opReturn = (0, $hgUW1$ScriptFactory).buildNFTDescription(zipUrl, zipHash);\n            this.transactionBuilder.addData(opReturn, true);\n            // generate subgroup ID\n            const subGroupBuffer = (0, $hgUW1$GroupToken).generateSubgroupId(parent, zipHash);\n            const subGroupAddress = new (0, $hgUW1$Address)(subGroupBuffer, (0, $hgUW1$Networks).get(this.network) || (0, $hgUW1$Networks).mainnet, (0, $hgUW1$AddressType).GroupIdAddress).toString();\n            this.tokens.add({\n                token: subGroupAddress,\n                parentToken: parent,\n                amount: BigInt((0, $hgUW1$Transaction).DUST_AMOUNT),\n                action: 'subgroup',\n                extraData: {\n                    quantity: quantity\n                }\n            });\n        });\n        return this;\n    }\n    /**\n     * Adds an OP_RETURN output to the transaction\n     * @param data Data to include in the OP_RETURN\n     * @param isFullScript Whether the data is already a complete script\n     * @returns This instance for chaining\n     */ addOpReturn(data, isFullScript = false) {\n        this.builder.push(async ()=>{\n            let script = isFullScript ? new (0, $hgUW1$Script)(data) : (0, $hgUW1$ScriptFactory).buildDataOut(data);\n            let output = new (0, $hgUW1$Output)(0, script);\n            this.transactionBuilder.transaction.addOutput(output);\n        });\n        return this;\n    }\n    /**\n     * Adds nexa contract constraint to spending inputs\n     * @param templateScript\n     * @param constraintScript\n     * @param visibleArgs\n     * @param pubKey\n     * @returns This instance for chaining\n     */ addContract(templateScript, constraintScript, visibleArgs, pubKey) {\n        this.builder.push(async ()=>{\n            this.txOptions.templateData = {\n                publicKey: pubKey,\n                templateScript: templateScript,\n                constraintScript: constraintScript,\n                visibleArgs: visibleArgs\n            };\n        });\n        return this;\n    }\n    /**\n     * Builds the transaction by executing all queued operations\n     * @returns Promise resolving to the serialized transaction hex\n     */ async build() {\n        for (const task of this.builder)await task();\n        return this.transactionBuilder.transaction.serialize({\n            disableAll: true\n        });\n    }\n}\n\n\nclass $d71d9063d6876a10$export$2e2bcd8739ae039 extends (0, $329d65a0aed426f1$export$bba690fb5c12ba04) {\n    constructor(fromAccount, tx){\n        super(tx), this._keysToSign = [];\n        this._account = fromAccount;\n        this.validateAccount();\n    }\n    fromAccount(fromAccount) {\n        this._account = fromAccount;\n        return this;\n    }\n    parseTxHex(tx) {\n        // Call parent's parseTxHex which handles the common parsing logic\n        return super.parseTxHex(tx);\n    }\n    /**\n     * Handle wallet-specific logic for each parsed input (find and store private keys)\n     */ async handleParsedInput(input, utxo, index) {\n        // Find and store the private key for this input\n        const foundKey = this.findPrivateKeyFromAddress(utxo.addresses[0]);\n        if (foundKey) this._keysToSign.push(foundKey.key.privateKey);\n    }\n    /**\n     * Handle wallet-specific post-processing after parsing is complete\n     */ async handleParsingComplete() {\n        // If no keys found, use the primary account key as fallback\n        if (this._keysToSign.length == 0) this._keysToSign.push(this._account.getPrimaryAddressKey().key.privateKey);\n    }\n    parseTxBuffer(tx) {\n        // Clear any existing builder operations since we're dealing with a pre-built transaction\n        this.builder = [];\n        // For buffer, we can parse immediately since it doesn't require async operations\n        this.transactionBuilder = new (0, $hgUW1$TransactionBuilder)(tx);\n        // Extract all possible keys from the account that might be needed for signing\n        // Since we don't have UTXO data, we'll add all account keys\n        const addresses = this._account.getAddresses();\n        for (const addressKey of addresses)if (!this._keysToSign.includes(addressKey.key.privateKey)) this._keysToSign.push(addressKey.key.privateKey);\n        // If no keys found, use the primary account key as fallback\n        if (this._keysToSign.length == 0) this._keysToSign.push(this._account.getPrimaryAddressKey().key.privateKey);\n        return this;\n    }\n    mint(token, amount, parent) {\n        this.builder.push(async ()=>{\n            let toAddr = this._account.accountKeys.receiveKeys.at(-1).address;\n            this.tokenAction(toAddr, amount, token, 'mint', parent);\n        });\n        return this;\n    }\n    melt(token, amount, parent) {\n        this.builder.push(async ()=>{\n            let toAddr = this._account.accountKeys.receiveKeys.at(-1).address;\n            this.tokenAction(toAddr, amount, token, 'melt', parent);\n        });\n        return this;\n    }\n    populate() {\n        this.validateAccount();\n        this.builder.push(async ()=>{\n            let tK = [];\n            let nK = [];\n            if (this.tokens.size > 0) for (const tokenAction of this.tokens){\n                if (tokenAction.action == 'mint') tK = tK.concat(await (0, $3e8a638e2275dab4$export$fc6e64edb1452fc7)(this.transactionBuilder, this._account.accountKeys, tokenAction.token, tokenAction.amount, tokenAction.parentToken, this.spentOutpoints));\n                else if (tokenAction.action == 'melt') tK = tK.concat(await (0, $3e8a638e2275dab4$export$661377a8795b235c)(this.transactionBuilder, this._account.accountKeys, tokenAction.token, tokenAction.amount, tokenAction.parentToken, this.spentOutpoints));\n                else if (tokenAction.action == 'group') tK = tK.concat(await (0, $3e8a638e2275dab4$export$d7f2b844e1d59768)(this.transactionBuilder, this._account.accountKeys, tokenAction.extraData?.opReturnData, this.network, this.spentOutpoints));\n                else if (tokenAction.action == 'subgroup') tK = tK.concat(await (0, $3e8a638e2275dab4$export$1dfa5d829fc95097)(this.transactionBuilder, this._account.accountKeys, tokenAction.parentToken, 'subgroup', tokenAction.token, this._account.accountKeys.receiveKeys.at(-1).address, tokenAction.extraData?.quantity, this.spentOutpoints));\n                else if (tokenAction.action == 'renew') tK = tK.concat(await (0, $3e8a638e2275dab4$export$28a843ca046a6b3f)(this.transactionBuilder, this._account.accountKeys, tokenAction.token, tokenAction.extraData.perms, tokenAction.extraData.address, this.spentOutpoints));\n                else if (tokenAction.action == 'delete') tK = tK.concat(await (0, $3e8a638e2275dab4$export$48a48877d6df17e9)(this.transactionBuilder, this._account.accountKeys, tokenAction.extraData.outpoint));\n                else tK = tK.concat(await (0, $3e8a638e2275dab4$export$931e37acdaa22dcf)(this.transactionBuilder, this._account.accountKeys, tokenAction.token, tokenAction.amount, this.spentOutpoints));\n                this._keysToSign.concat(tK);\n            }\n            nK = nK.concat(await (0, $3e8a638e2275dab4$export$afd979971a55acfc)(this.transactionBuilder, this._account.accountKeys, this.totalValue, this.txOptions, this.spentOutpoints));\n            this._keysToSign = tK.concat(nK);\n        });\n        return this;\n    }\n    sign() {\n        this.builder.push(async ()=>{\n            // Process each transaction input using placeholder-based signing\n            const inputs = this.transactionBuilder.transaction.inputs;\n            for(let inputIndex = 0; inputIndex < inputs.length; inputIndex++){\n                const input = inputs[inputIndex];\n                // Analyze the scriptSig to determine signing strategy\n                const analysis = this.analyzeScriptSig(input.scriptSig);\n                if (analysis.strategy === 'skip') {\n                    console.log(`Skipping input ${inputIndex} - no placeholder found`);\n                    continue;\n                }\n                // Determine sighash type from placeholder bytes (or default to SIGHASH_ALL)\n                const sighashType = analysis.sighashType || new (0, $149c1bd638913645$re_export$SighashType)();\n                // Try signing with all available keys until one works\n                let signed = false;\n                const allAddressKeys = this._account.getAddresses();\n                for (const addressKey of allAddressKeys)try {\n                    // Sign the input\n                    const sig = (0, $hgUW1$TxSigner).sign(this.transactionBuilder.transaction, inputIndex, sighashType, this.transactionBuilder.transaction.inputs[inputIndex].getSubscript(), addressKey.key.privateKey);\n                    // Create signature buffer (Schnorr signature for Nexa)\n                    const signatureBuffer = new (0, $hgUW1$TxSignature)({\n                        publicKey: addressKey.key.publicKey,\n                        sigType: sighashType,\n                        signature: sig,\n                        subscript: this.transactionBuilder.transaction.inputs[inputIndex].getSubscript(),\n                        inputIndex: inputIndex\n                    }).toTxSatisfier();\n                    if (analysis.strategy === 'sign_all') this.transactionBuilder.signInput(inputIndex, addressKey.key.privateKey, sighashType);\n                    else if (analysis.strategy === 'replace_placeholder' && analysis.placeholderIndex !== undefined) {\n                        // Handle script template with mixed satisfier elements\n                        if (input instanceof (0, $hgUW1$ScriptTemplateInput) && analysis.satisfierElements && analysis.satisfierElements.length > 0) {\n                            // Reconstruct script template with preserved satisfier elements plus signature\n                            const templateInput = input;\n                            const allSatisfierElements = [\n                                ...analysis.satisfierElements\n                            ];\n                            // Insert signature at the correct position (where placeholder was)\n                            const relativeIndex = analysis.placeholderIndex - 2; // Adjust for template and constraint chunks\n                            allSatisfierElements.splice(relativeIndex, 0, signatureBuffer);\n                            this.transactionBuilder.transaction.inputs[inputIndex].scriptSig = this.buildScriptSig(templateInput.templateScript, templateInput.constraintScript, allSatisfierElements);\n                        } else if (input instanceof (0, $hgUW1$ScriptTemplateInput)) {\n                            // Script template with only placeholder (no other satisfier elements)\n                            const templateInput = input;\n                            this.transactionBuilder.transaction.inputs[inputIndex].scriptSig = this.buildScriptSig(templateInput.templateScript, templateInput.constraintScript, [\n                                signatureBuffer\n                            ]);\n                        } else // P2PKH script: signature placeholder + public key\n                        this.transactionBuilder.transaction.inputs[inputIndex].scriptSig = (0, $hgUW1$ScriptFactory).buildPublicKeyHashIn(addressKey.key.publicKey, sig);\n                    }\n                    signed = true;\n                    break;\n                } catch (error) {\n                // console.log(`Key for address ${addressKey.address} failed to sign input ${inputIndex}:`, (error as Error).message)\n                }\n                signed;\n            }\n        });\n        return this;\n    }\n    buildSatisfier(elements) {\n        let script = new (0, $hgUW1$Script)();\n        for (const element of elements)script = script.add(element);\n        return script;\n    }\n    buildScriptSig(template, constraint, satisfierElements) {\n        const satisfierScript = this.buildSatisfier(satisfierElements);\n        return (0, $hgUW1$ScriptFactory).buildScriptTemplateIn(template, constraint, satisfierScript);\n    }\n    /**\n     * Check if a buffer is a 64-byte placeholder (all zeros)\n     * @param buf - Buffer to check\n     * @returns true if it's a 64-byte zero placeholder\n     */ isPlaceholder(buf) {\n        if (!buf || buf.length < 64) return false;\n        const placeholderBytes = Buffer.alloc(64, 0);\n        return buf.subarray(0, 64).equals(placeholderBytes);\n    }\n    /**\n     * Extract sighash type from placeholder buffer (bytes after the 64-byte placeholder)\n     * @param buf - Buffer that may contain sighash type after placeholder\n     * @returns SighashType or null if using default SIGHASH_ALL (empty sighash = 0)\n     */ extractSighashFromPlaceholder(buf) {\n        if (buf.length <= 64) // Empty SigHash - use single byte 0 (sign all inputs and outputs)\n        return (0, $149c1bd638913645$re_export$SighashType).ALL; // Use default SIGHASH_ALL\n        // Parse the sighash bytes starting at offset 64\n        const sighashBytes = buf.subarray(64);\n        if (sighashBytes.length === 0) return (0, $149c1bd638913645$re_export$SighashType).ALL; // Default SIGHASH_ALL\n        // Get the sighashtype flag byte\n        const flagByte = sighashBytes[0];\n        // Upper 4 bits = input type, Lower 4 bits = output type\n        const inputType = flagByte >> 4 & 0x0F;\n        const outputType = flagByte & 0x0F;\n        const sighashType = new (0, $149c1bd638913645$re_export$SighashType)();\n        let byteIndex = 1;\n        // Parse input type flags\n        switch(inputType){\n            case 0:\n                sighashType.inType = 0; // ALL\n                break;\n            case 1:\n                sighashType.inType = 1; // FIRST_N\n                if (byteIndex < sighashBytes.length) {\n                    sighashType.inData = [\n                        sighashBytes[byteIndex]\n                    ];\n                    byteIndex++;\n                }\n                break;\n            case 2:\n                sighashType.inType = 2; // THIS\n                break;\n            default:\n                // Unknown input type, default to ALL\n                sighashType.inType = 0;\n        }\n        // Parse output type flags\n        switch(outputType){\n            case 0:\n                sighashType.outType = 0; // ALL\n                break;\n            case 1:\n                sighashType.outType = 1; // FIRST_N\n                if (byteIndex < sighashBytes.length) {\n                    sighashType.outData = [\n                        sighashBytes[byteIndex]\n                    ];\n                    byteIndex++;\n                }\n                break;\n            case 2:\n                sighashType.outType = 2; // TWO_OUTPUTS (if supported)\n                const outData = [];\n                if (byteIndex < sighashBytes.length) {\n                    outData.push(sighashBytes[byteIndex]);\n                    byteIndex++;\n                }\n                if (byteIndex < sighashBytes.length) {\n                    outData.push(sighashBytes[byteIndex]);\n                    byteIndex++;\n                }\n                sighashType.outData = outData;\n                break;\n            default:\n                // Unknown output type, default to ALL\n                sighashType.outType = 0;\n        }\n        return sighashType;\n    }\n    /**\n     * Determine signing behavior based on scriptSig content\n     * @param scriptSig - The scriptSig to analyze\n     * @returns Object with signing strategy and sighash type\n     */ analyzeScriptSig(scriptSig) {\n        const chunks = scriptSig.chunks;\n        // Empty scriptSig - sign with SIGHASH_ALL\n        if (chunks.length === 0) return {\n            strategy: 'sign_all',\n            sighashType: (0, $149c1bd638913645$re_export$SighashType).ALL\n        };\n        // Single chunk\n        if (chunks.length === 1) {\n            const chunk = chunks[0];\n            if (chunk.buf && this.isPlaceholder(chunk.buf)) {\n                // Single placeholder - treat same as empty, sign with SIGHASH_ALL or extract sighash\n                const sighashType = this.extractSighashFromPlaceholder(chunk.buf);\n                return {\n                    strategy: 'sign_all',\n                    sighashType: sighashType\n                };\n            }\n            // Single non-placeholder chunk - skip signing\n            return {\n                strategy: 'skip',\n                sighashType: null\n            };\n        }\n        // For script templates, check if this follows the 3-part structure: template, constraint, satisfier elements\n        // If chunks.length >= 3, assume it's a script template where chunks[2:] are satisfier elements\n        if (chunks.length >= 3) {\n            // Extract satisfier elements (chunks starting from index 2)\n            const satisfierElements = [];\n            let placeholderIndex;\n            let sighashType = null;\n            for(let i = 2; i < chunks.length; i++){\n                const chunk = chunks[i];\n                if (chunk.buf && this.isPlaceholder(chunk.buf)) {\n                    // Found placeholder in satisfier elements\n                    placeholderIndex = i;\n                    sighashType = this.extractSighashFromPlaceholder(chunk.buf);\n                } else // Non-placeholder satisfier element - preserve it\n                satisfierElements.push(chunk);\n            }\n            if (placeholderIndex !== undefined) return {\n                strategy: 'replace_placeholder',\n                sighashType: sighashType,\n                placeholderIndex: placeholderIndex,\n                satisfierElements: satisfierElements\n            };\n        }\n        // Multiple chunks - look for placeholder (fallback for non-template scripts)\n        for(let i = 0; i < chunks.length; i++){\n            const chunk = chunks[i];\n            if (chunk.buf && this.isPlaceholder(chunk.buf)) {\n                const sighashType = this.extractSighashFromPlaceholder(chunk.buf);\n                return {\n                    strategy: 'replace_placeholder',\n                    sighashType: sighashType,\n                    placeholderIndex: i\n                };\n            }\n        }\n        // Multiple chunks without placeholder - skip signing\n        return {\n            strategy: 'skip',\n            sighashType: null\n        };\n    }\n    /**\n     * Validates that the account has the necessary keys before performing operations\n     * @throws Error if account or keys are not properly initialized\n     */ validateAccount() {\n        if (!this._account) throw new Error('Account must be set before performing transactions');\n        if (!this._account.accountKeys) throw new Error('Account keys are not initialized');\n        if (!this._account.accountKeys.receiveKeys || this._account.accountKeys.receiveKeys.length === 0) throw new Error('No receive keys available in account');\n    }\n    findPrivateKeyFromAddress(addr) {\n        const keys = this._account.getAddresses();\n        return keys.find((key)=>key.address === addr);\n    }\n}\n\n\n\n\n\n\nclass $7e26340ce0f64954$export$2e2bcd8739ae039 {\n    /**\n     * Creates a new AccountStore instance\n     * Initializes an empty map to store accounts\n     */ constructor(){\n        this._accounts = new Map();\n    }\n    /**\n     * Generates a unique store key for an account based on its type and index\n     * @param accountType The type of account (DAPP, VAULT, or DEFAULT)\n     * @param index The account index\n     * @returns Unique string key for storing the account\n     */ getAccountStoreKey(accountType, index) {\n        switch(accountType){\n            case (0, $6f559318d8845d29$export$b8ca5fa4899cbfc7).DAPP_ACCOUNT:\n                // DApp accounts use format: \"2.index\"\n                return String(accountType + '.' + index);\n            case (0, $6f559318d8845d29$export$b8ca5fa4899cbfc7).VAULT_ACCOUNT:\n                // Vault accounts use format: \"1.index\"\n                return String(accountType + '.' + index);\n            default:\n                // Default accounts use just the index\n                return String(index);\n        }\n    }\n    /**\n     * Creates a new account of the specified type\n     * @param accountType Type of account to create (DAPP, VAULT, or DEFAULT)\n     * @param masterKey Master HD private key for deriving account keys\n     * @param forceNextIndex If true, forces the next sequential index regardless of blockchain usage\n     * @returns Promise resolving to the created account\n     */ async createAccount(accountType, masterKey, forceNextIndex = false) {\n        let nextIndex;\n        if (forceNextIndex) // Force next sequential index considering both blockchain and store\n        nextIndex = await this.getNextSequentialIndex(accountType, masterKey);\n        else // Get the next available index for this account type (discovery-based)\n        nextIndex = await (0, $6f559318d8845d29$export$ef13479e8d3251d7)(accountType, masterKey);\n        const accountStoreKey = this.getAccountStoreKey(accountType, nextIndex);\n        // Check if account already exists\n        const indexExists = this._accounts.get(String(accountStoreKey));\n        if (indexExists) return indexExists;\n        switch(accountType){\n            case (0, $6f559318d8845d29$export$b8ca5fa4899cbfc7).DAPP_ACCOUNT:\n                // Create DApp account (purpose 2)\n                let dappAccountKey = (0, $6f559318d8845d29$export$b3a12d67e2f5f8c9)(masterKey, 2);\n                const dAppAccount = new (0, $448355556707518b$export$2e2bcd8739ae039)(2, nextIndex, (0, $6f559318d8845d29$export$1e0ce394ebe84ca9)(dappAccountKey, nextIndex));\n                await dAppAccount.loadBalances();\n                this._accounts.set(dAppAccount.getAccountStoreKey(), dAppAccount);\n                return dAppAccount;\n            case (0, $6f559318d8845d29$export$b8ca5fa4899cbfc7).VAULT_ACCOUNT:\n                // Create Vault account (purpose 1)\n                let vaultAccountKey = (0, $6f559318d8845d29$export$b3a12d67e2f5f8c9)(masterKey, 1);\n                const vaultAccount = new (0, $ce8955c0465759ad$export$2e2bcd8739ae039)(1, nextIndex, (0, $6f559318d8845d29$export$1e0ce394ebe84ca9)(vaultAccountKey, nextIndex));\n                await vaultAccount.loadBalances();\n                this._accounts.set(vaultAccount.getAccountStoreKey(), vaultAccount);\n                return vaultAccount;\n            default:\n                // Create default NEXA account with receive and change addresses\n                let nexaAccountKey = (0, $6f559318d8845d29$export$b3a12d67e2f5f8c9)(masterKey, nextIndex);\n                const nexaAccountIndexes = {\n                    rIndex: 0,\n                    cIndex: 0\n                };\n                const nexaAccount = new (0, $5c605efdbcfd6698$export$2e2bcd8739ae039)(nextIndex, nexaAccountIndexes, (0, $6f559318d8845d29$export$d6e8eb22902c6b88)(nexaAccountKey, nexaAccountIndexes.rIndex + 1, nexaAccountIndexes.rIndex + 20, nexaAccountIndexes.cIndex + 1, nexaAccountIndexes.cIndex + 20));\n                await nexaAccount.loadBalances();\n                this._accounts.set(nexaAccount.getAccountStoreKey(), nexaAccount);\n                return nexaAccount;\n        }\n    }\n    /**\n     * Finds the private key associated with a given address across all accounts\n     * @param address The address to search for\n     * @returns The AddressKey containing the private key, or null if not found\n     */ findKeyForAddress(address) {\n        // Search through all accounts\n        for (const [_, account] of this._accounts.entries()){\n            // Get all addresses for this account\n            const allKeys = account.getAddresses();\n            // Check each key for a matching address\n            for (const key of allKeys){\n                if (key.address == address) return key;\n            }\n        }\n        return null;\n    }\n    /**\n     * Imports an existing account into the store\n     * @param accountData The account data to import\n     * @throws Error if an account with the same key already exists\n     */ importAccount(accountData) {\n        let index = accountData.getAccountStoreKey();\n        if (this._accounts.get(index)) throw Error('Account already exists!');\n        this._accounts.set(String(index), accountData);\n    }\n    /**\n     * Exports account data by index\n     * @param accountIndex The account index to export\n     * @returns The account data\n     * @throws Error if the account doesn't exist\n     */ exportAccount(accountIndex) {\n        if (!this._accounts.get(accountIndex)) throw Error('Cannot find account!');\n        return this._accounts.get(accountIndex);\n    }\n    /**\n     * Removes an account from the store\n     * @param accountIndex The account index to remove\n     * @throws Error if the account doesn't exist\n     */ removeAccount(accountIndex) {\n        if (!this._accounts.get(accountIndex)) throw Error('Cannot find account!');\n        this._accounts.delete(accountIndex);\n    }\n    /**\n     * Returns all accounts in the store\n     * @returns Map of account store keys to BaseAccount objects\n     */ listAccounts() {\n        return this._accounts;\n    }\n    /**\n     * Retrieves a specific account by its index\n     * @param index The account index to retrieve\n     * @returns The account if found, undefined otherwise\n     */ getAccount(index) {\n        return this._accounts.get(index);\n    }\n    /**\n     * Retrieves all accounts of a specific type\n     * @param accountType The type of accounts to retrieve\n     * @returns Array of accounts matching the specified type\n     */ getAccountsByType(accountType) {\n        const accounts = [];\n        for (const [key, account] of this._accounts)// Check account type based on store key pattern\n        switch(accountType){\n            case (0, $6f559318d8845d29$export$b8ca5fa4899cbfc7).DAPP_ACCOUNT:\n                // DApp accounts have keys like \"2.0\", \"2.1\", etc.\n                if (key.startsWith('2.')) accounts.push(account);\n                break;\n            case (0, $6f559318d8845d29$export$b8ca5fa4899cbfc7).VAULT_ACCOUNT:\n                // Vault accounts have keys like \"1.0\", \"1.1\", etc.\n                if (key.startsWith('1.')) accounts.push(account);\n                break;\n            case (0, $6f559318d8845d29$export$b8ca5fa4899cbfc7).NEXA_ACCOUNT:\n                // Default accounts have numeric keys like \"0\", \"100\", etc. (no dot)\n                if (!key.includes('.')) accounts.push(account);\n                break;\n        }\n        return accounts;\n    }\n    /**\n     * Gets the next sequential index for an account type, considering both blockchain\n     * discovery and accounts already in the store\n     * @param accountType The account type to get the next index for\n     * @param masterKey Master HD private key for blockchain discovery\n     * @returns Promise resolving to the next safe sequential index\n     */ async getNextSequentialIndex(accountType, masterKey) {\n        // First, get the discovery-based index (what exists on blockchain)\n        const discoveryIndex = await (0, $6f559318d8845d29$export$ef13479e8d3251d7)(accountType, masterKey);\n        // Then, check what's the next index based on current store\n        const storeBasedIndex = this.getNextStoreIndex(accountType);\n        // Use whichever is higher to ensure we don't conflict with either\n        return Math.max(discoveryIndex, storeBasedIndex);\n    }\n    /**\n     * Gets the next index based only on accounts currently in the store\n     * @param accountType The account type to check\n     * @returns The next available index in the store\n     */ getNextStoreIndex(accountType) {\n        const indexes = [];\n        for (const [key, _] of this._accounts)switch(accountType){\n            case (0, $6f559318d8845d29$export$b8ca5fa4899cbfc7).DAPP_ACCOUNT:\n                if (key.startsWith('2.')) indexes.push(parseInt(key.split('.')[1]));\n                break;\n            case (0, $6f559318d8845d29$export$b8ca5fa4899cbfc7).VAULT_ACCOUNT:\n                if (key.startsWith('1.')) indexes.push(parseInt(key.split('.')[1]));\n                break;\n            case (0, $6f559318d8845d29$export$b8ca5fa4899cbfc7).NEXA_ACCOUNT:\n                if (!key.includes('.')) indexes.push(parseInt(key));\n                break;\n        }\n        if (indexes.length === 0) return 0; // First account of this type\n        // Return the next sequential index after the highest existing one\n        return Math.max(...indexes) + 1;\n    }\n}\n\n\n\nclass $006d7f03de390713$export$2e2bcd8739ae039 {\n    /**\n     * Validate that a state condition is true\n     * \n     * @param condition - The condition to validate\n     * @param message - Error message to throw if condition is false\n     * @throws {Error} If condition is false\n     * \n     * @example\n     * ```typescript\n     * ValidationUtils.validateState(wallet.isInitialized, 'Wallet must be initialized');\n     * ```\n     */ static validateState(condition, message) {\n        if (!condition) throw new Error(`Invalid State: ${message}`);\n    }\n    /**\n     * Validate that an argument condition is true\n     * \n     * @param condition - The condition to validate\n     * @param argumentName - Name of the argument being validated\n     * @param message - Optional additional error message\n     * @throws {Error} If condition is false\n     * \n     * @example\n     * ```typescript\n     * ValidationUtils.validateArgument(\n     *   typeof amount === 'number',\n     *   'amount',\n     *   'must be a number'\n     * );\n     * ```\n     */ static validateArgument(condition, argumentName, message = \"\") {\n        if (!condition) throw new Error(`Invalid Argument: ${argumentName}. ${message}`);\n    }\n    /**\n     * Validate that an argument is of the expected type\n     * \n     * @param argument - The argument to validate\n     * @param type - Expected type (string name or constructor function)\n     * @param argumentName - Name of the argument being validated\n     * @throws {TypeError} If argument is not of expected type\n     * \n     * @example\n     * ```typescript\n     * ValidationUtils.validateArgumentType(buffer, 'Buffer', 'data');\n     * ValidationUtils.validateArgumentType(wallet, Wallet, 'wallet');\n     * ValidationUtils.validateArgumentType(amount, 'number', 'amount');\n     * ```\n     */ static validateArgumentType(argument, type, argumentName) {\n        argumentName = argumentName || '(unknown name)';\n        if ((0, $hgUW1$isString)(type)) {\n            if (type === 'Buffer') {\n                if (!Buffer.isBuffer(argument)) throw new TypeError(`Invalid Argument for ${argumentName}, expected ${type} but got ${typeof argument}`);\n            } else if (typeof argument !== type) throw new TypeError(`Invalid Argument for ${argumentName}, expected ${type} but got ${typeof argument}`);\n        } else {\n            if (!(argument instanceof type)) throw new TypeError(`Invalid Argument for ${argumentName}, expected ${type} but got ${typeof argument}`);\n        }\n    }\n}\n\n\nclass $8265cc68049fe82c$export$2e2bcd8739ae039 {\n    /**\n     * Creates a new Wallet instance\n     *\n     * @param data - Optional wallet data:\n     *   - undefined: Generate new random seed phrase\n     *   - string: Use as BIP39 seed phrase\n     *   - HDPrivateKey: Use as master key directly\n     * @param network - Network name ('mainnet', 'testnet', 'regtest'). Defaults to 'mainnet'\n     *\n     * @example\n     * ```typescript\n     * // Create new wallet with random seed\n     * const wallet = new Wallet();\n     *\n     * // Create from seed phrase\n     * const wallet = new Wallet('abandon abandon abandon...');\n     *\n     * // Create from master key\n     * const masterKey = HDPrivateKey.fromString('xprv...');\n     * const wallet = new Wallet(masterKey);\n     *\n     * // Create on testnet\n     * const wallet = new Wallet(undefined, 'testnet');\n     * ```\n     */ constructor(data, network){\n        /** Whether to force sequential account indexing instead of discovery-based indexing */ this._forceSequentialIndexing = false;\n        this._network = (0, $hgUW1$Networks).get(network) ?? (0, $hgUW1$Networks).mainnet;\n        this._accountStore = new (0, $7e26340ce0f64954$export$2e2bcd8739ae039)();\n        if ((0, $hgUW1$isNil)(data)) {\n            // Generate new random seed phrase\n            this.phrase = $hgUW1$generateMnemonic(128, undefined, $hgUW1$wordlists.english);\n            const seed = $hgUW1$mnemonicToSeedSync(this.phrase, '');\n            const masterKey = (0, $hgUW1$HDPrivateKey).fromSeed(seed, this._network ?? (0, $hgUW1$Networks).mainnet);\n            this.masterKey = masterKey.deriveChild(44, true).deriveChild(29223, true);\n        } else if (data instanceof (0, $hgUW1$HDPrivateKey)) // Use provided HDPrivateKey directly\n        this.masterKey = data.deriveChild(44, true).deriveChild(29223, true);\n        else if ((0, $hgUW1$isString)(data)) {\n            // Validate and use provided seed phrase\n            (0, $006d7f03de390713$export$2e2bcd8739ae039).validateArgument($hgUW1$validateMnemonic(data), 'Invalid BIP39 seed phrase provided');\n            this.phrase = data;\n            const seed = $hgUW1$mnemonicToSeedSync(this.phrase, '');\n            const masterKey = (0, $hgUW1$HDPrivateKey).fromSeed(seed, this._network ?? (0, $hgUW1$Networks).mainnet);\n            this.masterKey = masterKey.deriveChild(44, true).deriveChild(29223, true);\n        }\n    }\n    /**\n     * Create a new wallet with a randomly generated seed phrase\n     *\n     * This is the recommended way to create a new wallet for first-time users.\n     * The generated seed phrase should be securely stored by the user.\n     *\n     * @returns A new Wallet instance with a random 12-word seed phrase\n     *\n     * @example\n     * ```typescript\n     * const wallet = Wallet.create();\n     * console.log(wallet.export().phrase); // Store this securely!\n     * ```\n     */ static create() {\n        return new $8265cc68049fe82c$export$2e2bcd8739ae039();\n    }\n    /**\n     * Create a wallet from an existing BIP39 seed phrase\n     *\n     * Use this method to restore a wallet from a previously generated seed phrase.\n     * The seed phrase should be a valid BIP39 mnemonic.\n     *\n     * @param phrase - The BIP39 seed phrase (12 or 24 words)\n     * @param network - Optional network name ('mainnet', 'testnet', 'regtest')\n     * @returns A new Wallet instance restored from the seed phrase\n     * @throws {Error} If the seed phrase is invalid or not provided\n     *\n     * @example\n     * ```typescript\n     * const wallet = Wallet.fromSeedPhrase(\n     *   'abandon abandon abandon abandon abandon abandon abandon abandon abandon abandon abandon about',\n     *   'testnet'\n     * );\n     * ```\n     */ static fromSeedPhrase(phrase, network) {\n        (0, $006d7f03de390713$export$2e2bcd8739ae039).validateArgument((0, $hgUW1$isString)(phrase), 'seedphrase must be provided');\n        (0, $006d7f03de390713$export$2e2bcd8739ae039).validateArgument($hgUW1$validateMnemonic(phrase), 'Invalid BIP39 seed phrase provided');\n        return new $8265cc68049fe82c$export$2e2bcd8739ae039(phrase, network);\n    }\n    /**\n     * Create a wallet from an extended private key (xpriv)\n     *\n     * Use this method to create a wallet from a master private key in extended format.\n     * This is useful for advanced users who want to use a specific key derivation.\n     *\n     * @param xpriv - The extended private key string (starts with 'xprv')\n     * @param network - Optional network name ('mainnet', 'testnet', 'regtest')\n     * @returns A new Wallet instance using the provided master key\n     * @throws {Error} If the private key is invalid or not provided\n     *\n     * @example\n     * ```typescript\n     * const wallet = Wallet.fromXpriv(\n     *   'xprv9s21ZrQH143K3QTDL4LXw2F7HEK3wJUD2nW2nRk4stbPy6cq3jPPqjiChkVvvNKmPGJxWUtg6LnF5kejMRNNU3TGtRBeJgk33yuGBxrMPHi'\n     * );\n     * ```\n     */ static fromXpriv(xpriv, network) {\n        (0, $006d7f03de390713$export$2e2bcd8739ae039).validateArgument((0, $hgUW1$isString)(xpriv), 'private key must be provided');\n        (0, $006d7f03de390713$export$2e2bcd8739ae039).validateArgument(xpriv.trim().length > 0, 'private key cannot be empty');\n        let masterKey;\n        try {\n            masterKey = (0, $hgUW1$HDPrivateKey).fromString(xpriv);\n        } catch (error) {\n            throw new Error(`Invalid extended private key format: ${error instanceof Error ? error.message : 'Unknown error'}`);\n        }\n        return new $8265cc68049fe82c$export$2e2bcd8739ae039(masterKey, network);\n    }\n    /**\n     * Initialize the wallet by discovering accounts and loading balances\n     *\n     * This method performs account discovery using the BIP44 derivation path\n     * and scans for existing accounts with transaction history or balances.\n     * Must be called before using the wallet's accounts.\n     *\n     * @returns Promise that resolves when initialization is complete\n     *\n     * @example\n     * ```typescript\n     * const wallet = Wallet.fromSeedPhrase('your seed phrase');\n     * await wallet.initialize();\n     *\n     * // Now you can access discovered accounts\n     * const accounts = wallet.accountStore.listAccounts();\n     * ```\n     */ async initialize() {\n        const walletAccounts = await (0, $6f559318d8845d29$export$4e4f91181d6bd31c)(this.masterKey);\n        for (const account of walletAccounts)this._accountStore.importAccount(account);\n    }\n    /**\n     * Create a new transaction builder for this wallet\n     *\n     * @param fromAccount - The account to send the transaction from\n     * @param x - Optional existing transaction data:\n     *   - TransactionBuilder: Use existing transaction builder\n     *   - string: Parse from hex string\n     *   - Buffer: Parse from binary buffer\n     *   - undefined: Create new empty transaction\n     * @returns A new WalletTransactionCreator instance\n     *\n     * @example\n     * ```typescript\n     * const account = wallet.accountStore.getAccount(0);\n     * const tx = wallet.newTransaction(account)\n     *   .to('nexa:address', 1000000) // 1 NEXA\n     *   .sign();\n     *\n     * // Or from existing transaction hex\n     * const tx = wallet.newTransaction(account, 'raw_tx_hex')\n     *   .sign();\n     * ```\n     */ newTransaction(fromAccount, x) {\n        let tx;\n        if (x instanceof (0, $hgUW1$TransactionBuilder)) tx = new (0, $d71d9063d6876a10$export$2e2bcd8739ae039)(fromAccount, x);\n        else if ((0, $hgUW1$isString)(x)) tx = new (0, $d71d9063d6876a10$export$2e2bcd8739ae039)(fromAccount).parseTxHex(x);\n        else if ((0, $hgUW1$isBuffer)(x) && !(0, $hgUW1$isNil)(x)) tx = new (0, $d71d9063d6876a10$export$2e2bcd8739ae039)(fromAccount).parseTxBuffer(x);\n        else tx = new (0, $d71d9063d6876a10$export$2e2bcd8739ae039)(fromAccount);\n        return tx.onNetwork(this._network);\n    }\n    /**\n     * Create a new account for this wallet\n     *\n     * @param accountType - The type of account to create:\n     *   - 'DefaultAccount': Standard account for general use\n     *   - 'VaultAccount': Secured account with additional protection\n     *   - 'DappAccount': Account optimized for dApp interactions\n     * @returns Promise that resolves to the newly created account\n     *\n     * @example\n     * ```typescript\n     * const defaultAccount = await wallet.newAccount('DefaultAccount');\n     * const vaultAccount = await wallet.newAccount('VaultAccount');\n     * const dappAccount = await wallet.newAccount('DappAccount');\n     * ```\n     */ async newAccount(accountType) {\n        return await this.accountStore.createAccount(accountType, this.masterKey, this._forceSequentialIndexing);\n    }\n    /**\n     * Broadcast a signed transaction to the Nexa network\n     *\n     * @param transaction - The signed transaction in hex format\n     * @returns Promise that resolves to the transaction ID (txid)\n     * @throws {Error} If the transaction is invalid or broadcast fails\n     *\n     * @example\n     * ```typescript\n     * const tx = wallet.newTransaction(account)\n     *   .to('nexa:address', 1000000)\n     *   .sign();\n     *\n     * const txId = await wallet.sendTransaction(tx.toHex());\n     * console.log('Transaction sent:', txId);\n     * ```\n     */ async sendTransaction(transaction) {\n        (0, $006d7f03de390713$export$2e2bcd8739ae039).validateArgument((0, $hgUW1$isString)(transaction), 'transaction must be present and valid');\n        return (0, $884ce55f1db7e177$export$eaa49f0478d81b9d).broadcast(transaction);\n    }\n    /**\n     * Subscribe to address notifications for transaction updates\n     *\n     * This method allows you to monitor one or more addresses for incoming and outgoing transactions.\n     * You can provide either a single address string or an array of addresses. The callback will be\n     * invoked whenever there are updates to any of the monitored addresses.\n     *\n     * @param addresses - A single address string or array of addresses to monitor\n     * @param callback - Function to call when address notifications are received\n     * @returns Promise that resolves when subscription is established\n     * @throws {Error} If addresses parameter is invalid or empty\n     *\n     * @example\n     * ```typescript\n     * // Subscribe to a single address\n     * await wallet.subscribeToAddressNotifications(\n     *   'nexa:address123',\n     *   (notification) => {\n     *     console.log('Address notification:', notification);\n     *   }\n     * );\n     *\n     * // Subscribe to multiple addresses\n     * await wallet.subscribeToAddressNotifications(\n     *   ['nexa:address1', 'nexa:address2', 'nexa:address3'],\n     *   (notification) => {\n     *     console.log('Address notification:', notification);\n     *   }\n     * );\n     *\n     * // Subscribe to all wallet addresses\n     * const accounts = wallet.accountStore.listAccounts();\n     * const addresses = accounts.flatMap(account =>\n     *   account.getAddresses().map(addr => addr.address)\n     * );\n     * await wallet.subscribeToAddressNotifications(addresses, callback);\n     * ```\n     */ async subscribeToAddressNotifications(addresses, callback) {\n        (0, $006d7f03de390713$export$2e2bcd8739ae039).validateArgument(!(0, $hgUW1$isNil)(addresses), 'addresses parameter is required');\n        (0, $006d7f03de390713$export$2e2bcd8739ae039).validateArgument(!(0, $hgUW1$isNil)(callback), 'callback function is required');\n        let addressArray;\n        if ((0, $hgUW1$isString)(addresses)) addressArray = [\n            addresses\n        ];\n        else if ((0, $hgUW1$isArray)(addresses)) {\n            (0, $006d7f03de390713$export$2e2bcd8739ae039).validateArgument(addresses.length > 0, 'addresses array cannot be empty');\n            addressArray = addresses;\n        } else throw new Error('addresses must be a string or array of strings');\n        return (0, $884ce55f1db7e177$export$eaa49f0478d81b9d).subscribeToAddresses(addressArray, callback);\n    }\n    /**\n     * Unsubscribe from address notifications to prevent memory leaks\n     *\n     * This method stops listening for notifications on the specified addresses.\n     * It's important to call this method when you no longer need to monitor addresses\n     * to prevent memory leaks from accumulating callback references.\n     *\n     * @param addresses - Single address string or array of address strings to unsubscribe from\n     * @param callback - The exact same callback function used in subscribeToAddressNotifications\n     *\n     * @example\n     * ```typescript\n     * // Unsubscribe from a single address\n     * await wallet.unsubscribeFromAddressNotifications(\n     *     'nexa:nqtsq5g5jsdmqqywaqd82lhnnk3a8wqunjz6gtxdtavnnekc',\n     *     myCallback\n     * );\n     *\n     * // Unsubscribe from multiple addresses\n     * await wallet.unsubscribeFromAddressNotifications(addresses, myCallback);\n     * ```\n     */ async unsubscribeFromAddressNotifications(addresses, callback) {\n        (0, $006d7f03de390713$export$2e2bcd8739ae039).validateArgument(!(0, $hgUW1$isNil)(addresses), 'addresses parameter is required');\n        (0, $006d7f03de390713$export$2e2bcd8739ae039).validateArgument(!(0, $hgUW1$isNil)(callback), 'callback function is required');\n        let addressArray;\n        if ((0, $hgUW1$isString)(addresses)) addressArray = [\n            addresses\n        ];\n        else if ((0, $hgUW1$isArray)(addresses)) {\n            (0, $006d7f03de390713$export$2e2bcd8739ae039).validateArgument(addresses.length > 0, 'addresses array cannot be empty');\n            addressArray = addresses;\n        } else throw new Error('addresses must be a string or array of strings');\n        return (0, $884ce55f1db7e177$export$eaa49f0478d81b9d).unsubscribeFromAddresses(addressArray, callback);\n    }\n    /**\n     * Sign a message using a specific address from this wallet\n     *\n     * The message is signed using the private key associated with the given address.\n     * This can be used for authentication or to prove ownership of an address.\n     *\n     * @param message - The message to sign\n     * @param addressToUse - The address whose private key should sign the message\n     * @returns The signature as a base64-encoded string\n     * @throws {Error} If the address is not owned by this wallet\n     *\n     * @example\n     * ```typescript\n     * const account = wallet.accountStore.getAccount(0);\n     * const address = account.getReceiveAddress();\n     * const signature = wallet.signMessage('Hello World', address);\n     * ```\n     */ signMessage(message, addressToUse) {\n        let msg = new (0, $hgUW1$Message)(message);\n        const addressKey = this.accountStore.findKeyForAddress(addressToUse);\n        (0, $006d7f03de390713$export$2e2bcd8739ae039).validateArgument(!(0, $hgUW1$isNil)(addressKey), \"You dont own this private key\");\n        return msg.sign(addressKey?.key.privateKey);\n    }\n    /**\n     * Verify a message signature against an address\n     *\n     * This method can verify signatures created by any address, not just addresses\n     * owned by this wallet. It's useful for verifying messages from other parties.\n     *\n     * @param message - The original message that was signed\n     * @param signature - The signature to verify (base64-encoded)\n     * @param address - The address that supposedly signed the message\n     * @returns true if the signature is valid, false otherwise\n     * @throws {Error} If any parameters are missing or invalid\n     *\n     * @example\n     * ```typescript\n     * const isValid = wallet.verifyMessage(\n     *   'Hello World',\n     *   'signature_string',\n     *   'nexa:address'\n     * );\n     * console.log('Signature valid:', isValid);\n     * ```\n     */ verifyMessage(message, signature, address) {\n        (0, $006d7f03de390713$export$2e2bcd8739ae039).validateArgument(!(0, $hgUW1$isNil)(message), 'message is required');\n        (0, $006d7f03de390713$export$2e2bcd8739ae039).validateArgument(!(0, $hgUW1$isNil)(signature), 'signature is required');\n        (0, $006d7f03de390713$export$2e2bcd8739ae039).validateArgument(!(0, $hgUW1$isNil)(address), 'address is required ');\n        let msg = new (0, $hgUW1$Message)(message);\n        const addressKey = this.accountStore.findKeyForAddress(address);\n        (0, $006d7f03de390713$export$2e2bcd8739ae039).validateArgument(!(0, $hgUW1$isNil)(addressKey), \"You dont own this private key\");\n        return msg.verify(address, signature);\n    }\n    /**\n     * Export the wallet data for backup or storage\n     *\n     * Returns an object containing the wallet's seed phrase, master key, and accounts.\n     * This data can be used to restore the wallet later. The seed phrase should be\n     * stored securely as it provides full access to the wallet.\n     *\n     * @returns Object containing wallet data\n     * @property {string} phrase - The BIP39 seed phrase (if available)\n     * @property {HDPrivateKey} masterKey - The master private key\n     * @property {BaseAccount[]} accounts - Array of discovered accounts\n     *\n     * @example\n     * ```typescript\n     * const walletData = wallet.export();\n     *\n     * // Store the seed phrase securely\n     * const seedPhrase = walletData.phrase;\n     *\n     * // Later, restore the wallet\n     * const restoredWallet = Wallet.fromSeedPhrase(seedPhrase);\n     * ```\n     */ export() {\n        return {\n            phrase: this.phrase,\n            masterKey: this.masterKey,\n            accounts: this._accountStore.listAccounts()\n        };\n    }\n    /**\n     * Get the account store for managing wallet accounts\n     *\n     * The account store provides methods to create, import, and manage accounts\n     * within this wallet. Each account has its own set of addresses and keys.\n     *\n     * @returns The wallet's account store\n     *\n     * @example\n     * ```typescript\n     * const accountStore = wallet.accountStore;\n     * const accounts = accountStore.listAccounts();\n     * const firstAccount = accountStore.getAccount(0);\n     * ```\n     */ get accountStore() {\n        return this._accountStore;\n    }\n    /**\n     * Get the network this wallet is operating on\n     *\n     * @returns The network object (mainnet, testnet, or regtest)\n     *\n     * @example\n     * ```typescript\n     * const network = wallet.network;\n     * console.log('Network:', network.name);\n     * ```\n     */ get network() {\n        return this._network;\n    }\n    /**\n     * Get the current sequential indexing setting\n     *\n     * @returns true if forcing sequential indexing, false if using discovery-based indexing\n     *\n     * @example\n     * ```typescript\n     * const isSequential = wallet.forceSequentialIndexing;\n     * console.log('Sequential indexing:', isSequential);\n     * ```\n     */ get forceSequentialIndexing() {\n        return this._forceSequentialIndexing;\n    }\n    /**\n     * Set whether to force sequential account indexing\n     *\n     * When enabled, new accounts will use sequential indexes (0, 1, 2, ...) regardless\n     * of blockchain activity. This is useful for multi-user wallets where each user\n     * needs a unique account even if they haven't used it yet.\n     *\n     * When disabled (default), account creation uses discovery-based indexing which\n     * scans the blockchain for existing activity before assigning indexes.\n     *\n     * @param force - true to force sequential indexing, false for discovery-based\n     *\n     * @example\n     * ```typescript\n     * // Enable sequential indexing for multi-user scenarios\n     * wallet.forceSequentialIndexing = true;\n     *\n     * // Create accounts - they'll be 2.0, 2.1, 2.2 regardless of usage\n     * const alice = await wallet.newAccount(AccountType.DAPP_ACCOUNT);\n     * const bob = await wallet.newAccount(AccountType.DAPP_ACCOUNT);\n     * const charlie = await wallet.newAccount(AccountType.DAPP_ACCOUNT);\n     *\n     * // Disable for normal discovery-based indexing\n     * wallet.forceSequentialIndexing = false;\n     * ```\n     */ set forceSequentialIndexing(force) {\n        this._forceSequentialIndexing = force;\n    }\n}\n\n\n\n\n\n\n\n\n\nconst $c03143e0cae56add$var$MAX_INPUTS_OUTPUTS = 250;\nasync function $c03143e0cae56add$export$20e004915450ed44(txBuilder, addresses, totalTxValue, options, spentOutpoints) {\n    if ((0, $d78972a39a5ae94f$export$c8733ae29fb53302)(addresses)) throw new Error(\"Not enough Nexa balance.\");\n    let usedAddresses = new Set();\n    let origAmount = options.isConsolidate ? 0 : Number(totalTxValue);\n    for (let item of addresses){\n        let utxos = await (0, $884ce55f1db7e177$export$eaa49f0478d81b9d).getNexaUtxos(item.address);\n        for (let utxo of utxos){\n            // Skip if this outpoint is already spent\n            if (spentOutpoints && spentOutpoints.has(utxo.outpoint_hash)) continue;\n            let input = {\n                outpoint: utxo.outpoint_hash,\n                address: item.address,\n                satoshis: utxo.value,\n                templateData: options.templateData\n            };\n            txBuilder.from(input);\n            // Add to spent outpoints set\n            if (spentOutpoints) spentOutpoints.add(utxo.outpoint_hash);\n            if (!usedAddresses.has(item.address)) usedAddresses.add(item.address);\n            if (options.isConsolidate) {\n                // need to handle change\n                txBuilder.change(options.toChange ?? item.address);\n                if (txBuilder.transaction.inputs.length > $c03143e0cae56add$var$MAX_INPUTS_OUTPUTS) return Array.from(usedAddresses.values());\n            } else {\n                let tx = txBuilder.transaction;\n                if (tx.inputs.length > $c03143e0cae56add$var$MAX_INPUTS_OUTPUTS) throw new Error(\"Too many inputs. Consider consolidate transactions or reduce the send amount.\");\n                let unspent = tx.getUnspentValue();\n                if (unspent < 0n) continue;\n                if (unspent == 0n && options.feeFromAmount) {\n                    let txFee = tx.estimateRequiredFee();\n                    tx.updateOutputAmount(0, origAmount - txFee);\n                    return Array.from(usedAddresses.values());\n                }\n                txBuilder.change(options.toChange ?? item.address);\n                if (options.feeFromAmount) {\n                    let hasChange = tx.getChangeOutput();\n                    let txFee = tx.estimateRequiredFee();\n                    tx.updateOutputAmount(0, origAmount - txFee);\n                    // edge case where change added after update\n                    if (!hasChange && tx.getChangeOutput()) {\n                        txFee = tx.estimateRequiredFee();\n                        tx.updateOutputAmount(0, origAmount - txFee);\n                    }\n                }\n                // check again after change output manipulation\n                if (tx.getUnspentValue() < tx.estimateRequiredFee()) continue;\n                return Array.from(usedAddresses.values());\n            }\n        }\n    }\n    if (options.isConsolidate) {\n        if (usedAddresses.size > 0) return Array.from(usedAddresses.values());\n        throw new Error(\"Not enough Nexa balance.\");\n    }\n    let err = {\n        errorMsg: \"Not enough Nexa balance.\",\n        amount: (0, $hgUW1$UnitUtils).formatNEXA(Number(totalTxValue)),\n        fee: (0, $hgUW1$UnitUtils).formatNEXA(txBuilder.transaction.estimateRequiredFee())\n    };\n    throw new Error(JSON.stringify(err));\n}\nasync function $c03143e0cae56add$export$49bc96b87058cba4(txBuilder, addresses, token, outTokenAmount, spentOutpoints) {\n    if ((0, $d78972a39a5ae94f$export$c8733ae29fb53302)(addresses)) throw new Error(\"Not enough token balance.\");\n    let usedKeys = new Set();\n    let inTokenAmount = 0n;\n    for (let item of addresses){\n        let utxos = await (0, $884ce55f1db7e177$export$eaa49f0478d81b9d).getTokenUtxos(item.address, token);\n        for (let utxo of utxos){\n            if (utxo.token_amount < 0) continue;\n            // Skip if this outpoint is already spent\n            if (spentOutpoints && spentOutpoints.has(utxo.outpoint_hash)) continue;\n            txBuilder.from({\n                outpoint: utxo.outpoint_hash,\n                address: item.address,\n                satoshis: utxo.value,\n                groupId: utxo.group,\n                groupAmount: BigInt(utxo.token_amount)\n            });\n            // Add to spent outpoints set\n            if (spentOutpoints) spentOutpoints.add(utxo.outpoint_hash);\n            inTokenAmount = inTokenAmount + BigInt(utxo.token_amount);\n            if (!usedKeys.has(item.address)) usedKeys.add(item.address);\n            if (inTokenAmount > (0, $d78972a39a5ae94f$export$8ba128bc85947a2a)) throw new Error(\"Token inputs exceeded max amount. Consider sending in small chunks\");\n            if (txBuilder.transaction.inputs.length > $c03143e0cae56add$var$MAX_INPUTS_OUTPUTS) throw new Error(\"Too many inputs. Consider consolidating transactions or reduce the send amount.\");\n            if (inTokenAmount == outTokenAmount) return Array.from(usedKeys.values());\n            if (inTokenAmount > outTokenAmount) {\n                // change\n                txBuilder.to(item.address, (0, $hgUW1$Transaction).DUST_AMOUNT, token, inTokenAmount - outTokenAmount);\n                return Array.from(usedKeys.values());\n            }\n        }\n    }\n    throw new Error(\"Not enough token balance\");\n}\nasync function $c03143e0cae56add$export$74e83de914f372c5(txBuilder, addresses, opReturnData, network, spentOutpoints) {\n    let outpoint = '';\n    let usedKeys = [];\n    for (let item of addresses){\n        let utxos = await (0, $884ce55f1db7e177$export$eaa49f0478d81b9d).getNexaUtxos(item.address);\n        for (let utxo of utxos){\n            // Skip if this outpoint is already spent\n            if (spentOutpoints && spentOutpoints.has(utxo.outpoint_hash)) continue;\n            txBuilder.from({\n                outpoint: utxo.outpoint_hash,\n                address: item.address,\n                satoshis: utxo.value\n            });\n            // Add to spent outpoints set\n            if (spentOutpoints) spentOutpoints.add(utxo.outpoint_hash);\n            if ((0, $d78972a39a5ae94f$export$c8733ae29fb53302)(outpoint) && !utxo.has_token) {\n                outpoint = utxo.outpoint_hash;\n                let id = (0, $hgUW1$GroupToken).findGroupId(outpoint, Buffer.from(opReturnData, 'hex'), (0, $hgUW1$GroupToken).authFlags.ACTIVE_FLAG_BITS);\n                const groupId = new (0, $hgUW1$Address)(id.hashBuffer, network, (0, $hgUW1$AddressType).GroupIdAddress).toString();\n                txBuilder.to(item.address, (0, $hgUW1$Transaction).DUST_AMOUNT, groupId, (0, $hgUW1$GroupToken).authFlags.ACTIVE_FLAG_BITS | id.nonce);\n                usedKeys.push(item.address);\n                return usedKeys;\n            }\n        }\n    }\n    throw new Error(\"Not enough Nexa balance.\");\n}\nasync function $c03143e0cae56add$export$1eb54f2f084fd3c6(txBuilder, addresses, outpoint) {\n    let utxo = await (0, $884ce55f1db7e177$export$eaa49f0478d81b9d).getUtxo(outpoint);\n    let address = utxo.addresses[0];\n    txBuilder.from({\n        outpoint: outpoint,\n        address: address,\n        satoshis: utxo.amount\n    });\n    let addrKey = addresses.find((k)=>k.address === address);\n    if (!addrKey) throw new Error('UTXO associated key not found in the wallet');\n    return [\n        addrKey.address\n    ];\n}\nasync function $c03143e0cae56add$export$d7c9c386067a6463(txBuilder, addresses, token, perm, subgroup = '', subgroupAddr = '', quantity, spentOutpoints) {\n    for (let item of addresses){\n        let utxos = await (0, $884ce55f1db7e177$export$eaa49f0478d81b9d).getTokenUtxos(item.address, token);\n        for (let utxo of utxos){\n            if (!(0, $59b5736a17e7320d$export$7f7cffd29bf2d96d)(utxo.token_amount, perm)) continue;\n            // Skip if this outpoint is already spent\n            if (spentOutpoints && spentOutpoints.has(utxo.outpoint_hash)) continue;\n            txBuilder.from({\n                outpoint: utxo.outpoint_hash,\n                address: item.address,\n                satoshis: utxo.value\n            });\n            // Add to spent outpoints set\n            if (spentOutpoints) spentOutpoints.add(utxo.outpoint_hash);\n            if (perm === 'subgroup') {\n                const subgroupQuantity = quantity ?? (0, $59b5736a17e7320d$export$636fb0b03b94ac81)(utxo.token_amount, false);\n                txBuilder.to(subgroupAddr, (0, $hgUW1$Transaction).DUST_AMOUNT, subgroup, subgroupQuantity);\n            }\n            // if renew flag included, we don't want to burn it\n            if ((0, $hgUW1$GroupToken).allowsRenew(BigInt.asUintN(64, BigInt(utxo.token_amount)))) txBuilder.to(item.address, (0, $hgUW1$Transaction).DUST_AMOUNT, token, (0, $59b5736a17e7320d$export$636fb0b03b94ac81)(utxo.token_amount));\n            return [\n                item.address\n            ];\n        }\n    }\n    throw new Error(\"The requested authority not found\");\n}\nasync function $c03143e0cae56add$export$91f9f23df90683cc(txBuilder, addresses, token, amount, parentToken, spentOutpoints) {\n    const usedAddresses = [];\n    // Determine which token to look for authority\n    const authTokenId = parentToken || token;\n    // Find and add mint authority\n    let mintAuthorityFound = false;\n    for (let item of addresses){\n        if (mintAuthorityFound) break;\n        let authUtxos = await (0, $884ce55f1db7e177$export$eaa49f0478d81b9d).getTokenUtxos(item.address, authTokenId);\n        for (let utxo of authUtxos){\n            if (!(0, $59b5736a17e7320d$export$7f7cffd29bf2d96d)(utxo.token_amount, 'mint')) continue;\n            // Skip if already spent\n            if (spentOutpoints && spentOutpoints.has(utxo.outpoint_hash)) continue;\n            // Add mint authority as input\n            txBuilder.from({\n                outpoint: utxo.outpoint_hash,\n                address: item.address,\n                satoshis: utxo.value\n            });\n            if (spentOutpoints) spentOutpoints.add(utxo.outpoint_hash);\n            // Create the minted tokens output\n            txBuilder.to(item.address, (0, $hgUW1$Transaction).DUST_AMOUNT, token, amount);\n            // Preserve the mint authority for future use if renewable\n            if ((0, $hgUW1$GroupToken).allowsRenew(BigInt.asUintN(64, BigInt(utxo.token_amount)))) txBuilder.to(item.address, (0, $hgUW1$Transaction).DUST_AMOUNT, authTokenId, (0, $59b5736a17e7320d$export$636fb0b03b94ac81)(utxo.token_amount));\n            usedAddresses.push(item.address);\n            mintAuthorityFound = true;\n            break;\n        }\n    }\n    if (!mintAuthorityFound) throw new Error(`Mint authority not found for token ${authTokenId}`);\n    return usedAddresses;\n}\nasync function $c03143e0cae56add$export$cfda880a425a2203(txBuilder, addresses, token, amount, parentToken, spentOutpoints) {\n    const usedAddresses = [];\n    // Determine which token to look for melt authority\n    const authTokenId = parentToken || token;\n    // Find and add melt authority first\n    let meltAuthorityFound = false;\n    for (let item of addresses){\n        if (meltAuthorityFound) break;\n        let authUtxos = await (0, $884ce55f1db7e177$export$eaa49f0478d81b9d).getTokenUtxos(item.address, authTokenId);\n        for (let utxo of authUtxos){\n            if (!(0, $59b5736a17e7320d$export$7f7cffd29bf2d96d)(utxo.token_amount, 'melt')) continue;\n            // Skip if already spent\n            if (spentOutpoints && spentOutpoints.has(utxo.outpoint_hash)) continue;\n            // Add melt authority as input\n            txBuilder.from({\n                outpoint: utxo.outpoint_hash,\n                address: item.address,\n                satoshis: utxo.value\n            });\n            if (spentOutpoints) spentOutpoints.add(utxo.outpoint_hash);\n            // Preserve the melt authority for future use if renewable\n            if ((0, $hgUW1$GroupToken).allowsRenew(BigInt.asUintN(64, BigInt(utxo.token_amount)))) txBuilder.to(item.address, (0, $hgUW1$Transaction).DUST_AMOUNT, authTokenId, (0, $59b5736a17e7320d$export$636fb0b03b94ac81)(utxo.token_amount));\n            usedAddresses.push(item.address);\n            meltAuthorityFound = true;\n            break;\n        }\n    }\n    if (!meltAuthorityFound) throw new Error(\"Melt authority not found for token\");\n    // Now find and add token UTXOs to melt\n    let inTokenAmount = 0n;\n    for (let item of addresses){\n        let utxos = await (0, $884ce55f1db7e177$export$eaa49f0478d81b9d).getTokenUtxos(item.address, token);\n        for (let utxo of utxos){\n            // Skip authorities (negative amounts)\n            if (utxo.token_amount < 0) continue;\n            // Skip if already spent\n            if (spentOutpoints && spentOutpoints.has(utxo.outpoint_hash)) continue;\n            // Add token UTXO as input\n            txBuilder.from({\n                outpoint: utxo.outpoint_hash,\n                address: item.address,\n                satoshis: utxo.value,\n                groupId: utxo.group,\n                groupAmount: BigInt(utxo.token_amount)\n            });\n            if (spentOutpoints) spentOutpoints.add(utxo.outpoint_hash);\n            inTokenAmount += BigInt(utxo.token_amount);\n            if (!usedAddresses.includes(item.address)) usedAddresses.push(item.address);\n            // Check if we have enough tokens to melt\n            if (inTokenAmount >= amount) {\n                // Create change output if melting less than full amount\n                if (inTokenAmount > amount) txBuilder.to(item.address, (0, $hgUW1$Transaction).DUST_AMOUNT, token, inTokenAmount - amount);\n                return usedAddresses;\n            }\n        }\n    }\n    throw new Error(`Not enough token balance to melt. Required: ${amount}, Available: ${inTokenAmount}`);\n}\nasync function $c03143e0cae56add$export$5c44e04d8c04c292(txBuilder, addresses, token, perms, toAddr, spentOutpoints) {\n    let usedAddresses = [];\n    let reqiredPerms = new Set(perms);\n    reqiredPerms.add('authorise');\n    for (let item of addresses){\n        let utxos = await (0, $884ce55f1db7e177$export$eaa49f0478d81b9d).getTokenUtxos(item.address, token);\n        for (let utxo of utxos){\n            if (utxo.token_amount > 0) continue;\n            // Skip if this outpoint is already spent\n            if (spentOutpoints && spentOutpoints.has(utxo.outpoint_hash)) continue;\n            let found = false;\n            for (let perm of reqiredPerms)if ((0, $59b5736a17e7320d$export$7f7cffd29bf2d96d)(utxo.token_amount, perm)) {\n                reqiredPerms.delete(perm);\n                found = true;\n            }\n            if (!found) continue;\n            txBuilder.from({\n                outpoint: utxo.outpoint_hash,\n                address: item.address,\n                satoshis: utxo.value\n            });\n            usedAddresses.push(item.address);\n            // Add to spent outpoints set\n            if (spentOutpoints) spentOutpoints.add(utxo.outpoint_hash);\n            // duplicate\n            txBuilder.to(toAddr != null ? toAddr : item.address, (0, $hgUW1$Transaction).DUST_AMOUNT, token, (0, $59b5736a17e7320d$export$636fb0b03b94ac81)(utxo.token_amount));\n            if (reqiredPerms.size === 0) return usedAddresses;\n        }\n    }\n    throw new Error(\"The required authorities not found\");\n}\n\n\n\n\nclass $fab743d51c8bbe7e$export$2e2bcd8739ae039 extends (0, $329d65a0aed426f1$export$bba690fb5c12ba04) {\n    /**\n     * Creates a new WatchOnlyTransactionCreator\n     * @param tx Optional existing transaction builder or transaction data\n     */ constructor(tx){\n        super(tx), /** Addresses that need to be signed with (populated during transaction building) */ this._addressesToSignWith = [], /** Available addresses for input selection and change */ this._availableAddresses = [];\n    }\n    /**\n     * Sets the source addresses for transaction inputs\n     * @param address Single address string, array of addresses, or WatchOnlyAddress objects\n     * @returns This instance for chaining\n     */ from(address) {\n        if ((0, $hgUW1$isString)(address)) {\n            if (!(0, $6f559318d8845d29$export$8d986bd2866fe6ab)(address, this.network) && !(0, $6f559318d8845d29$export$8d986bd2866fe6ab)(address, this.network, (0, $hgUW1$AddressType).PayToPublicKeyHash)) throw new Error('Invalid Address.');\n            // Single address string\n            this._availableAddresses.push({\n                address: address\n            });\n        } else if (Array.isArray(address)) // Array of addresses or WatchOnlyAddress objects\n        address.forEach((addr)=>{\n            if ((0, $hgUW1$isString)(addr)) {\n                if (!(0, $6f559318d8845d29$export$8d986bd2866fe6ab)(addr, this.network) && !(0, $6f559318d8845d29$export$8d986bd2866fe6ab)(addr, this.network, (0, $hgUW1$AddressType).PayToPublicKeyHash)) throw new Error('Invalid Address.');\n                // String address\n                this._availableAddresses.push({\n                    address: addr\n                });\n            } else if (addr && typeof addr === 'object' && 'address' in addr) // WatchOnlyAddress object\n            this._availableAddresses.push(addr);\n        });\n        else if (address.address != null) // Single WatchOnlyAddress object\n        this._availableAddresses.push(address);\n        return this;\n    }\n    /**\n     * Adds a token minting operation to the transaction\n     * @param token Token ID to mint\n     * @param amount Amount to mint\n     * @param toAddr Destination address for minted tokens\n     * @param parent Optional parent token ID (for NFT/SFT minting)\n     * @returns This instance for chaining\n     */ mint(token, amount, toAddr, parent) {\n        this.builder.push(async ()=>{\n            this.tokenAction(toAddr, amount, token, 'mint', parent);\n        });\n        return this;\n    }\n    /**\n     * Adds a token melting operation to the transaction\n     * @param token Token ID to melt\n     * @param amount Amount to melt\n     * @param toAddr Destination address for change of melted tokens\n     * @param parent Optional parent token ID (for NFT/SFT melting)\n     * @returns This instance for chaining\n     */ melt(token, amount, toAddr, parent) {\n        this.builder.push(async ()=>{\n            this.tokenAction(toAddr, amount, token, 'melt', parent);\n        });\n        return this;\n    }\n    /**\n     * Populates the transaction with inputs and outputs based on the configured actions.\n     * Handles different token operations (mint, melt, group creation, etc.) and\n     * populates NEXA inputs for transaction fees.\n     * @returns This instance for chaining\n     */ populate() {\n        this.builder.push(async ()=>{\n            let tokenAddresses = [];\n            let nexaAddresses = [];\n            // Process token operations if any are configured\n            if (this.tokens.size > 0) for (const tokenAction of this.tokens){\n                if (tokenAction.action == 'mint') // Use specialized mint function for groups and subgroups\n                tokenAddresses = tokenAddresses.concat(await (0, $c03143e0cae56add$export$91f9f23df90683cc)(this.transactionBuilder, this._availableAddresses, tokenAction.token, tokenAction.amount, tokenAction.parentToken, this.spentOutpoints));\n                else if (tokenAction.action == 'melt') // Use specialized melt function for groups and subgroups\n                tokenAddresses = tokenAddresses.concat(await (0, $c03143e0cae56add$export$cfda880a425a2203)(this.transactionBuilder, this._availableAddresses, tokenAction.token, tokenAction.amount, tokenAction.parentToken, this.spentOutpoints));\n                else if (tokenAction.action == 'group') // Handle group token creation\n                tokenAddresses = tokenAddresses.concat(await (0, $c03143e0cae56add$export$74e83de914f372c5)(this.transactionBuilder, this._availableAddresses, tokenAction.extraData?.opReturnData, this.network, this.spentOutpoints));\n                else if (tokenAction.action == 'subgroup') // Handle subgroup token creation\n                tokenAddresses = tokenAddresses.concat(await (0, $c03143e0cae56add$export$d7c9c386067a6463)(this.transactionBuilder, this._availableAddresses, tokenAction.parentToken, tokenAction.action, tokenAction.token, this._availableAddresses[0]?.address, tokenAction.extraData?.quantity, this.spentOutpoints));\n                else if (tokenAction.action == 'renew') // Handle authority renewal\n                tokenAddresses = tokenAddresses.concat(await (0, $c03143e0cae56add$export$5c44e04d8c04c292)(this.transactionBuilder, this._availableAddresses, tokenAction.token, tokenAction.extraData.perms, tokenAction.extraData?.address, this.spentOutpoints));\n                else if (tokenAction.action == 'delete') // Handle authority deletion\n                tokenAddresses = tokenAddresses.concat(await (0, $c03143e0cae56add$export$1eb54f2f084fd3c6)(this.transactionBuilder, this._availableAddresses, tokenAction.extraData.outpoint));\n                else // Handle regular token transfers\n                tokenAddresses = tokenAddresses.concat(await (0, $c03143e0cae56add$export$49bc96b87058cba4)(this.transactionBuilder, this._availableAddresses, tokenAction.token, tokenAction.amount, this.spentOutpoints));\n                // Accumulate addresses that need signing\n                this._addressesToSignWith.concat(tokenAddresses);\n            }\n            // Populate NEXA inputs for transaction fees and change\n            nexaAddresses = nexaAddresses.concat(await (0, $c03143e0cae56add$export$20e004915450ed44)(this.transactionBuilder, this._availableAddresses, this.totalValue, this.txOptions, this.spentOutpoints));\n            // Combine all addresses that need signing\n            this._addressesToSignWith = tokenAddresses.concat(nexaAddresses);\n        });\n        return this;\n    }\n    /**\n     * Parse transaction from buffer (not implemented for watch-only)\n     * @param tx Transaction buffer\n     * @returns This instance for chaining\n     * @throws Error indicating method not implemented\n     */ parseTxBuffer(tx) {\n        this.builder.push(async ()=>{\n            this.transactionBuilder = new (0, $hgUW1$TransactionBuilder)(tx);\n        });\n        return this;\n    }\n    /**\n     * Parse transaction from hex string using enhanced base class implementation\n     * @param tx Transaction hex string\n     * @returns This instance for chaining\n     */ parseTxHex(tx) {\n        // Call parent's parseTxHex which handles script template reconstruction\n        return super.parseTxHex(tx);\n    }\n    /**\n     * Handle watch-only specific logic for each parsed input (track addresses for signing)\n     */ async handleParsedInput(_input, utxo, _index) {\n        // Track addresses that will need to be signed with external wallet\n        if (utxo.addresses && utxo.addresses.length > 0) {\n            const address = utxo.addresses[0];\n            if (!this._addressesToSignWith.includes(address)) this._addressesToSignWith.push(address);\n        }\n    }\n}\n\n\n\n\n\n\nclass $d3558bc9d24bb18b$export$2e2bcd8739ae039 {\n    /**\n     * Creates a new WatchOnlyWallet instance\n     * @param addressesToWatch Array of addresses to monitor\n     * @param network Optional network name (defaults to mainnet)\n     * @throws Error if validation fails\n     */ constructor(addressesToWatch, network){\n        // Validate network parameter\n        if (network !== undefined && !(0, $hgUW1$isString)(network)) throw new Error('Network must be a string');\n        if (network !== undefined && (0, $hgUW1$isString)(network)) {\n            const n = (0, $hgUW1$Networks).get(network);\n            if (n === undefined) throw new Error(`Invalid network: ${network}`);\n        }\n        this._network = (0, $hgUW1$Networks).get(network) ?? (0, $hgUW1$Networks).mainnet;\n        // Validate addressesToWatch parameter\n        this._addressesToWatch = this.validateAddressesToWatch(addressesToWatch);\n    }\n    /**\n     * Validates the addresses to watch array\n     * @param addressesToWatch Array of addresses to validate\n     * @returns Validated array of WatchOnlyAddress objects\n     * @throws Error if validation fails\n     */ validateAddressesToWatch(addressesToWatch) {\n        if (addressesToWatch === null || addressesToWatch === undefined) throw new Error('addresesToWatch is required');\n        if (!(0, $hgUW1$isArray)(addressesToWatch)) throw new Error('addressesToWatch must be an array');\n        // Check if array is not empty\n        if (addressesToWatch.length === 0) throw new Error('addressesToWatch cannot be empty');\n        // Validate each address object\n        const validatedAddresses = [];\n        for(let i = 0; i < addressesToWatch.length; i++){\n            const addr = addressesToWatch[i];\n            // Check if address is an object\n            if (!(0, $hgUW1$isObject)(addr) || (0, $hgUW1$isArray)(addr)) throw new Error(`addressesToWatch[${i}] must be an object`);\n            // Check if address property exists and is a string\n            if (!addr.hasOwnProperty('address') || !(0, $hgUW1$isString)(addr.address)) throw new Error(`addressesToWatch[${i}].address must be a string`);\n            // Check if address is not empty\n            if (addr.address.trim() === '') throw new Error(`addressesToWatch[${i}].address cannot be empty`);\n            // Validate address format\n            if (!(0, $6f559318d8845d29$export$8d986bd2866fe6ab)(addr.address, this._network)) throw new Error(`addressesToWatch[${i}].address is not a valid NEXA address: ${addr.address}`);\n            // Validate optional xPub property\n            if (addr.xPub !== undefined && !(0, $hgUW1$isObject)(addr.xPub)) throw new Error(`addressesToWatch[${i}].xPub must be a PublicKey object`);\n            // Validate optional derivationPath property\n            if (addr.derivationPath !== undefined && !(0, $hgUW1$isString)(addr.derivationPath)) throw new Error(`addressesToWatch[${i}].derivationPath must be a string`);\n            // Check for duplicate addresses\n            const isDuplicate = validatedAddresses.some((existingAddr)=>existingAddr.address === addr.address);\n            if (isDuplicate) throw new Error(`Duplicate address found: ${addr.address}`);\n            validatedAddresses.push({\n                address: addr.address.trim(),\n                xPub: addr.xPub,\n                derivationPath: addr.derivationPath\n            });\n        }\n        return validatedAddresses;\n    }\n    /**\n     * Creates a new transaction creator for this watch-only wallet\n     * @param x Optional transaction data - can be a TransactionBuilder, hex string, or Buffer\n     * @returns WatchOnlyTransactionCreator configured with wallet's addresses and network\n     */ newTransaction(x) {\n        let tx;\n        // Handle different input types for creating transactions\n        if (x instanceof (0, $hgUW1$TransactionBuilder)) // Use existing TransactionBuilder instance\n        tx = new (0, $fab743d51c8bbe7e$export$2e2bcd8739ae039)(x);\n        else if ((0, $hgUW1$isString)(x)) // Parse transaction from hex string\n        tx = new (0, $fab743d51c8bbe7e$export$2e2bcd8739ae039)().parseTxHex(x);\n        else if ((0, $hgUW1$isBuffer)(x) && !(0, $hgUW1$isNil)(x)) // Parse transaction from buffer\n        tx = new (0, $fab743d51c8bbe7e$export$2e2bcd8739ae039)().parseTxBuffer(x);\n        else // Create new empty transaction\n        tx = new (0, $fab743d51c8bbe7e$export$2e2bcd8739ae039)();\n        // Configure transaction with wallet's addresses and network\n        return tx.from(this._addressesToWatch).onNetwork(this._network);\n    }\n    /**\n     * Broadcasts a signed transaction to the network\n     * @param transaction Hex-encoded signed transaction\n     * @returns Promise resolving to transaction ID\n     * @throws Error if transaction is invalid or broadcast fails\n     */ async sendTransaction(transaction) {\n        (0, $006d7f03de390713$export$2e2bcd8739ae039).validateArgument((0, $hgUW1$isString)(transaction), 'transaction must be present and valid');\n        return (0, $884ce55f1db7e177$export$eaa49f0478d81b9d).broadcast(transaction);\n    }\n    async subscribeToAddressNotifications(callback) {\n        await (0, $884ce55f1db7e177$export$eaa49f0478d81b9d).subscribeToAddresses(this._addressesToWatch.map((addr)=>addr.address), callback);\n    }\n    /**\n     * Unsubscribe from address notifications to prevent memory leaks\n     * \n     * This method stops listening for notifications on all watched addresses.\n     * The callback parameter must be the exact same function reference that was\n     * used in the subscribeToAddressNotifications call.\n     * \n     * @param callback - The exact same callback function used in subscribeToAddressNotifications\n     * \n     * @example\n     * ```typescript\n     * const myCallback = (notification) => console.log(notification);\n     * await watchOnlyWallet.subscribeToAddressNotifications(myCallback);\n     * \n     * // Later, to prevent memory leaks:\n     * await watchOnlyWallet.unsubscribeFromAddressNotifications(myCallback);\n     * ```\n     */ async unsubscribeFromAddressNotifications(callback) {\n        await (0, $884ce55f1db7e177$export$eaa49f0478d81b9d).unsubscribeFromAddresses(this._addressesToWatch.map((addr)=>addr.address), callback);\n    }\n    /**\n     * Gets the list of addresses being watched\n     * @returns Array of watched addresses (copy to prevent mutation)\n     */ getWatchedAddresses() {\n        return [\n            ...this._addressesToWatch\n        ];\n    }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nconst $5358ccf67a3d811b$export$618de809a659cb44 = {\n    approveTransaction: async ()=>true,\n    approveMessage: async ()=>true,\n    approveSendTransaction: async ()=>true,\n    approveNetworkSwitch: async ()=>true,\n    approveAddToken: async ()=>true,\n    approveConnection: async ()=>true\n};\n\n\n/**\n * Extract all token outputs and amounts from transaction hex\n * @param txHex - Transaction hex string\n * @param network - Network to use for token address creation\n * @returns Array of token outputs with tokenId and amount\n */ const $d838721b0af30ac5$var$getTokenOutputsFromTx = (txHex, network)=>{\n    const tokenOutputs = [];\n    try {\n        const transaction = new (0, $hgUW1$Transaction)(txHex);\n        for (const output of transaction.outputs)if (output.type !== 0 && output.scriptPubKey.chunks[0]?.opcodenum >= 32) {\n            const tokenIdHex = output.scriptPubKey.chunks[0].buf?.toString('hex');\n            if (tokenIdHex && output.scriptPubKey.chunks[1]?.buf) {\n                const tokenAddress = (0, $hgUW1$Address).fromObject({\n                    data: tokenIdHex,\n                    network: network.toString(),\n                    type: (0, $hgUW1$AddressType).GroupIdAddress\n                });\n                if (tokenAddress !== null) {\n                    const tokenAddressStr = tokenAddress.toString();\n                    // Extract token amount\n                    const tokenAmount = (0, $hgUW1$BNExtended).fromScriptNumBuffer(output.scriptPubKey.chunks[1].buf, false, 8).toBigInt();\n                    tokenOutputs.push({\n                        tokenId: tokenAddressStr,\n                        amount: tokenAmount.toString()\n                    });\n                }\n            }\n        }\n    } catch (error) {\n        console.warn('Failed to extract token data from transaction:', error);\n    }\n    return tokenOutputs;\n};\nclass $d838721b0af30ac5$export$11e896a2f3ae4119 {\n    constructor(wallet, approvalCallbacks){\n        this.provider = null;\n        this.currentAccount = null;\n        this.isConnected = false;\n        this.connectedDApp = null;\n        this.wallet = wallet;\n        this.approvalCallbacks = approvalCallbacks || (0, $5358ccf67a3d811b$export$618de809a659cb44);\n    }\n    /**\n     * Set approval callbacks for handling user consent\n     */ setApprovalCallbacks(callbacks) {\n        this.approvalCallbacks = callbacks;\n    }\n    /**\n     * Connect to a dApp using a pairing URI\n     *\n     * This method will only use DApp accounts for security isolation.\n     * If no DApp account is provided, the first available one will be used or created.\n     *\n     * @param pairingURI - The pairing URI from the dApp (usually from QR code)\n     * @param dappAccount - Optional specific DApp account to use (defaults to first available)\n     * @returns Information about the connected dApp\n     */ async connect(pairingURI, dappAccount) {\n        if (this.isConnected) this.disconnect();\n        this.provider = new (0, $hgUW1$DAppProvider)(pairingURI);\n        // Set up request handlers\n        this.setupHandlers();\n        // Connect to the dApp\n        const dAppInfo = await this.provider.connect();\n        // Request approval for connection if callback is provided\n        if (this.approvalCallbacks.approveConnection) {\n            const approved = await this.approvalCallbacks.approveConnection(dAppInfo);\n            if (!approved) {\n                this.provider.disconnect();\n                throw new (0, $hgUW1$JsonRpcError)((0, $hgUW1$JsonRpcErrorCode).RequestRejected, 'Connection rejected by user');\n            }\n        }\n        this.connectedDApp = dAppInfo;\n        // Use provided DApp account or get/create one\n        if (dappAccount) {\n            // Validate it's actually a DApp account\n            if (dappAccount.getAccountType() !== (0, $6f559318d8845d29$export$b8ca5fa4899cbfc7).DAPP_ACCOUNT) throw new Error('Only DApp accounts can be used with WalletComms');\n            this.currentAccount = dappAccount;\n        } else this.currentAccount = await this.getOrCreateDAppAccount();\n        // Join the session with the DApp account address\n        const primaryAddress = this.currentAccount.getPrimaryAddressKey();\n        await this.provider.joinSession(primaryAddress.address);\n        this.isConnected = true;\n        return dAppInfo;\n    }\n    /**\n     * Get an existing DApp account or create a new one\n     *\n     * @returns A DApp account\n     */ async getOrCreateDAppAccount() {\n        // Get all DApp accounts using the new helper method\n        const dappAccounts = this.wallet.accountStore.getAccountsByType((0, $6f559318d8845d29$export$b8ca5fa4899cbfc7).DAPP_ACCOUNT);\n        // Return first existing DApp account or create a new one\n        if (dappAccounts.length > 0) return dappAccounts[0];\n        // No DApp accounts exist, create one\n        return await this.wallet.newAccount((0, $6f559318d8845d29$export$b8ca5fa4899cbfc7).DAPP_ACCOUNT);\n    }\n    /**\n     * Disconnect from the current dApp session\n     */ disconnect() {\n        if (this.provider) {\n            this.provider.disconnect();\n            this.provider = null;\n        }\n        this.isConnected = false;\n        this.currentAccount = null;\n    }\n    /**\n     * Set up handlers for dApp requests\n     */ setupHandlers() {\n        if (!this.provider) return;\n        // Handle message signing requests\n        this.provider.onSignMessage(async (request)=>{\n            try {\n                const account = this.getAccountByAddress(request.account);\n                if (!account) throw new (0, $hgUW1$JsonRpcError)((0, $hgUW1$JsonRpcErrorCode).InvalidParams, `Account ${request.account} not found`);\n                // Request approval for message signing\n                if (this.approvalCallbacks.approveMessage && this.connectedDApp) {\n                    const approvalDetails = {\n                        dApp: this.connectedDApp,\n                        account: request.account,\n                        message: request.message,\n                        messagePreview: request.message.length > 100 ? request.message.substring(0, 100) + '...' : request.message\n                    };\n                    const approved = await this.approvalCallbacks.approveMessage(approvalDetails);\n                    if (!approved) throw new (0, $hgUW1$JsonRpcError)((0, $hgUW1$JsonRpcErrorCode).RequestRejected, 'Message signing rejected by user');\n                }\n                return this.wallet.signMessage(request.message, request.account);\n            } catch (error) {\n                throw new (0, $hgUW1$JsonRpcError)((0, $hgUW1$JsonRpcErrorCode).InternalError, error instanceof Error ? error.message : 'Failed to sign message');\n            }\n        });\n        // Handle get account requests\n        this.provider.on('wallet_getAccount', async ()=>{\n            if (!this.currentAccount) throw new (0, $hgUW1$JsonRpcError)((0, $hgUW1$JsonRpcErrorCode).InternalError, 'No account selected');\n            const primaryAddress = this.currentAccount.getPrimaryAddressKey();\n            return primaryAddress.address;\n        });\n        // Handle get accounts (multiple) requests - only return DApp accounts\n        this.provider.on('wallet_getAccounts', async ()=>{\n            const dappAccounts = this.wallet.accountStore.getAccountsByType((0, $6f559318d8845d29$export$b8ca5fa4899cbfc7).DAPP_ACCOUNT);\n            const addresses = [];\n            // Return addresses from all DApp accounts\n            for (const account of dappAccounts){\n                const primaryAddress = account.getPrimaryAddressKey();\n                addresses.push(primaryAddress.address);\n            }\n            return addresses;\n        });\n        // Handle transaction signing requests\n        this.provider.on('wallet_signTransaction', async (request)=>{\n            try {\n                const account = this.getAccountByAddress(request.account);\n                if (!account) throw new (0, $hgUW1$JsonRpcError)((0, $hgUW1$JsonRpcErrorCode).InvalidParams, `Account ${request.account} not found`);\n                // Request approval for transaction signing\n                if (this.approvalCallbacks.approveTransaction && this.connectedDApp) {\n                    // Parse transaction to extract readable details\n                    let totalAmount = 'Unknown';\n                    let fees = 'Unknown';\n                    try {\n                        const tempBuilder = this.wallet.newTransaction(account, request.hex);\n                        const tx = tempBuilder.transactionBuilder.build();\n                        // Calculate total NEXA amount being sent (excluding change)\n                        let nexaTotal = 0n;\n                        for (const output of tx.outputs)if (output.value != BigInt((0, $hgUW1$Transaction).DUST_AMOUNT)) nexaTotal += output.value;\n                        // Estimate fees\n                        const estimatedFee = tx.estimateRequiredFee();\n                        totalAmount = nexaTotal.toString();\n                        fees = estimatedFee.toString();\n                    } catch (error) {\n                        // If parsing fails, keep default \"Unknown\" values\n                        console.warn('Failed to parse transaction for approval details:', error);\n                    }\n                    // Extract token outputs from transaction hex\n                    const tokenOutputs = $d838721b0af30ac5$var$getTokenOutputsFromTx(request.hex, this.wallet.network);\n                    const approvalDetails = {\n                        dApp: this.connectedDApp,\n                        account: request.account,\n                        transactionHex: request.hex,\n                        broadcast: request.broadcast || false,\n                        totalAmount: totalAmount,\n                        fees: fees,\n                        tokenOutputs: tokenOutputs.length > 0 ? tokenOutputs : undefined\n                    };\n                    const approved = await this.approvalCallbacks.approveTransaction(approvalDetails);\n                    if (!approved) throw new (0, $hgUW1$JsonRpcError)((0, $hgUW1$JsonRpcErrorCode).RequestRejected, 'Transaction signing rejected by user');\n                }\n                // Parse and sign the transaction\n                let txBuilder = this.wallet.newTransaction(account, request.hex);\n                txBuilder = txBuilder.sign();\n                const tx = await txBuilder.build();\n                // Broadcast if requested\n                if (request.broadcast) return await this.wallet.sendTransaction(tx); // Return just the txId string\n                return tx; // Return just the transaction hex string\n            } catch (error) {\n                throw new (0, $hgUW1$JsonRpcError)((0, $hgUW1$JsonRpcErrorCode).InternalError, error instanceof Error ? error.message : 'Failed to sign transaction');\n            }\n        });\n        // Handle send transaction requests\n        this.provider.on('wallet_sendTransaction', async (request)=>{\n            try {\n                const account = this.getAccountByAddress(request.from);\n                if (!account) throw new (0, $hgUW1$JsonRpcError)((0, $hgUW1$JsonRpcErrorCode).InvalidParams, `Account ${request.from} not found`);\n                // Calculate total amount\n                let totalAmount = BigInt(0);\n                for (const recipient of request.to)if (!recipient.token) totalAmount += BigInt(recipient.amount);\n                // Request approval for sending transaction\n                if (this.approvalCallbacks.approveSendTransaction && this.connectedDApp) {\n                    const approvalDetails = {\n                        dApp: this.connectedDApp,\n                        fromAccount: request.from,\n                        recipients: request.to,\n                        totalAmount: totalAmount.toString(),\n                        opReturn: request.data\n                    };\n                    const approved = await this.approvalCallbacks.approveSendTransaction(approvalDetails);\n                    if (!approved) throw new (0, $hgUW1$JsonRpcError)((0, $hgUW1$JsonRpcErrorCode).RequestRejected, 'Send transaction rejected by user');\n                }\n                let txBuilder = this.wallet.newTransaction(account).onNetwork(this.wallet.network);\n                // Add recipients\n                for (const recipient of request.to)if (recipient.token) txBuilder = txBuilder.sendToToken(recipient.address, recipient.amount, recipient.token);\n                else txBuilder = txBuilder.sendTo(recipient.address, recipient.amount);\n                // Add OP_RETURN data if provided\n                if (request.data) txBuilder = txBuilder.addOpReturn(request.data);\n                // Build and send the transaction\n                const tx = await txBuilder.populate().sign().build();\n                const txId = await this.wallet.sendTransaction(tx);\n                return {\n                    txId: txId,\n                    hex: tx\n                };\n            } catch (error) {\n                throw new (0, $hgUW1$JsonRpcError)((0, $hgUW1$JsonRpcErrorCode).InternalError, error instanceof Error ? error.message : 'Failed to send transaction');\n            }\n        });\n        // Handle network switching requests\n        this.provider.on('wallet_switchNetwork', async (request)=>{\n            try {\n                // Validate network\n                const network = (0, $hgUW1$Networks).get(request.network);\n                if (!network) throw new (0, $hgUW1$JsonRpcError)((0, $hgUW1$JsonRpcErrorCode).InvalidParams, `Unknown network: ${request.network}`);\n                // Reconnect to the new network\n                await (0, $884ce55f1db7e177$export$eaa49f0478d81b9d).connect(request.network);\n                return {\n                    success: true,\n                    network: request.network\n                };\n            } catch (error) {\n                throw new (0, $hgUW1$JsonRpcError)((0, $hgUW1$JsonRpcErrorCode).InternalError, error instanceof Error ? error.message : 'Failed to switch network');\n            }\n        });\n        // Handle add token requests\n        this.provider.on('wallet_addToken', async (request)=>{\n            // This would need implementation based on how tokens are tracked\n            // For now, we'll acknowledge but not implement\n            console.log('Add token request:', request);\n            return {\n                success: true\n            };\n        });\n        // Handle peer disconnect\n        this.provider.onPeerDisconnect(()=>{\n            console.log('DApp disconnected');\n            this.isConnected = false;\n        });\n        // Handle connection close\n        this.provider.onClose(()=>{\n            console.log('Connection closed');\n            this.isConnected = false;\n        });\n    }\n    /**\n     * Get an account by its address\n     */ getAccountByAddress(address) {\n        const accounts = this.wallet.accountStore.listAccounts();\n        for (const [_, account] of accounts){\n            const addresses = account.getAddresses();\n            if (addresses.some((addr)=>addr.address === address)) return account;\n        }\n        return null;\n    }\n    /**\n     * Switch the active account\n     */ setActiveAccount(account) {\n        this.currentAccount = account;\n    }\n    /**\n     * Get the current active account\n     */ getActiveAccount() {\n        return this.currentAccount;\n    }\n    /**\n     * Check if connected to a dApp\n     */ isConnectedToDApp() {\n        return this.isConnected;\n    }\n    /**\n     * Get the current session details\n     */ getSessionInfo() {\n        if (!this.provider) return null;\n        return this.provider.getSessionInfo();\n    }\n}\n\n\n\n\n\nclass $b55de282653776c6$export$80793d8292a1630a {\n    /**\n     * Creates a new DAppCommsProvider instance\n     * @param relayUrl The WalletComms relay server URL\n     * @param dAppInfo Information about your dApp\n     * @param network Optional network (defaults to mainnet)\n     */ constructor(relayUrl, dAppInfo, network = 'mainnet'){\n        this.watchOnlyWallet = null;\n        this.connectedWalletAddress = null;\n        this.currentNetwork = 'mainnet';\n        this.provider = new (0, $hgUW1$WalletProvider)(relayUrl, dAppInfo);\n        this.currentNetwork = network;\n    }\n    /**\n     * Connect to the WalletComms relay server\n     * @returns Promise resolving when connected\n     */ async connect() {\n        await this.provider.connect();\n        // Connect to the appropriate network\n        await (0, $884ce55f1db7e177$export$eaa49f0478d81b9d).connect(this.currentNetwork);\n    }\n    /**\n     * Get the pairing URI for QR code display\n     * @returns The pairing URI string\n     */ getPairingURI() {\n        return this.provider.getPairingURI();\n    }\n    /**\n     * Wait for a wallet to connect\n     * @param timeout Timeout in milliseconds (default 30000)\n     * @returns Promise resolving to the wallet address\n     */ async waitForWallet(timeout = 30000) {\n        try {\n            // Use the built-in waitForWallet method from WalletProvider\n            const walletAddress = await this.provider.waitForWallet(timeout);\n            this.connectedWalletAddress = walletAddress;\n            // Create WatchOnlyWallet with the connected address\n            this.watchOnlyWallet = new (0, $d3558bc9d24bb18b$export$2e2bcd8739ae039)([\n                {\n                    address: walletAddress\n                }\n            ], this.currentNetwork);\n            return walletAddress;\n        } catch (error) {\n            throw new Error(`Failed to connect wallet: ${error instanceof Error ? error.message : 'Unknown error'}`);\n        }\n    }\n    /**\n     * Send NEXA to an address\n     * @param toAddress Destination address\n     * @param amount Amount in satoshis (as string)\n     * @param opReturnData Optional OP_RETURN data\n     * @param broadcast Whether to broadcast immediately (default true)\n     * @returns Promise resolving to transaction ID or signed hex\n     */ async sendTransaction(toAddress, amount, opReturnData, broadcast = true) {\n        if (!this.watchOnlyWallet || !this.connectedWalletAddress) throw new Error('No wallet connected');\n        // Create unsigned transaction using WatchOnlyWallet\n        let txBuilder = this.watchOnlyWallet.newTransaction().sendTo(toAddress, amount);\n        // Add OP_RETURN data if provided\n        if (opReturnData) txBuilder = txBuilder.addOpReturn(opReturnData);\n        // Populate and build unsigned transaction\n        const unsignedTx = await txBuilder.populate().build();\n        return await this.provider.signTransaction(this.connectedWalletAddress, unsignedTx, broadcast);\n    }\n    /**\n     * Send tokens to an address\n     * @param toAddress Destination address\n     * @param amount Amount of tokens (as string)\n     * @param tokenId Token ID\n     * @param opReturnData Optional OP_RETURN data\n     * @param broadcast Whether to broadcast immediately (default true)\n     * @returns Promise resolving to transaction ID or signed hex\n     */ async sendTokenTransaction(toAddress, amount, tokenId, opReturnData, broadcast = true) {\n        if (!this.watchOnlyWallet || !this.connectedWalletAddress) throw new Error('No wallet connected');\n        // Create unsigned token transaction\n        let txBuilder = this.watchOnlyWallet.newTransaction().sendToToken(toAddress, amount, tokenId);\n        // Add OP_RETURN data if provided\n        if (opReturnData) txBuilder = txBuilder.addOpReturn(opReturnData);\n        // Populate and build unsigned transaction\n        const unsignedTx = await txBuilder.populate().build();\n        return await this.provider.signTransaction(this.connectedWalletAddress, unsignedTx, broadcast);\n    }\n    /**\n     * Create and mint a new token\n     * @param name Token name\n     * @param ticker Token ticker symbol\n     * @param decimals Number of decimal places\n     * @param docUrl URL to token documentation\n     * @param docHash Hash of token documentation\n     * @param broadcast Whether to broadcast immediately (default true)\n     * @returns Promise resolving to transaction ID or signed hex\n     */ async createToken(name, ticker, decimals, docUrl, docHash, broadcast = true) {\n        if (!this.watchOnlyWallet || !this.connectedWalletAddress) throw new Error('No wallet connected');\n        // Create token creation transaction\n        const unsignedTx = await this.watchOnlyWallet.newTransaction().token(name, ticker, decimals, docUrl, docHash).populate().build();\n        return await this.provider.signTransaction(this.connectedWalletAddress, unsignedTx, broadcast);\n    }\n    /**\n     * Create and mint a new NFT collection\n     * @param name Collection name\n     * @param ticker Collection ticker symbol\n     * @param docUrl URL to collection documentation\n     * @param docHash Hash of collection documentation\n     * @param broadcast Whether to broadcast immediately (default true)\n     * @returns Promise resolving to transaction ID or signed hex\n     */ async createCollection(name, ticker, docUrl, docHash, broadcast = true) {\n        if (!this.watchOnlyWallet || !this.connectedWalletAddress) throw new Error('No wallet connected');\n        // Create collection creation transaction\n        const unsignedTx = await this.watchOnlyWallet.newTransaction().collection(name, ticker, docUrl, docHash).populate().build();\n        return await this.provider.signTransaction(this.connectedWalletAddress, unsignedTx, broadcast);\n    }\n    /**\n     * Create and mint an NFT within a collection\n     * @param parentCollection Parent collection token ID\n     * @param zipUrl URL to NFT content ZIP file\n     * @param zipHash Hash of NFT content ZIP file\n     * @param broadcast Whether to broadcast immediately (default true)\n     * @returns Promise resolving to transaction ID or signed hex\n     */ async createNFT(parentCollection, zipUrl, zipHash, broadcast = true) {\n        if (!this.watchOnlyWallet || !this.connectedWalletAddress) throw new Error('No wallet connected');\n        // Create NFT creation transaction\n        const unsignedTx = await this.watchOnlyWallet.newTransaction().nft(parentCollection, zipUrl, zipHash).populate().build();\n        return await this.provider.signTransaction(this.connectedWalletAddress, unsignedTx, broadcast);\n    }\n    /**\n     * Create and mint an SFT (Semi-Fungible Token) within a collection with specified quantity\n     * @param parentCollection Parent collection token ID\n     * @param zipUrl URL to SFT content ZIP file\n     * @param zipHash Hash of SFT content ZIP file\n     * @param quantity Quantity of SFTs to create\n     * @param broadcast Whether to broadcast immediately (default true)\n     * @returns Promise resolving to transaction ID or signed hex\n     */ async createSFT(parentCollection, zipUrl, zipHash, quantity, broadcast = true) {\n        if (!this.watchOnlyWallet || !this.connectedWalletAddress) throw new Error('No wallet connected');\n        // Create SFT creation transaction\n        const unsignedTx = await this.watchOnlyWallet.newTransaction().sft(parentCollection, zipUrl, zipHash, quantity).populate().build();\n        return await this.provider.signTransaction(this.connectedWalletAddress, unsignedTx, broadcast);\n    }\n    /**\n     * Sign an arbitrary unsigned transaction\n     * @param unsignedTx Unsigned transaction hex string\n     * @param sighashSpec Optional sighash specification for selective signing\n     * @param broadcast Whether to broadcast immediately (default false)\n     * @returns Promise resolving to transaction ID (if broadcast) or signed hex\n     */ async signTransaction(unsignedTx, sighashSpec, broadcast = false) {\n        if (!this.connectedWalletAddress) throw new Error('No wallet connected');\n        return await this.provider.signTransaction(this.connectedWalletAddress, unsignedTx, broadcast);\n    }\n    /**\n     * Build an unsigned transaction without signing\n     * @param toAddress Destination address\n     * @param amount Amount in satoshis (as string)\n     * @param tokenId Optional token ID for token transfers\n     * @param opReturnData Optional OP_RETURN data\n     * @returns Promise resolving to unsigned transaction hex\n     */ async buildTransaction(toAddress, amount, tokenId, opReturnData) {\n        if (!this.watchOnlyWallet) throw new Error('No wallet connected');\n        let txBuilder = this.watchOnlyWallet.newTransaction();\n        if (tokenId) txBuilder = txBuilder.sendToToken(toAddress, amount, tokenId);\n        else txBuilder = txBuilder.sendTo(toAddress, amount);\n        if (opReturnData) txBuilder = txBuilder.addOpReturn(opReturnData);\n        return await txBuilder.populate().build();\n    }\n    /**\n     * Build an unsigned token creation transaction\n     * @param name Token name\n     * @param ticker Token ticker symbol\n     * @param decimals Number of decimal places\n     * @param docUrl URL to token documentation\n     * @param docHash Hash of token documentation\n     * @returns Promise resolving to unsigned transaction hex\n     */ async buildTokenCreation(name, ticker, decimals, docUrl, docHash) {\n        if (!this.watchOnlyWallet) throw new Error('No wallet connected');\n        return await this.watchOnlyWallet.newTransaction().token(name, ticker, decimals, docUrl, docHash).populate().build();\n    }\n    /**\n     * Build an unsigned collection creation transaction\n     * @param name Collection name\n     * @param ticker Collection ticker symbol\n     * @param docUrl URL to collection documentation\n     * @param docHash Hash of collection documentation\n     * @returns Promise resolving to unsigned transaction hex\n     */ async buildCollectionCreation(name, ticker, docUrl, docHash) {\n        if (!this.watchOnlyWallet) throw new Error('No wallet connected');\n        return await this.watchOnlyWallet.newTransaction().collection(name, ticker, docUrl, docHash).populate().build();\n    }\n    /**\n     * Build an unsigned NFT creation transaction\n     * @param parentCollection Parent collection token ID\n     * @param zipUrl URL to NFT content ZIP file\n     * @param zipHash Hash of NFT content ZIP file\n     * @returns Promise resolving to unsigned transaction hex\n     */ async buildNFTCreation(parentCollection, zipUrl, zipHash) {\n        if (!this.watchOnlyWallet) throw new Error('No wallet connected');\n        return await this.watchOnlyWallet.newTransaction().nft(parentCollection, zipUrl, zipHash).populate().build();\n    }\n    /**\n     * Build an unsigned SFT creation transaction\n     * @param parentCollection Parent collection token ID\n     * @param zipUrl URL to SFT content ZIP file\n     * @param zipHash Hash of SFT content ZIP file\n     * @param quantity Quantity of SFTs to create\n     * @returns Promise resolving to unsigned transaction hex\n     */ async buildSFTCreation(parentCollection, zipUrl, zipHash, quantity) {\n        if (!this.watchOnlyWallet) throw new Error('No wallet connected');\n        return await this.watchOnlyWallet.newTransaction().sft(parentCollection, zipUrl, zipHash, quantity).populate().build();\n    }\n    /**\n     * Initialize WatchOnlyWallet with multiple addresses\n     * @param addresses Array of addresses to watch\n     */ initializeWatchOnly(addresses) {\n        this.watchOnlyWallet = new (0, $d3558bc9d24bb18b$export$2e2bcd8739ae039)(addresses.map((addr)=>({\n                address: addr\n            })), this.currentNetwork);\n    }\n    /**\n     * Create a custom unsigned transaction\n     * @param txBuilder Function that configures the transaction builder\n     * @param sighashSpec Optional sighash specification for selective signing\n     * @param broadcast Whether to broadcast immediately (default true)\n     * @returns Promise resolving to transaction ID or signed hex\n     */ async createCustomTransaction(txBuilder, sighashSpec, broadcast = true) {\n        if (!this.watchOnlyWallet || !this.connectedWalletAddress) throw new Error('No wallet connected');\n        // Create custom transaction using provided builder function\n        const builder = this.watchOnlyWallet.newTransaction();\n        const configuredBuilder = txBuilder(builder);\n        const unsignedTx = await configuredBuilder.populate().build();\n        return await this.provider.signTransaction(this.connectedWalletAddress, unsignedTx, broadcast);\n    }\n    /**\n     * Sign a message with the connected wallet\n     * @param message Message to sign\n     * @returns Promise resolving to the signature\n     */ async signMessage(message) {\n        if (!this.connectedWalletAddress) throw new Error('No wallet connected');\n        return await this.provider.signMessage(this.connectedWalletAddress, message);\n    }\n    /**\n     * Switch to a different network\n     * @param network Network name or identifier\n     * @returns Promise resolving when network is switched\n     */ async switchNetwork(network) {\n        await this.provider.switchNetwork(network);\n        this.currentNetwork = network;\n        // Reconnect rostrum provider to new network\n        await (0, $884ce55f1db7e177$export$eaa49f0478d81b9d).connect(network);\n        // Update watch-only wallet network if connected\n        if (this.watchOnlyWallet && this.connectedWalletAddress) this.watchOnlyWallet = new (0, $d3558bc9d24bb18b$export$2e2bcd8739ae039)([\n            {\n                address: this.connectedWalletAddress\n            }\n        ], network);\n    }\n    /**\n     * Get the currently connected wallet address\n     * @returns Wallet address or null if not connected\n     */ getConnectedWallet() {\n        return this.connectedWalletAddress;\n    }\n    /**\n     * Check if a wallet is currently connected\n     * @returns True if wallet is connected\n     */ isConnected() {\n        return this.connectedWalletAddress !== null;\n    }\n    /**\n     * Get the current network\n     * @returns Current network identifier\n     */ getCurrentNetwork() {\n        return this.currentNetwork;\n    }\n    /**\n     * Get the underlying WatchOnlyWallet instance\n     * @returns WatchOnlyWallet instance or null if not connected\n     */ getWatchOnlyWallet() {\n        return this.watchOnlyWallet;\n    }\n    /**\n     * Disconnect from the wallet\n     */ disconnect() {\n        this.provider.disconnect();\n        this.watchOnlyWallet = null;\n        this.connectedWalletAddress = null;\n    }\n    /**\n     * Set up event listeners for wallet events\n     * @param event Event name\n     * @param callback Event callback\n     */ on(event, callback) {\n        this.provider.on(event, callback);\n    }\n    /**\n     * Remove event listeners\n     * @param event Event name\n     */ off(event) {\n        this.provider.off(event);\n    }\n    /**\n     * Set up wallet disconnect event listener\n     * @param callback Function to call when wallet disconnects\n     */ onWalletDisconnect(callback) {\n        this.provider.onPeerDisconnect(()=>{\n            this.watchOnlyWallet = null;\n            this.connectedWalletAddress = null;\n            callback();\n        });\n    }\n    /**\n     * Set up connection close event listener\n     * @param callback Function to call when connection closes\n     */ onConnectionClose(callback) {\n        this.provider.onClose(()=>{\n            this.watchOnlyWallet = null;\n            this.connectedWalletAddress = null;\n            callback();\n        });\n    }\n}\nvar $b55de282653776c6$export$2e2bcd8739ae039 = $b55de282653776c6$export$80793d8292a1630a;\n\n\n\n\n\n/**\n * Guards against multiple instances of the wallet SDK being loaded.\n * This prevents conflicts and ensures only one version is active at a time.\n * @param version - The version string to check\n * @throws {Error} When multiple instances are detected\n */ function $149c1bd638913645$var$versionGuard(version) {\n    if (version !== undefined) {\n        let message = \"More than one instance of Wallet SDKPlease make sure to require Wallet SDK and check that submodules do not also include their own Wallet SDK dependency.\";\n        throw new Error(message);\n    }\n}\n$149c1bd638913645$var$versionGuard($parcel$global._walletSdk_ver);\n$parcel$global._walletSdk_ver = `v${0, $df64573ef6d51081$exports.version}`;\n/**\n * Wallet SDK - A TypeScript SDK for the Nexa blockchain\n *\n * This SDK provides comprehensive wallet functionality including:\n * - Creating and managing wallets from seed phrases or private keys\n * - Account management with different account types\n * - Transaction building and signing\n * - Token operations and management\n * - Message signing and verification\n *\n * @example\n * ```typescript\n * import { Wallet } from 'wallet-sdk-ts';\n *\n * // Create a new wallet\n * const wallet = Wallet.create();\n *\n * // Or restore from seed phrase\n * const wallet = Wallet.fromSeedPhrase('your seed phrase here');\n *\n * // Initialize and discover accounts\n * await wallet.initialize();\n * ```\n */ const $149c1bd638913645$var$walletSdk = {\n    versionGuard: $149c1bd638913645$var$versionGuard,\n    version: `v${(0, $df64573ef6d51081$exports.version)}`,\n    Wallet: $8265cc68049fe82c$export$2e2bcd8739ae039\n};\nvar $149c1bd638913645$export$2e2bcd8739ae039 = $149c1bd638913645$var$walletSdk;\n\n\nexport {$149c1bd638913645$export$2e2bcd8739ae039 as default, $8265cc68049fe82c$export$2e2bcd8739ae039 as Wallet, $d3558bc9d24bb18b$export$2e2bcd8739ae039 as WatchOnlyWallet, $6f559318d8845d29$export$b8ca5fa4899cbfc7 as AccountType, $6f559318d8845d29$export$dcc1fb6ad5308e56 as TxTokenType, $6f559318d8845d29$export$8d986bd2866fe6ab as isValidNexaAddress, $006d7f03de390713$export$2e2bcd8739ae039 as ValidationUtils, $b76a3f2ef1862027$export$c54c8796e94a37a0 as BaseAccount, $5c605efdbcfd6698$export$2e2bcd8739ae039 as DefaultAccount, $448355556707518b$export$2e2bcd8739ae039 as DappAccount, $ce8955c0465759ad$export$2e2bcd8739ae039 as VaultAccount, $7e26340ce0f64954$export$2e2bcd8739ae039 as AccountStore, $d71d9063d6876a10$export$2e2bcd8739ae039 as WalletTransactionCreator, $fab743d51c8bbe7e$export$2e2bcd8739ae039 as WatchOnlyTransactionCreator, $884ce55f1db7e177$export$eaa49f0478d81b9d as rostrumProvider, $d838721b0af30ac5$export$11e896a2f3ae4119 as WalletCommsIntegration, $b55de282653776c6$export$80793d8292a1630a as DAppCommsProvider, $5358ccf67a3d811b$export$618de809a659cb44 as AUTO_APPROVE_CALLBACKS, $149c1bd638913645$re_export$SighashType as SighashType, $441c371114e3ba96$export$94f569bf4eb0f6f6 as AccountKeysUtils};\n//# sourceMappingURL=index.web.mjs.map\n"],"names":["Symbol","objectProto","hasOwnProperty","nativeObjectToString","symToStringTag","reTrimStart","isObject","funcTag","funcProto","funcToString","WeakMap","argsTag","freeExports","freeModule","moduleExports","dateTag","mapTag","numberTag","objectTag","setTag","stringTag","weakMapTag","dataViewTag","Map","DataView","Promise","Set","isInteger","isNumber","parseInt","add","RoundingModes","bigDecimal","ALPHABET","basex","$parcel$global","$df64573ef6d51081$exports","$hgUW1$isString","Buffer","$hgUW1$isNumber","base","$hgUW1$isUndefined","$hgUW1$isObject","$hgUW1$isNil","$hgUW1$isInteger","$hgUW1$jsbigdecimal","$hgUW1$isArray","$hgUW1$inRange","$hgUW1$isNull","indexes","$hgUW1$isEmpty","br","$hgUW1$isDate","$149c1bd638913645$var$versionGuard","crypto","pad","isLE","_32n","SHA256","u64.split","u64.rotrSH","u64.shrSH","u64.rotrSL","u64.shrSL","u64.rotrBH","u64.rotrBL","u64.add4L","u64.add4H","u64.add5L","u64.add5H","u64.add","u64.add3L","u64.add3H","SHA512","sha256","sha224","SHA224","sha512","sha384","SHA384","sha512_256","SHA512_256","sha512_224","SHA512_224","SHA256n","sha256n","SHA224n","sha224n","SHA512n","sha512n","SHA384n","sha384n","SHA512_224n","sha512_224n","SHA512_256n","sha512_256n","require$$0","require$$1","require$$2","require$$3","require$$4","parse","ms","debug","self","split","exports","module","process","ws","UnsafeNumberReason","_typeof","obj","LosslessNumber","toString","value","pos","debug$1","ClusterOrder","ClusterDistribution","ClusterStatus","ClientState","ConnectionStatus","EventEmitter","net","tls","WebSocket","$hgUW1$isomorphicws","$hgUW1$Networks","$hgUW1$ConnectionStatus","$hgUW1$ElectrumClient","txPromises","txEntities","$hgUW1$GroupToken","$hgUW1$AddressType","$hgUW1$Address","group","amount","extraGroup","$hgUW1$UnitUtils","$hgUW1$Transaction","$hgUW1$TransactionBuilder","$hgUW1$Script","$hgUW1$ScriptTemplateInput","$hgUW1$BufferUtils","$hgUW1$Opcode","$hgUW1$parseInt","$hgUW1$ScriptFactory","$hgUW1$Output","$149c1bd638913645$re_export$SighashType","$hgUW1$TxSigner","$hgUW1$TxSignature","$hgUW1$generateMnemonic","$hgUW1$wordlists","$hgUW1$mnemonicToSeedSync","$hgUW1$HDPrivateKey","$hgUW1$validateMnemonic","$hgUW1$isBuffer","$hgUW1$Message","$hgUW1$BNExtended","$hgUW1$DAppProvider","$hgUW1$JsonRpcError","$hgUW1$JsonRpcErrorCode","tx","$hgUW1$WalletProvider"],"mappings":"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","x_google_ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85]}