import{$ as k,a as C}from"./walletBet.bundle.js";const l="kk_wallet_v1",f="kk_wallet_iv_v1";async function S(e){const n=new TextEncoder().encode(e),o=await crypto.subtle.digest("SHA-256",n);return crypto.subtle.importKey("raw",o,"AES-GCM",!1,["encrypt","decrypt"])}async function E(e,n){const o=await S(e),c=crypto.getRandomValues(new Uint8Array(12)),r=await crypto.subtle.encrypt({name:"AES-GCM",iv:c},o,new TextEncoder().encode(n));localStorage.setItem(f,btoa(String.fromCharCode(...c))),localStorage.setItem(l,btoa(String.fromCharCode(...new Uint8Array(r))))}async function b(e){const n=await S(e),o=atob(localStorage.getItem(f)||""),c=new Uint8Array([...o].map(s=>s.charCodeAt(0))),r=atob(localStorage.getItem(l)||""),i=new Uint8Array([...r].map(s=>s.charCodeAt(0))),y=await crypto.subtle.decrypt({name:"AES-GCM",iv:c},n,i);return new TextDecoder().decode(y)}async function A(){const e=document.getElementById("net"),n=document.getElementById("pass"),o=document.getElementById("btnCreate"),c=document.getElementById("btnImport"),r=document.getElementById("importArea"),i=document.getElementById("seedIn"),y=document.getElementById("btnDoImport"),s=document.getElementById("linked"),v=document.getElementById("addr"),I=document.getElementById("btnLink");let m=null,p=null,u=null;async function h(){const a=e.value==="mainnet"?"mainnet":"testnet";await C.connect(a)}async function w(a,t){await h(),m=new k(a,t),await m.initialize(),p=m.accountStore.getAccount("2.0"),u=p.getPrimaryAddressKey().address,v.textContent=`Linked address (${t}): ${u}`,s.hidden=!1}o.addEventListener("click",async()=>{const a=n.value||"",t=e.value,g=k.create().export().phrase;await E(a,JSON.stringify({seed:g,net:t})),await w(g,t),alert("New wallet created. Write down your seed!")}),c.addEventListener("click",()=>r.hidden=!r.hidden),y.addEventListener("click",async()=>{const a=n.value||"",t=e.value,d=(i.value||"").trim();if(!d)return alert("Enter a 12-word seed");await E(a,JSON.stringify({seed:d,net:t})),await w(d,t),alert("Imported wallet. Seed stored encrypted locally.")}),I.addEventListener("click",async()=>{const t=await(await fetch("/api/wallet/link",{method:"POST",headers:{"Content-Type":"application/json","CSRF-Token":window.csrfToken||""},body:JSON.stringify({address:u,network:e.value})})).json();if(!t.ok)return alert("Link failed: "+(t.error||"unknown"));alert("Wallet linked!"),location.href="/play.html"}),n.addEventListener("change",async()=>{try{if(!localStorage.getItem(l))return;const{seed:a,net:t}=JSON.parse(await b(n.value||""));e.value=t,await w(a,t)}catch{}})}passEl.addEventListener("change",async()=>{try{if(!localStorage.getItem(l))return;const{seed:e,net:n}=JSON.parse(await b(passEl.value||""));netSel.value=n,await bootFromSeed(e,n)}catch{alert("Could not unlock local wallet. Check your passphrase.")}});addEventListener("DOMContentLoaded",A);
