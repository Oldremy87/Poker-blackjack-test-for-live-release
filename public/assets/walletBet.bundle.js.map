{"version":3,"file":"walletBet.bundle.js","sources":["../../src/walletBet.ts"],"sourcesContent":["// src/walletBet.ts\r\nimport { Buffer } from 'buffer';\r\nimport process from 'process';\r\nimport * as nodeCrypto from 'crypto-browserify';\r\n(globalThis as any).Buffer  ||= Buffer;\r\n(globalThis as any).process ||= process;\r\n(globalThis as any).__nodeCrypto = nodeCrypto;\r\n// src/walletBet.ts  (sign-only)\r\nconst KEY='kk_wallet_v1', IV='kk_wallet_iv_v1';\r\n\r\nasync function loadWallet(pass: string){\r\n  const rawB64 = localStorage.getItem(KEY) || '';\r\n  const ivB64  = localStorage.getItem(IV)  || '';\r\n  if (!rawB64 || !ivB64) throw new Error('No local wallet. Visit Connect.');\r\n\r\n  const raw = atob(rawB64);\r\n  const ivb = atob(ivB64);\r\n  const iv  = new Uint8Array([...ivb].map(c=>c.charCodeAt(0)));\r\n  const ct  = new Uint8Array([...raw].map(c=>c.charCodeAt(0)));\r\n\r\n  const h   = await crypto.subtle.digest('SHA-256', new TextEncoder().encode(pass));\r\n  const key = await crypto.subtle.importKey('raw', h, 'AES-GCM', false, ['decrypt']);\r\n  const pt  = await crypto.subtle.decrypt({ name:'AES-GCM', iv }, key, ct);\r\n\r\n  const { seed, net } = JSON.parse(new TextDecoder().decode(pt));\r\n\r\n  // No provider passed â€” we are not fetching anything in the browser\r\n  const wallet = new Wallet(seed, net);\r\n  await wallet.initialize();\r\n  const account = wallet.accountStore.getAccount('2.0');\r\n  if (!account) throw new Error('DApp account (2.0) not found.');\r\n  const address = account.getPrimaryAddressKey().address;\r\n\r\n  return { wallet, account, address, network: net };\r\n}\r\n\r\nasync function csrf() {\r\n  if ((window as any).csrfToken) return (window as any).csrfToken;\r\n  const r = await fetch('/api/csrf', { credentials:'include' });\r\n  const j = await r.json();\r\n  (window as any).csrfToken = j.csrfToken;\r\n  return j.csrfToken;\r\n}\r\n\r\nexport async function placeBet({ passphrase, kiblAmount, tokenIdHex, feeNexa }: {\r\n  passphrase: string; kiblAmount: number; tokenIdHex: string; feeNexa: number;\r\n}) {\r\n  if (!passphrase || passphrase.length < 8) throw new Error('Password required (8+ chars).');\r\n\r\n  const { wallet, account, address, network } = await loadWallet(passphrase);\r\n  const CSRF = await csrf();\r\n\r\n  // 1) Build unsigned on the server (uses server rostrum)\r\n  const r = await fetch('/api/bet/build-unsigned', {\r\n    method:'POST',\r\n    credentials:'include',\r\n    headers:{ 'Content-Type':'application/json', 'CSRF-Token': CSRF },\r\n    body: JSON.stringify({ fromAddress: address, kiblAmount, feeNexa })\r\n  });\r\n  const j = await r.json().catch(()=> ({} as any));\r\n  if (!r.ok || !j.ok) throw new Error(j?.error || 'build_unsigned_failed');\r\n\r\n  // 2) Sign locally\r\n  const signedHex = await wallet.newTransaction(account, j.unsignedTx).sign().build();\r\n\r\n  // 3) Broadcast via server\r\n  const br = await fetch('/api/tx/broadcast', {\r\n    method:'POST',\r\n    credentials:'include',\r\n    headers:{ 'Content-Type':'application/json', 'CSRF-Token': CSRF },\r\n    body: JSON.stringify({ hex: signedHex })\r\n  });\r\n  const bj = await br.json().catch(()=> ({} as any));\r\n  if (!br.ok || !bj.ok) throw new Error(bj?.error || 'broadcast_failed');\r\n\r\n  return { txId: bj.txid, network, address, house: j.house };\r\n}\r\n"],"names":["Buffer","process"],"mappings":";AAIC,WAAmB,WAAYA;AAC/B,WAAmB,YAAYC;AAC/B,WAAmB,eAAe;AAEnC,MAAM,MAAI,gBAAgB,KAAG;AAE7B,eAAe,WAAW,MAAa;AACrC,QAAM,SAAS,aAAa,QAAQ,GAAG,KAAK;AAC5C,QAAM,QAAS,aAAa,QAAQ,EAAE,KAAM;AAC5C,MAAI,CAAC,UAAU,CAAC,MAAO,OAAM,IAAI,MAAM,iCAAiC;AAExE,QAAM,MAAM,KAAK,MAAM;AACvB,QAAM,MAAM,KAAK,KAAK;AACtB,QAAM,KAAM,IAAI,WAAW,CAAC,GAAG,GAAG,EAAE,IAAI,CAAA,MAAG,EAAE,WAAW,CAAC,CAAC,CAAC;AAC3D,QAAM,KAAM,IAAI,WAAW,CAAC,GAAG,GAAG,EAAE,IAAI,CAAA,MAAG,EAAE,WAAW,CAAC,CAAC,CAAC;AAE3D,QAAM,IAAM,MAAM,OAAO,OAAO,OAAO,WAAW,IAAI,YAAA,EAAc,OAAO,IAAI,CAAC;AAChF,QAAM,MAAM,MAAM,OAAO,OAAO,UAAU,OAAO,GAAG,WAAW,OAAO,CAAC,SAAS,CAAC;AACjF,QAAM,KAAM,MAAM,OAAO,OAAO,QAAQ,EAAE,MAAK,WAAW,MAAM,KAAK,EAAE;AAEvE,QAAM,EAAE,MAAM,IAAA,IAAQ,KAAK,MAAM,IAAI,YAAA,EAAc,OAAO,EAAE,CAAC;AAG7D,QAAM,SAAS,IAAI,OAAO,MAAM,GAAG;AACnC,QAAM,OAAO,WAAA;AACb,QAAM,UAAU,OAAO,aAAa,WAAW,KAAK;AACpD,MAAI,CAAC,QAAS,OAAM,IAAI,MAAM,+BAA+B;AAC7D,QAAM,UAAU,QAAQ,qBAAA,EAAuB;AAE/C,SAAO,EAAE,QAAQ,SAAS,SAAS,SAAS,IAAA;AAC9C;AAEA,eAAe,OAAO;AACpB,MAAK,OAAe,UAAW,QAAQ,OAAe;AACtD,QAAM,IAAI,MAAM,MAAM,aAAa,EAAE,aAAY,WAAW;AAC5D,QAAM,IAAI,MAAM,EAAE,KAAA;AACjB,SAAe,YAAY,EAAE;AAC9B,SAAO,EAAE;AACX;AAEA,eAAsB,SAAS,EAAE,YAAY,YAAY,YAAY,WAElE;AACD,MAAI,CAAC,cAAc,WAAW,SAAS,EAAG,OAAM,IAAI,MAAM,+BAA+B;AAEzF,QAAM,EAAE,QAAQ,SAAS,SAAS,YAAY,MAAM,WAAW,UAAU;AACzE,QAAM,OAAO,MAAM,KAAA;AAGnB,QAAM,IAAI,MAAM,MAAM,2BAA2B;AAAA,IAC/C,QAAO;AAAA,IACP,aAAY;AAAA,IACZ,SAAQ,EAAE,gBAAe,oBAAoB,cAAc,KAAA;AAAA,IAC3D,MAAM,KAAK,UAAU,EAAE,aAAa,SAAS,YAAY,SAAS;AAAA,EAAA,CACnE;AACD,QAAM,IAAI,MAAM,EAAE,KAAA,EAAO,MAAM,OAAM,CAAA,EAAU;AAC/C,MAAI,CAAC,EAAE,MAAM,CAAC,EAAE,GAAI,OAAM,IAAI,MAAM,GAAG,SAAS,uBAAuB;AAGvE,QAAM,YAAY,MAAM,OAAO,eAAe,SAAS,EAAE,UAAU,EAAE,KAAA,EAAO,MAAA;AAG5E,QAAM,KAAK,MAAM,MAAM,qBAAqB;AAAA,IAC1C,QAAO;AAAA,IACP,aAAY;AAAA,IACZ,SAAQ,EAAE,gBAAe,oBAAoB,cAAc,KAAA;AAAA,IAC3D,MAAM,KAAK,UAAU,EAAE,KAAK,WAAW;AAAA,EAAA,CACxC;AACD,QAAM,KAAK,MAAM,GAAG,KAAA,EAAO,MAAM,OAAM,CAAA,EAAU;AACjD,MAAI,CAAC,GAAG,MAAM,CAAC,GAAG,GAAI,OAAM,IAAI,MAAM,IAAI,SAAS,kBAAkB;AAErE,SAAO,EAAE,MAAM,GAAG,MAAM,SAAS,SAAS,OAAO,EAAE,MAAA;AACrD;"}