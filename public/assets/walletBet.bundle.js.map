{"version":3,"file":"walletBet.bundle.js","sources":["../../src/walletBet.ts"],"sourcesContent":["// src/walletBet.ts\r\nimport { Buffer } from 'buffer';\r\nimport process from 'process';\r\nimport * as nodeCrypto from 'crypto-browserify';\r\n(globalThis as any).Buffer  ||= Buffer;\r\n(globalThis as any).process ||= process;\r\n(globalThis as any).__nodeCrypto = nodeCrypto;\r\n\r\nconst KEY='kk_wallet_v1', IV='kk_wallet_iv_v1';\r\n\r\n// Fill these from your config / env / window:\r\nconst KIBL_GROUP_ADDR = 'nexa:tpjkhlhuazsgskkt5hyqn3d0e7l6vfvfg97cf42pprntks4x7vqqqcavzypmt';\r\nconst KIBL_TOKEN_HEX  = '656bfefce8a0885acba5c809c5afcfbfa62589417d84d54108e6bb42a6f30000';\r\n\r\nasync function getSdk() {\r\n  return await import('nexa-wallet-sdk'); // vite alias -> browser ESM build\r\n}\r\nfunction getWalletCtor(mod: any) {\r\n  return mod?.Wallet ?? mod?.default?.Wallet;\r\n}\r\nfunction toFixedFromMinor(minorBn: bigint, decimals: number): string {\r\n  const s = minorBn.toString();\r\n  if (decimals === 0) return s;\r\n  const neg = s.startsWith('-');\r\n  const digits = neg ? s.slice(1) : s;\r\n  const pad = Math.max(0, decimals - digits.length);\r\n  const left = digits.length > decimals ? digits.slice(0, -decimals) : '0';\r\n  const right = (pad ? '0'.repeat(pad) : '') + digits.slice(-decimals).padStart(decimals, '0');\r\n  return (neg ? '-' : '') + `${left}.${right}`;\r\n}\r\n\r\nexport async function loadWallet(pass: string) {\r\n  // --- decrypt local keystore\r\n  const rawB64 = localStorage.getItem(KEY);\r\n  const ivB64  = localStorage.getItem(IV);\r\n  if (!rawB64 || !ivB64) throw new Error('No local wallet. Visit Connect.');\r\n\r\n  const raw = atob(rawB64);\r\n  const ivb = atob(ivB64);\r\n  const iv  = new Uint8Array([...ivb].map(c=>c.charCodeAt(0)));\r\n  const ct  = new Uint8Array([...raw].map(c=>c.charCodeAt(0)));\r\n\r\n  const h   = await crypto.subtle.digest('SHA-256', new TextEncoder().encode(pass));\r\n  const key = await crypto.subtle.importKey('raw', h, 'AES-GCM', false, ['decrypt']);\r\n  const pt  = await crypto.subtle.decrypt({ name:'AES-GCM', iv }, key, ct);\r\n  const { seed, net } = JSON.parse(new TextDecoder().decode(pt)); // net: 'mainnet'|'testnet'\r\n\r\n  // --- SDK + provider\r\n  const sdk = await getSdk();\r\n  const { rostrumProvider } = sdk;\r\n\r\n  // connect once (guard against duplicate connects)\r\n  try {\r\n    const host = net === 'mainnet' ? 'electrum.nexa.org' : 'testnet-electrum.nexa.org';\r\n    const port = net === 'mainnet' ? 20004 : 30004;\r\n    const scheme = 'wss';\r\n    await rostrumProvider.connect?.({ host, port, scheme });\r\n  } catch (_) {\r\n    // ignore if already connected or if connect() isn't idempotent\r\n  }\r\n\r\n  // --- wallet + account\r\n  const WalletCtor = getWalletCtor(sdk);\r\n  if (!WalletCtor) throw new Error('Wallet export missing');\r\n\r\n  const wallet  = new WalletCtor(seed, net);\r\n  await wallet.initialize();\r\n\r\n  const account = wallet.accountStore.getAccount('2.0');\r\n  if (!account) throw new Error('DApp account (2.0) not found.');\r\n  const address = account.getPrimaryAddressKey().address; // nexa:...\r\n\r\n  // --- balances via rostrum UTXOs (authoritative)\r\n  // KIBL has 2 decimals; NEXA has 8 decimals\r\n  let kiblMinor = 0n;\r\n  let nexaMinor = 0n;\r\n  let tokenUtxoCount = 0;\r\n  let nexaUtxoCount = 0;\r\n\r\n  try {\r\n    const [tokenUtxos, nexaUtxos] = await Promise.all([\r\n      rostrumProvider.getTokenUtxos(address, KIBL_TOKEN_HEX),\r\n      rostrumProvider.getNexaUtxos(address),\r\n    ]);\r\n\r\n    for (const u of tokenUtxos || []) kiblMinor += BigInt(u?.value || 0);\r\n    for (const u of nexaUtxos || [])  nexaMinor += BigInt(u?.value || 0);\r\n\r\n    tokenUtxoCount = (tokenUtxos || []).length;\r\n    nexaUtxoCount  = (nexaUtxos  || []).length;\r\n  } catch (e) {\r\n    // If this fails, keep going — caller can decide how to handle unknown balances\r\n    console.warn('[loadWallet] balance fetch failed', e);\r\n  }\r\n\r\n  const balances = {\r\n    kiblMinor: kiblMinor,\r\n    kibl: toFixedFromMinor(kiblMinor, 2),\r\n    tokenUtxoCount,\r\n    nexaMinor: nexaMinor,\r\n    nexa: toFixedFromMinor(nexaMinor, 8),\r\n    nexaUtxoCount,\r\n    // Handy ids for callers:\r\n    tokenHex: KIBL_TOKEN_HEX,\r\n    tokenGroup: KIBL_GROUP_ADDR,\r\n  };\r\n\r\n  return { wallet, account, address, network: net, balances };\r\n}\r\n\r\nasync function csrf() {\r\n  if ((window as any).csrfToken) return (window as any).csrfToken;\r\n  const r = await fetch('/api/csrf', { credentials:'include' });\r\n  const j = await r.json();\r\n  (window as any).csrfToken = j.csrfToken;\r\n  return j.csrfToken;\r\n}\r\n\r\nexport async function placeBet({ passphrase, kiblAmount, tokenIdHex, feeNexa }: {\r\n  passphrase: string; kiblAmount: number; tokenIdHex: string; feeNexa: number;\r\n}) {\r\n  if (!passphrase || passphrase.length < 8) throw new Error('Password required (8+ chars).');\r\n\r\n  const { wallet, account, address, network } = await loadWallet(passphrase);\r\n  const CSRF = await csrf();\r\n\r\n  // 1) Build unsigned via your server (server talks to Rostrum)\r\n  console.log('[placeBet] from', address, 'kiblAmount', kiblAmount, 'tokenIdHex', tokenIdHex, 'feeNexa', feeNexa);\r\n  const r = await fetch('/api/bet/build-unsigned', {\r\n    method:'POST',\r\n    credentials:'include',\r\n    headers:{ 'Content-Type':'application/json', 'CSRF-Token': CSRF },\r\n    body: JSON.stringify({ fromAddress: address, kiblAmount, tokenIdHex, feeNexa })\r\n  });\r\n  const j = await r.json().catch(()=> ({} as any));\r\n  console.log('[placeBet] build-unsigned response ok?', r.ok, 'payload keys', Object.keys(j || {}));\r\n  if (!r.ok || !j.ok) throw new Error(j?.error || 'build_unsigned_failed');\r\n\r\n  // 2) Sign in browser\r\n  console.log('[placeBet] signing…');\r\n  const signedTx = await wallet.newTransaction(account, j.unsignedTx).sign().build();\r\n  console.log('[placeBet] signedHex len', signedTx?.length);\r\n\r\n  // 3) Broadcast via server\r\n  const br = await fetch('/api/tx/broadcast', {\r\n    method:'POST',\r\n    credentials:'include',\r\n    headers:{ 'Content-Type':'application/json', 'CSRF-Token': CSRF },\r\n    body: JSON.stringify({ hex: signedTx })\r\n  });\r\n  const bj = await br.json().catch(()=> ({} as any));\r\n  console.log('[placeBet] broadcast ok?', br.ok, 'payload', bj);\r\n  if (!br.ok || !bj.ok) throw new Error(bj?.error || 'broadcast_failed');\r\n\r\n  return { txId: bj.txid, network, address, house: j.house };\r\n}\r\n"],"names":["Buffer","process"],"mappings":";AAIC,WAAmB,WAAYA;AAC/B,WAAmB,YAAYC;AAC/B,WAAmB,eAAe;AAEnC,MAAM,MAAI,gBAAgB,KAAG;AAG7B,MAAM,kBAAkB;AACxB,MAAM,iBAAkB;AAExB,eAAe,SAAS;AACtB,SAAO,MAAM,OAAO,gCAAiB;AACvC;AACA,SAAS,cAAc,KAAU;AAC/B,SAAO,KAAK,UAAU,KAAK,SAAS;AACtC;AACA,SAAS,iBAAiB,SAAiB,UAA0B;AACnE,QAAM,IAAI,QAAQ,SAAA;AAClB,MAAI,aAAa,EAAG,QAAO;AAC3B,QAAM,MAAM,EAAE,WAAW,GAAG;AAC5B,QAAM,SAAS,MAAM,EAAE,MAAM,CAAC,IAAI;AAClC,QAAM,MAAM,KAAK,IAAI,GAAG,WAAW,OAAO,MAAM;AAChD,QAAM,OAAO,OAAO,SAAS,WAAW,OAAO,MAAM,GAAG,CAAC,QAAQ,IAAI;AACrE,QAAM,SAAS,MAAM,IAAI,OAAO,GAAG,IAAI,MAAM,OAAO,MAAM,CAAC,QAAQ,EAAE,SAAS,UAAU,GAAG;AAC3F,UAAQ,MAAM,MAAM,MAAM,GAAG,IAAI,IAAI,KAAK;AAC5C;AAEA,eAAsB,WAAW,MAAc;AAE7C,QAAM,SAAS,aAAa,QAAQ,GAAG;AACvC,QAAM,QAAS,aAAa,QAAQ,EAAE;AACtC,MAAI,CAAC,UAAU,CAAC,MAAO,OAAM,IAAI,MAAM,iCAAiC;AAExE,QAAM,MAAM,KAAK,MAAM;AACvB,QAAM,MAAM,KAAK,KAAK;AACtB,QAAM,KAAM,IAAI,WAAW,CAAC,GAAG,GAAG,EAAE,IAAI,CAAA,MAAG,EAAE,WAAW,CAAC,CAAC,CAAC;AAC3D,QAAM,KAAM,IAAI,WAAW,CAAC,GAAG,GAAG,EAAE,IAAI,CAAA,MAAG,EAAE,WAAW,CAAC,CAAC,CAAC;AAE3D,QAAM,IAAM,MAAM,OAAO,OAAO,OAAO,WAAW,IAAI,YAAA,EAAc,OAAO,IAAI,CAAC;AAChF,QAAM,MAAM,MAAM,OAAO,OAAO,UAAU,OAAO,GAAG,WAAW,OAAO,CAAC,SAAS,CAAC;AACjF,QAAM,KAAM,MAAM,OAAO,OAAO,QAAQ,EAAE,MAAK,WAAW,MAAM,KAAK,EAAE;AACvE,QAAM,EAAE,MAAM,IAAA,IAAQ,KAAK,MAAM,IAAI,YAAA,EAAc,OAAO,EAAE,CAAC;AAG7D,QAAM,MAAM,MAAM,OAAA;AAClB,QAAM,EAAE,oBAAoB;AAG5B,MAAI;AACF,UAAM,OAAO,QAAQ,YAAY,sBAAsB;AACvD,UAAM,OAAO,QAAQ,YAAY,QAAQ;AACzC,UAAM,SAAS;AACf,UAAM,gBAAgB,UAAU,EAAE,MAAM,MAAM,QAAQ;AAAA,EACxD,SAAS,GAAG;AAAA,EAEZ;AAGA,QAAM,aAAa,cAAc,GAAG;AACpC,MAAI,CAAC,WAAY,OAAM,IAAI,MAAM,uBAAuB;AAExD,QAAM,SAAU,IAAI,WAAW,MAAM,GAAG;AACxC,QAAM,OAAO,WAAA;AAEb,QAAM,UAAU,OAAO,aAAa,WAAW,KAAK;AACpD,MAAI,CAAC,QAAS,OAAM,IAAI,MAAM,+BAA+B;AAC7D,QAAM,UAAU,QAAQ,qBAAA,EAAuB;AAI/C,MAAI,YAAY;AAChB,MAAI,YAAY;AAChB,MAAI,iBAAiB;AACrB,MAAI,gBAAgB;AAEpB,MAAI;AACF,UAAM,CAAC,YAAY,SAAS,IAAI,MAAM,QAAQ,IAAI;AAAA,MAChD,gBAAgB,cAAc,SAAS,cAAc;AAAA,MACrD,gBAAgB,aAAa,OAAO;AAAA,IAAA,CACrC;AAED,eAAW,KAAK,cAAc,CAAA,gBAAiB,OAAO,GAAG,SAAS,CAAC;AACnE,eAAW,KAAK,aAAa,CAAA,gBAAkB,OAAO,GAAG,SAAS,CAAC;AAEnE,sBAAkB,cAAc,CAAA,GAAI;AACpC,qBAAkB,aAAc,CAAA,GAAI;AAAA,EACtC,SAAS,GAAG;AAEV,YAAQ,KAAK,qCAAqC,CAAC;AAAA,EACrD;AAEA,QAAM,WAAW;AAAA,IACf;AAAA,IACA,MAAM,iBAAiB,WAAW,CAAC;AAAA,IACnC;AAAA,IACA;AAAA,IACA,MAAM,iBAAiB,WAAW,CAAC;AAAA,IACnC;AAAA;AAAA,IAEA,UAAU;AAAA,IACV,YAAY;AAAA,EAAA;AAGd,SAAO,EAAE,QAAQ,SAAS,SAAS,SAAS,KAAK,SAAA;AACnD;AAEA,eAAe,OAAO;AACpB,MAAK,OAAe,UAAW,QAAQ,OAAe;AACtD,QAAM,IAAI,MAAM,MAAM,aAAa,EAAE,aAAY,WAAW;AAC5D,QAAM,IAAI,MAAM,EAAE,KAAA;AACjB,SAAe,YAAY,EAAE;AAC9B,SAAO,EAAE;AACX;AAEA,eAAsB,SAAS,EAAE,YAAY,YAAY,YAAY,WAElE;AACD,MAAI,CAAC,cAAc,WAAW,SAAS,EAAG,OAAM,IAAI,MAAM,+BAA+B;AAEzF,QAAM,EAAE,QAAQ,SAAS,SAAS,YAAY,MAAM,WAAW,UAAU;AACzE,QAAM,OAAO,MAAM,KAAA;AAGnB,UAAQ,IAAI,mBAAmB,SAAS,cAAc,YAAY,cAAc,YAAY,WAAW,OAAO;AAC9G,QAAM,IAAI,MAAM,MAAM,2BAA2B;AAAA,IAC/C,QAAO;AAAA,IACP,aAAY;AAAA,IACZ,SAAQ,EAAE,gBAAe,oBAAoB,cAAc,KAAA;AAAA,IAC3D,MAAM,KAAK,UAAU,EAAE,aAAa,SAAS,YAAY,YAAY,QAAA,CAAS;AAAA,EAAA,CAC/E;AACD,QAAM,IAAI,MAAM,EAAE,KAAA,EAAO,MAAM,OAAM,CAAA,EAAU;AAC/C,UAAQ,IAAI,0CAA0C,EAAE,IAAI,gBAAgB,OAAO,KAAK,KAAK,CAAA,CAAE,CAAC;AAChG,MAAI,CAAC,EAAE,MAAM,CAAC,EAAE,GAAI,OAAM,IAAI,MAAM,GAAG,SAAS,uBAAuB;AAGvE,UAAQ,IAAI,qBAAqB;AACjC,QAAM,WAAW,MAAM,OAAO,eAAe,SAAS,EAAE,UAAU,EAAE,KAAA,EAAO,MAAA;AAC3E,UAAQ,IAAI,4BAA4B,UAAU,MAAM;AAGxD,QAAM,KAAK,MAAM,MAAM,qBAAqB;AAAA,IAC1C,QAAO;AAAA,IACP,aAAY;AAAA,IACZ,SAAQ,EAAE,gBAAe,oBAAoB,cAAc,KAAA;AAAA,IAC3D,MAAM,KAAK,UAAU,EAAE,KAAK,UAAU;AAAA,EAAA,CACvC;AACD,QAAM,KAAK,MAAM,GAAG,KAAA,EAAO,MAAM,OAAM,CAAA,EAAU;AACjD,UAAQ,IAAI,4BAA4B,GAAG,IAAI,WAAW,EAAE;AAC5D,MAAI,CAAC,GAAG,MAAM,CAAC,GAAG,GAAI,OAAM,IAAI,MAAM,IAAI,SAAS,kBAAkB;AAErE,SAAO,EAAE,MAAM,GAAG,MAAM,SAAS,SAAS,OAAO,EAAE,MAAA;AACrD;"}